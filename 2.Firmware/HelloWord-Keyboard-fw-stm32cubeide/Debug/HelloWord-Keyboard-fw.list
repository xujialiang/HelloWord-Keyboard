
HelloWord-Keyboard-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800e088  0800e088  0001e088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800e4e4  0800e4e4  0001e4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e4ec  0800e4ec  0001e4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000340  20000000  0800e4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c88  20000340  0800e830  00020340  2**3
                  ALLOC
  7 ._user_heap_stack 00000a00  20001fc8  0800e830  00021fc8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ab2d  00000000  00000000  00020369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004da5  00000000  00000000  0003ae96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000017c0  00000000  00000000  0003fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001598  00000000  00000000  00041400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001fd8e  00000000  00000000  00042998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00024fc3  00000000  00000000  00062726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000962c4  00000000  00000000  000876e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0011d9ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006ff4  00000000  00000000  0011da00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000340 	.word	0x20000340
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e06c 	.word	0x0800e06c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000344 	.word	0x20000344
 800014c:	0800e06c 	.word	0x0800e06c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_DMA_Init+0x48>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <MX_DMA_Init+0x48>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_DMA_Init+0x48>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	200c      	movs	r0, #12
 8000aac:	f000 fd3d 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f000 fd56 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2103      	movs	r1, #3
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 fd35 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f000 fd4e 	bl	8001562 <HAL_NVIC_EnableIRQ>

}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000aee:	f043 0320 	orr.w	r3, r3, #32
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0320 	and.w	r3, r3, #32
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_GPIO_Init+0xa4>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|PL_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2118      	movs	r1, #24
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_GPIO_Init+0xa8>)
 8000b36:	f001 fb17 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FN_Pin;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FN_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MX_GPIO_Init+0xa8>)
 8000b4e:	f001 f987 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|PL_Pin;
 8000b52:	2318      	movs	r3, #24
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_GPIO_Init+0xa8>)
 8000b6a:	f001 f979 	bl	8001e60 <HAL_GPIO_Init>

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
HAL_RCC_DeInit();
 8000b84:	f002 ffb4 	bl	8003af0 <HAL_RCC_DeInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 fb96 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f811 	bl	8000bb2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f7ff ffa0 	bl	8000ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b94:	f7ff ff78 	bl	8000a88 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b98:	f000 f86a 	bl	8000c70 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000b9c:	f000 faa2 	bl	80010e4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000ba0:	f000 fb14 	bl	80011cc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000ba4:	f009 fb66 	bl	800a274 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8000ba8:	f000 f89a 	bl	8000ce0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
    Main();
 8000bac:	f00a fbbe 	bl	800b32c <Main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <main+0x30>

08000bb2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b094      	sub	sp, #80	; 0x50
 8000bb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbc:	2228      	movs	r2, #40	; 0x28
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f00a fd4d 	bl	800b660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bfe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 f80b 	bl	8003c24 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c14:	f000 f827 	bl	8000c66 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c28:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2102      	movs	r1, #2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fa77 	bl	8004128 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c40:	f000 f811 	bl	8000c66 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c44:	2310      	movs	r3, #16
 8000c46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fc02 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c5a:	f000 f804 	bl	8000c66 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3750      	adds	r7, #80	; 0x50
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6a:	b672      	cpsid	i
}
 8000c6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c6e:	e7fe      	b.n	8000c6e <Error_Handler+0x8>

08000c70 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <MX_SPI1_Init+0x6c>)
 8000c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c88:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000ca6:	2218      	movs	r2, #24
 8000ca8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000cbe:	220a      	movs	r2, #10
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_SPI1_Init+0x68>)
 8000cc4:	f003 fc7e 	bl	80045c4 <HAL_SPI_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000cce:	f7ff ffca 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000035c 	.word	0x2000035c
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <MX_SPI2_Init+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_SPI2_Init+0x64>)
 8000d32:	f003 fc47 	bl	80045c4 <HAL_SPI_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d3c:	f7ff ff93 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200003b4 	.word	0x200003b4
 8000d48:	40003800 	.word	0x40003800

08000d4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a60      	ldr	r2, [pc, #384]	; (8000ee8 <HAL_SPI_MspInit+0x19c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d15f      	bne.n	8000e2c <HAL_SPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d6c:	4b5f      	ldr	r3, [pc, #380]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a5e      	ldr	r2, [pc, #376]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000d72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b59      	ldr	r3, [pc, #356]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a58      	ldr	r2, [pc, #352]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b56      	ldr	r3, [pc, #344]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4850      	ldr	r0, [pc, #320]	; (8000ef0 <HAL_SPI_MspInit+0x1a4>)
 8000db0:	f001 f856 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db4:	2340      	movs	r3, #64	; 0x40
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	484a      	ldr	r0, [pc, #296]	; (8000ef0 <HAL_SPI_MspInit+0x1a4>)
 8000dc8:	f001 f84a 	bl	8001e60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000dcc:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000dce:	4a4a      	ldr	r2, [pc, #296]	; (8000ef8 <HAL_SPI_MspInit+0x1ac>)
 8000dd0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd2:	4b48      	ldr	r3, [pc, #288]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd8:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dde:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de4:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dea:	4b42      	ldr	r3, [pc, #264]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000df6:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000dfe:	483d      	ldr	r0, [pc, #244]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000e00:	f000 fbca 	bl	8001598 <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000e0a:	f7ff ff2c 	bl	8000c66 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a38      	ldr	r2, [pc, #224]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000e12:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e14:	4a37      	ldr	r2, [pc, #220]	; (8000ef4 <HAL_SPI_MspInit+0x1a8>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	2023      	movs	r0, #35	; 0x23
 8000e20:	f000 fb83 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e24:	2023      	movs	r0, #35	; 0x23
 8000e26:	f000 fb9c 	bl	8001562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e2a:	e058      	b.n	8000ede <HAL_SPI_MspInit+0x192>
  else if(spiHandle->Instance==SPI2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a32      	ldr	r2, [pc, #200]	; (8000efc <HAL_SPI_MspInit+0x1b0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d153      	bne.n	8000ede <HAL_SPI_MspInit+0x192>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a2c      	ldr	r2, [pc, #176]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a26      	ldr	r2, [pc, #152]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_SPI_MspInit+0x1a0>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e66:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4821      	ldr	r0, [pc, #132]	; (8000f00 <HAL_SPI_MspInit+0x1b4>)
 8000e7c:	f000 fff0 	bl	8001e60 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000e82:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <HAL_SPI_MspInit+0x1bc>)
 8000e84:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000e88:	2210      	movs	r2, #16
 8000e8a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000eb2:	4814      	ldr	r0, [pc, #80]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000eb4:	f000 fb70 	bl	8001598 <HAL_DMA_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_SPI_MspInit+0x176>
      Error_Handler();
 8000ebe:	f7ff fed2 	bl	8000c66 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000ec6:	649a      	str	r2, [r3, #72]	; 0x48
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_SPI_MspInit+0x1b8>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2024      	movs	r0, #36	; 0x24
 8000ed4:	f000 fb29 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ed8:	2024      	movs	r0, #36	; 0x24
 8000eda:	f000 fb42 	bl	8001562 <HAL_NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	2000040c 	.word	0x2000040c
 8000ef8:	4002001c 	.word	0x4002001c
 8000efc:	40003800 	.word	0x40003800
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	20000450 	.word	0x20000450
 8000f08:	40020058 	.word	0x40020058

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_MspInit+0x60>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_MspInit+0x60>)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f9c5 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Channel2_IRQHandler+0x10>)
 8000fc6:	f000 fc17 	bl	80017f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000040c 	.word	0x2000040c

08000fd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Channel5_IRQHandler+0x10>)
 8000fda:	f000 fc0d 	bl	80017f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000450 	.word	0x20000450

08000fe8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fee:	f001 fa04 	bl	80023fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000e14 	.word	0x20000e14

08000ffc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
    OnTimerCallback();
 8001000:	f00a fa0c 	bl	800b41c <OnTimerCallback>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <TIM4_IRQHandler+0x14>)
 8001006:	f003 feed 	bl	8004de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000498 	.word	0x20000498

08001014 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <SPI1_IRQHandler+0x10>)
 800101a:	f003 fc0d 	bl	8004838 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000035c 	.word	0x2000035c

08001028 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <SPI2_IRQHandler+0x10>)
 800102e:	f003 fc03 	bl	8004838 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200003b4 	.word	0x200003b4

0800103c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	return 1;
 8001040:	2301      	movs	r3, #1
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <_kill>:

int _kill(int pid, int sig)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001054:	f00a facc 	bl	800b5f0 <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	2216      	movs	r2, #22
 800105c:	601a      	str	r2, [r3, #0]
	return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_exit>:

void _exit (int status)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffe7 	bl	800104a <_kill>
	while (1) {}		/* Make sure we hang here */
 800107c:	e7fe      	b.n	800107c <_exit+0x12>
	...

08001080 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x50>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x16>
		heap_end = &end;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <_sbrk+0x50>)
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <_sbrk+0x54>)
 8001094:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <_sbrk+0x50>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <_sbrk+0x50>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	466a      	mov	r2, sp
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d907      	bls.n	80010ba <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80010aa:	f00a faa1 	bl	800b5f0 <__errno>
 80010ae:	4603      	mov	r3, r0
 80010b0:	220c      	movs	r2, #12
 80010b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b8:	e006      	b.n	80010c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <_sbrk+0x50>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <_sbrk+0x50>)
 80010c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000494 	.word	0x20000494
 80010d4:	20001fc8 	.word	0x20001fc8

080010d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_TIM4_Init+0x94>)
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <MX_TIM4_Init+0x98>)
 8001104:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_TIM4_Init+0x94>)
 8001108:	2247      	movs	r2, #71	; 0x47
 800110a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_TIM4_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_TIM4_Init+0x94>)
 8001114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001118:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_TIM4_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_TIM4_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001126:	4814      	ldr	r0, [pc, #80]	; (8001178 <MX_TIM4_Init+0x94>)
 8001128:	f003 fdba 	bl	8004ca0 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001132:	f7ff fd98 	bl	8000c66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_TIM4_Init+0x94>)
 8001144:	f003 ff56 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800114e:	f7ff fd8a 	bl	8000c66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_TIM4_Init+0x94>)
 8001160:	f004 f932 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800116a:	f7ff fd7c 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000498 	.word	0x20000498
 800117c:	40000800 	.word	0x40000800

08001180 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_TIM_Base_MspInit+0x44>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d113      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_TIM_Base_MspInit+0x48>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <HAL_TIM_Base_MspInit+0x48>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_TIM_Base_MspInit+0x48>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	201e      	movs	r0, #30
 80011b0:	f000 f9bb 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011b4:	201e      	movs	r0, #30
 80011b6:	f000 f9d4 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART1_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 8001204:	f004 f950 	bl	80054a8 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f7ff fd2a 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200004e0 	.word	0x200004e0
 800121c:	40013800 	.word	0x40013800

08001220 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_UART_MspInit+0x8c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d131      	bne.n	80012a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_UART_MspInit+0x90>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_UART_MspInit+0x90>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <HAL_UART_MspInit+0x94>)
 8001286:	f000 fdeb 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_UART_MspInit+0x94>)
 80012a0:	f000 fdde 	bl	8001e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x28>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x28>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f923 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fe1a 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f93b 	bl	800157e <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001320:	f000 f903 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_IncTick+0x1c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x20>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a03      	ldr	r2, [pc, #12]	; (8001364 <HAL_IncTick+0x20>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000008 	.word	0x20000008
 8001364:	20000524 	.word	0x20000524

08001368 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b02      	ldr	r3, [pc, #8]	; (8001378 <HAL_GetTick+0x10>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000524 	.word	0x20000524

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4906      	ldr	r1, [pc, #24]	; (8001414 <__NVIC_EnableIRQ+0x34>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	f7ff ff90 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff2d 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff42 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff35 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e043      	b.n	8001636 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_DMA_Init+0xa8>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_DMA_Init+0xac>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_DMA_Init+0xb0>)
 80015ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	bffdfff8 	.word	0xbffdfff8
 8001644:	cccccccd 	.word	0xcccccccd
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_DMA_Start_IT+0x20>
 8001668:	2302      	movs	r3, #2
 800166a:	e04a      	b.n	8001702 <HAL_DMA_Start_IT+0xb6>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800167a:	2b01      	cmp	r3, #1
 800167c:	d13a      	bne.n	80016f4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f9ae 	bl	8001a04 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 020e 	orr.w	r2, r2, #14
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e00f      	b.n	80016e2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0204 	bic.w	r2, r2, #4
 80016d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 020a 	orr.w	r2, r2, #10
 80016e0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0201 	orr.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e005      	b.n	8001700 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016fc:	2302      	movs	r3, #2
 80016fe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001700:	7dfb      	ldrb	r3, [r7, #23]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800171e:	2b02      	cmp	r3, #2
 8001720:	d005      	beq.n	800172e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2204      	movs	r2, #4
 8001726:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e051      	b.n	80017d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 020e 	bic.w	r2, r2, #14
 800173c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Abort_IT+0xd0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d029      	beq.n	80017ac <HAL_DMA_Abort_IT+0xa0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HAL_DMA_Abort_IT+0xd4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d022      	beq.n	80017a8 <HAL_DMA_Abort_IT+0x9c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Abort_IT+0xd8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d01a      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x96>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_DMA_Abort_IT+0xdc>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d012      	beq.n	800179c <HAL_DMA_Abort_IT+0x90>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_DMA_Abort_IT+0xe0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00a      	beq.n	8001796 <HAL_DMA_Abort_IT+0x8a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_DMA_Abort_IT+0xe4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d102      	bne.n	8001790 <HAL_DMA_Abort_IT+0x84>
 800178a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800178e:	e00e      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 8001790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001794:	e00b      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 8001796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179a:	e008      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	e005      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a6:	e002      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017a8:	2310      	movs	r3, #16
 80017aa:	e000      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017ac:	2301      	movs	r3, #1
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_DMA_Abort_IT+0xe8>)
 80017b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
    } 
  }
  return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020008 	.word	0x40020008
 80017e0:	4002001c 	.word	0x4002001c
 80017e4:	40020030 	.word	0x40020030
 80017e8:	40020044 	.word	0x40020044
 80017ec:	40020058 	.word	0x40020058
 80017f0:	4002006c 	.word	0x4002006c
 80017f4:	40020000 	.word	0x40020000

080017f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	2204      	movs	r2, #4
 8001816:	409a      	lsls	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d04f      	beq.n	80018c0 <HAL_DMA_IRQHandler+0xc8>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d04a      	beq.n	80018c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a66      	ldr	r2, [pc, #408]	; (80019e8 <HAL_DMA_IRQHandler+0x1f0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d029      	beq.n	80018a6 <HAL_DMA_IRQHandler+0xae>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a65      	ldr	r2, [pc, #404]	; (80019ec <HAL_DMA_IRQHandler+0x1f4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d022      	beq.n	80018a2 <HAL_DMA_IRQHandler+0xaa>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_DMA_IRQHandler+0x1f8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01a      	beq.n	800189c <HAL_DMA_IRQHandler+0xa4>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a62      	ldr	r2, [pc, #392]	; (80019f4 <HAL_DMA_IRQHandler+0x1fc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d012      	beq.n	8001896 <HAL_DMA_IRQHandler+0x9e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a60      	ldr	r2, [pc, #384]	; (80019f8 <HAL_DMA_IRQHandler+0x200>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00a      	beq.n	8001890 <HAL_DMA_IRQHandler+0x98>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5f      	ldr	r2, [pc, #380]	; (80019fc <HAL_DMA_IRQHandler+0x204>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d102      	bne.n	800188a <HAL_DMA_IRQHandler+0x92>
 8001884:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001888:	e00e      	b.n	80018a8 <HAL_DMA_IRQHandler+0xb0>
 800188a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800188e:	e00b      	b.n	80018a8 <HAL_DMA_IRQHandler+0xb0>
 8001890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001894:	e008      	b.n	80018a8 <HAL_DMA_IRQHandler+0xb0>
 8001896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800189a:	e005      	b.n	80018a8 <HAL_DMA_IRQHandler+0xb0>
 800189c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a0:	e002      	b.n	80018a8 <HAL_DMA_IRQHandler+0xb0>
 80018a2:	2340      	movs	r3, #64	; 0x40
 80018a4:	e000      	b.n	80018a8 <HAL_DMA_IRQHandler+0xb0>
 80018a6:	2304      	movs	r3, #4
 80018a8:	4a55      	ldr	r2, [pc, #340]	; (8001a00 <HAL_DMA_IRQHandler+0x208>)
 80018aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8094 	beq.w	80019de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018be:	e08e      	b.n	80019de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	2202      	movs	r2, #2
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d056      	beq.n	800197e <HAL_DMA_IRQHandler+0x186>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d051      	beq.n	800197e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10b      	bne.n	8001900 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 020a 	bic.w	r2, r2, #10
 80018f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a38      	ldr	r2, [pc, #224]	; (80019e8 <HAL_DMA_IRQHandler+0x1f0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d029      	beq.n	800195e <HAL_DMA_IRQHandler+0x166>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a37      	ldr	r2, [pc, #220]	; (80019ec <HAL_DMA_IRQHandler+0x1f4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <HAL_DMA_IRQHandler+0x162>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <HAL_DMA_IRQHandler+0x1f8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01a      	beq.n	8001954 <HAL_DMA_IRQHandler+0x15c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a34      	ldr	r2, [pc, #208]	; (80019f4 <HAL_DMA_IRQHandler+0x1fc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d012      	beq.n	800194e <HAL_DMA_IRQHandler+0x156>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a32      	ldr	r2, [pc, #200]	; (80019f8 <HAL_DMA_IRQHandler+0x200>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00a      	beq.n	8001948 <HAL_DMA_IRQHandler+0x150>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a31      	ldr	r2, [pc, #196]	; (80019fc <HAL_DMA_IRQHandler+0x204>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d102      	bne.n	8001942 <HAL_DMA_IRQHandler+0x14a>
 800193c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001940:	e00e      	b.n	8001960 <HAL_DMA_IRQHandler+0x168>
 8001942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001946:	e00b      	b.n	8001960 <HAL_DMA_IRQHandler+0x168>
 8001948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194c:	e008      	b.n	8001960 <HAL_DMA_IRQHandler+0x168>
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	e005      	b.n	8001960 <HAL_DMA_IRQHandler+0x168>
 8001954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001958:	e002      	b.n	8001960 <HAL_DMA_IRQHandler+0x168>
 800195a:	2320      	movs	r3, #32
 800195c:	e000      	b.n	8001960 <HAL_DMA_IRQHandler+0x168>
 800195e:	2302      	movs	r3, #2
 8001960:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <HAL_DMA_IRQHandler+0x208>)
 8001962:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	d034      	beq.n	80019de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800197c:	e02f      	b.n	80019de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2208      	movs	r2, #8
 8001984:	409a      	lsls	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d028      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x1e8>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d023      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 020e 	bic.w	r2, r2, #14
 80019a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f202 	lsl.w	r2, r1, r2
 80019b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
    }
  }
  return;
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
}
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40020008 	.word	0x40020008
 80019ec:	4002001c 	.word	0x4002001c
 80019f0:	40020030 	.word	0x40020030
 80019f4:	40020044 	.word	0x40020044
 80019f8:	40020058 	.word	0x40020058
 80019fc:	4002006c 	.word	0x4002006c
 8001a00:	40020000 	.word	0x40020000

08001a04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d108      	bne.n	8001a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a42:	e007      	b.n	8001a54 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_FLASH_Program+0xd8>)
 8001a7c:	7e1b      	ldrb	r3, [r3, #24]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_FLASH_Program+0x26>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e054      	b.n	8001b30 <HAL_FLASH_Program+0xd0>
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_FLASH_Program+0xd8>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a90:	f000 f8a8 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001a94:	4603      	mov	r3, r0
 8001a96:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d144      	bne.n	8001b28 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d102      	bne.n	8001aaa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	757b      	strb	r3, [r7, #21]
 8001aa8:	e007      	b.n	8001aba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d102      	bne.n	8001ab6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	757b      	strb	r3, [r7, #21]
 8001ab4:	e001      	b.n	8001aba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	75bb      	strb	r3, [r7, #22]
 8001abe:	e02d      	b.n	8001b1c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001ac0:	7dbb      	ldrb	r3, [r7, #22]
 8001ac2:	005a      	lsls	r2, r3, #1
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	eb02 0c03 	add.w	ip, r2, r3
 8001aca:	7dbb      	ldrb	r3, [r7, #22]
 8001acc:	0119      	lsls	r1, r3, #4
 8001ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ad2:	f1c1 0620 	rsb	r6, r1, #32
 8001ad6:	f1a1 0020 	sub.w	r0, r1, #32
 8001ada:	fa22 f401 	lsr.w	r4, r2, r1
 8001ade:	fa03 f606 	lsl.w	r6, r3, r6
 8001ae2:	4334      	orrs	r4, r6
 8001ae4:	fa23 f000 	lsr.w	r0, r3, r0
 8001ae8:	4304      	orrs	r4, r0
 8001aea:	fa23 f501 	lsr.w	r5, r3, r1
 8001aee:	b2a3      	uxth	r3, r4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4660      	mov	r0, ip
 8001af4:	f000 f85a 	bl	8001bac <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001af8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001afc:	f000 f872 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001b00:	4603      	mov	r3, r0
 8001b02:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_FLASH_Program+0xdc>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_FLASH_Program+0xdc>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001b16:	7dbb      	ldrb	r3, [r7, #22]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	75bb      	strb	r3, [r7, #22]
 8001b1c:	7dba      	ldrb	r2, [r7, #22]
 8001b1e:	7d7b      	ldrb	r3, [r7, #21]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d3cd      	bcc.n	8001ac0 <HAL_FLASH_Program+0x60>
 8001b24:	e000      	b.n	8001b28 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001b26:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_FLASH_Program+0xd8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	761a      	strb	r2, [r3, #24]

  return status;
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b38:	20000528 	.word	0x20000528
 8001b3c:	40022000 	.word	0x40022000

08001b40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_FLASH_Unlock+0x40>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_FLASH_Unlock+0x40>)
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_FLASH_Unlock+0x44>)
 8001b5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_FLASH_Unlock+0x40>)
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_FLASH_Unlock+0x48>)
 8001b60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_FLASH_Unlock+0x40>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000
 8001b84:	45670123 	.word	0x45670123
 8001b88:	cdef89ab 	.word	0xcdef89ab

08001b8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_FLASH_Lock+0x1c>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_FLASH_Lock+0x1c>)
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000

08001bac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <FLASH_Program_HalfWord+0x30>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <FLASH_Program_HalfWord+0x34>)
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <FLASH_Program_HalfWord+0x34>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	887a      	ldrh	r2, [r7, #2]
 8001bce:	801a      	strh	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000528 	.word	0x20000528
 8001be0:	40022000 	.word	0x40022000

08001be4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fbbc 	bl	8001368 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001bf2:	e010      	b.n	8001c16 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfa:	d00c      	beq.n	8001c16 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <FLASH_WaitForLastOperation+0x2e>
 8001c02:	f7ff fbb1 	bl	8001368 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d201      	bcs.n	8001c16 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e025      	b.n	8001c62 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <FLASH_WaitForLastOperation+0x88>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e8      	bne.n	8001bf4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <FLASH_WaitForLastOperation+0x88>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <FLASH_WaitForLastOperation+0x88>)
 8001c30:	2220      	movs	r2, #32
 8001c32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <FLASH_WaitForLastOperation+0x88>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <FLASH_WaitForLastOperation+0x88>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <FLASH_WaitForLastOperation+0x88>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c58:	f000 f80a 	bl	8001c70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40022000 	.word	0x40022000

08001c70 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <FLASH_SetErrorCode+0x9c>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <FLASH_SetErrorCode+0x9c>)
 8001c90:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <FLASH_SetErrorCode+0x9c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <FLASH_SetErrorCode+0x9c>)
 8001cb0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00b      	beq.n	8001cde <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <FLASH_SetErrorCode+0x9c>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <FLASH_SetErrorCode+0x9c>)
 8001cd0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f240 1201 	movw	r2, #257	; 0x101
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d106      	bne.n	8001cf6 <FLASH_SetErrorCode+0x86>
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	61d3      	str	r3, [r2, #28]
}  
 8001cf4:	e002      	b.n	8001cfc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <FLASH_SetErrorCode+0x98>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60d3      	str	r3, [r2, #12]
}  
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	20000528 	.word	0x20000528

08001d10 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_FLASHEx_Erase+0xd0>)
 8001d24:	7e1b      	ldrb	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_FLASHEx_Erase+0x1e>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e053      	b.n	8001dd6 <HAL_FLASHEx_Erase+0xc6>
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_FLASHEx_Erase+0xd0>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d116      	bne.n	8001d6a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d40:	f7ff ff50 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d141      	bne.n	8001dce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f000 f84c 	bl	8001de8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d54:	f7ff ff46 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_FLASHEx_Erase+0xd4>)
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_FLASHEx_Erase+0xd4>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6113      	str	r3, [r2, #16]
 8001d68:	e031      	b.n	8001dce <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d6e:	f7ff ff39 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d12a      	bne.n	8001dce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	e019      	b.n	8001dbc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001d88:	68b8      	ldr	r0, [r7, #8]
 8001d8a:	f000 f849 	bl	8001e20 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d92:	f7ff ff27 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001d96:	4603      	mov	r3, r0
 8001d98:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_FLASHEx_Erase+0xd4>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_FLASHEx_Erase+0xd4>)
 8001da0:	f023 0302 	bic.w	r3, r3, #2
 8001da4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	601a      	str	r2, [r3, #0]
            break;
 8001db2:	e00c      	b.n	8001dce <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dba:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	029a      	lsls	r2, r3, #10
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3dc      	bcc.n	8001d88 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_FLASHEx_Erase+0xd0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	761a      	strb	r2, [r3, #24]

  return status;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000528 	.word	0x20000528
 8001de4:	40022000 	.word	0x40022000

08001de8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <FLASH_MassErase+0x30>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <FLASH_MassErase+0x34>)
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <FLASH_MassErase+0x34>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <FLASH_MassErase+0x34>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <FLASH_MassErase+0x34>)
 8001e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e0c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000528 	.word	0x20000528
 8001e1c:	40022000 	.word	0x40022000

08001e20 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <FLASH_PageErase+0x38>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <FLASH_PageErase+0x3c>)
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <FLASH_PageErase+0x3c>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <FLASH_PageErase+0x3c>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <FLASH_PageErase+0x3c>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <FLASH_PageErase+0x3c>)
 8001e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000528 	.word	0x20000528
 8001e5c:	40022000 	.word	0x40022000

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b08b      	sub	sp, #44	; 0x2c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e169      	b.n	8002148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e74:	2201      	movs	r2, #1
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8158 	bne.w	8002142 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4a9a      	ldr	r2, [pc, #616]	; (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d05e      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001e9c:	4a98      	ldr	r2, [pc, #608]	; (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d875      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ea2:	4a98      	ldr	r2, [pc, #608]	; (8002104 <HAL_GPIO_Init+0x2a4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d058      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ea8:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_GPIO_Init+0x2a4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d86f      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eae:	4a96      	ldr	r2, [pc, #600]	; (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d052      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001eb4:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d869      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eba:	4a94      	ldr	r2, [pc, #592]	; (800210c <HAL_GPIO_Init+0x2ac>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d04c      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ec0:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_GPIO_Init+0x2ac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d863      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ec6:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d046      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ecc:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d85d      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d82a      	bhi.n	8001f2c <HAL_GPIO_Init+0xcc>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d859      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <HAL_GPIO_Init+0x80>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f5b 	.word	0x08001f5b
 8001ee4:	08001f35 	.word	0x08001f35
 8001ee8:	08001f47 	.word	0x08001f47
 8001eec:	08001f89 	.word	0x08001f89
 8001ef0:	08001f8f 	.word	0x08001f8f
 8001ef4:	08001f8f 	.word	0x08001f8f
 8001ef8:	08001f8f 	.word	0x08001f8f
 8001efc:	08001f8f 	.word	0x08001f8f
 8001f00:	08001f8f 	.word	0x08001f8f
 8001f04:	08001f8f 	.word	0x08001f8f
 8001f08:	08001f8f 	.word	0x08001f8f
 8001f0c:	08001f8f 	.word	0x08001f8f
 8001f10:	08001f8f 	.word	0x08001f8f
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f8f 	.word	0x08001f8f
 8001f1c:	08001f8f 	.word	0x08001f8f
 8001f20:	08001f8f 	.word	0x08001f8f
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f51 	.word	0x08001f51
 8001f2c:	4a79      	ldr	r2, [pc, #484]	; (8002114 <HAL_GPIO_Init+0x2b4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f32:	e02c      	b.n	8001f8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e029      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	3304      	adds	r3, #4
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e024      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e01f      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	330c      	adds	r3, #12
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e01a      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f62:	2304      	movs	r3, #4
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e013      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f70:	2308      	movs	r3, #8
 8001f72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	611a      	str	r2, [r3, #16]
          break;
 8001f7a:	e009      	b.n	8001f90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	615a      	str	r2, [r3, #20]
          break;
 8001f86:	e003      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          break;
 8001f8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d801      	bhi.n	8001f9a <HAL_GPIO_Init+0x13a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_Init+0x13e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2bff      	cmp	r3, #255	; 0xff
 8001fa4:	d802      	bhi.n	8001fac <HAL_GPIO_Init+0x14c>
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x152>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3b08      	subs	r3, #8
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	210f      	movs	r1, #15
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80b1 	beq.w	8002142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe0:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff8:	4a48      	ldr	r2, [pc, #288]	; (800211c <HAL_GPIO_Init+0x2bc>)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <HAL_GPIO_Init+0x2c0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_GPIO_Init+0x1ec>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <HAL_GPIO_Init+0x2c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00d      	beq.n	8002048 <HAL_GPIO_Init+0x1e8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <HAL_GPIO_Init+0x2c8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x1e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	; (800212c <HAL_GPIO_Init+0x2cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_GPIO_Init+0x1e0>
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002040:	2304      	movs	r3, #4
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 800204c:	2300      	movs	r3, #0
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800205e:	492f      	ldr	r1, [pc, #188]	; (800211c <HAL_GPIO_Init+0x2bc>)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	492c      	ldr	r1, [pc, #176]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4928      	ldr	r1, [pc, #160]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	491e      	ldr	r1, [pc, #120]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4918      	ldr	r1, [pc, #96]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	4914      	ldr	r1, [pc, #80]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d021      	beq.n	8002134 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
 80020fc:	e021      	b.n	8002142 <HAL_GPIO_Init+0x2e2>
 80020fe:	bf00      	nop
 8002100:	10320000 	.word	0x10320000
 8002104:	10310000 	.word	0x10310000
 8002108:	10220000 	.word	0x10220000
 800210c:	10210000 	.word	0x10210000
 8002110:	10120000 	.word	0x10120000
 8002114:	10110000 	.word	0x10110000
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	40010800 	.word	0x40010800
 8002124:	40010c00 	.word	0x40010c00
 8002128:	40011000 	.word	0x40011000
 800212c:	40011400 	.word	0x40011400
 8002130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	43db      	mvns	r3, r3
 800213c:	4909      	ldr	r1, [pc, #36]	; (8002164 <HAL_GPIO_Init+0x304>)
 800213e:	4013      	ands	r3, r2
 8002140:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	3301      	adds	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f47f ae8e 	bne.w	8001e74 <HAL_GPIO_Init+0x14>
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	372c      	adds	r7, #44	; 0x2c
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219a:	b08b      	sub	sp, #44	; 0x2c
 800219c:	af06      	add	r7, sp, #24
 800219e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0fd      	b.n	80023a6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f008 f9b2 	bl	800a528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fbe9 	bl	80059a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	687e      	ldr	r6, [r7, #4]
 80021de:	466d      	mov	r5, sp
 80021e0:	f106 0410 	add.w	r4, r6, #16
 80021e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	602b      	str	r3, [r5, #0]
 80021ec:	1d33      	adds	r3, r6, #4
 80021ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f0:	6838      	ldr	r0, [r7, #0]
 80021f2:	f003 fbb3 	bl	800595c <USB_CoreInit>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0ce      	b.n	80023a6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fbe4 	bl	80059dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e04c      	b.n	80022b4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3301      	adds	r3, #1
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	b298      	uxth	r0, r3
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3336      	adds	r3, #54	; 0x36
 8002258:	4602      	mov	r2, r0
 800225a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3303      	adds	r3, #3
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3338      	adds	r3, #56	; 0x38
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	333c      	adds	r3, #60	; 0x3c
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	3340      	adds	r3, #64	; 0x40
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	3301      	adds	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d3ad      	bcc.n	800221a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e044      	b.n	800234e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	3301      	adds	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3b5      	bcc.n	80022c4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	687e      	ldr	r6, [r7, #4]
 8002360:	466d      	mov	r5, sp
 8002362:	f106 0410 	add.w	r4, r6, #16
 8002366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	602b      	str	r3, [r5, #0]
 800236e:	1d33      	adds	r3, r6, #4
 8002370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002372:	6838      	ldr	r0, [r7, #0]
 8002374:	f003 fb3e 	bl	80059f4 <USB_DevInit>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2202      	movs	r2, #2
 8002382:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00d      	b.n	80023a6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 fff0 	bl	8008384 <USB_DevDisconnect>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_PCD_Start+0x16>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e016      	b.n	80023f2 <HAL_PCD_Start+0x44>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fad3 	bl	800597c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80023d6:	2101      	movs	r1, #1
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f008 fafc 	bl	800a9d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f005 ffc4 	bl	8008370 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b088      	sub	sp, #32
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f005 ffc6 	bl	8008398 <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002416:	d102      	bne.n	800241e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fb48 	bl	8002aae <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f005 ffb8 	bl	8008398 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002432:	d112      	bne.n	800245a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	b292      	uxth	r2, r2
 8002448:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f008 f8e6 	bl	800a61e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002452:	2100      	movs	r1, #0
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f923 	bl	80026a0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f005 ff9a 	bl	8008398 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246e:	d10b      	bne.n	8002488 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002478:	b29a      	uxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002482:	b292      	uxth	r2, r2
 8002484:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f005 ff83 	bl	8008398 <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249c:	d10b      	bne.n	80024b6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024b0:	b292      	uxth	r2, r2
 80024b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f005 ff6c 	bl	8008398 <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ca:	d126      	bne.n	800251a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0204 	bic.w	r2, r2, #4
 80024de:	b292      	uxth	r2, r2
 80024e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0208 	bic.w	r2, r2, #8
 80024f6:	b292      	uxth	r2, r2
 80024f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f008 f8c7 	bl	800a690 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800250a:	b29a      	uxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002514:	b292      	uxth	r2, r2
 8002516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f005 ff3a 	bl	8008398 <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800252e:	f040 8082 	bne.w	8002636 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	77fb      	strb	r3, [r7, #31]
 8002536:	e010      	b.n	800255a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	7ffb      	ldrb	r3, [r7, #31]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	441a      	add	r2, r3
 8002544:	7ffb      	ldrb	r3, [r7, #31]
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	b292      	uxth	r2, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	3320      	adds	r3, #32
 800254e:	443b      	add	r3, r7
 8002550:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002554:	7ffb      	ldrb	r3, [r7, #31]
 8002556:	3301      	adds	r3, #1
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	7ffb      	ldrb	r3, [r7, #31]
 800255c:	2b07      	cmp	r3, #7
 800255e:	d9eb      	bls.n	8002538 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	b292      	uxth	r2, r2
 8002574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	b292      	uxth	r2, r2
 800258c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002590:	bf00      	nop
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800259a:	b29b      	uxth	r3, r3
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f6      	beq.n	8002592 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b6:	b292      	uxth	r2, r2
 80025b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80025bc:	2300      	movs	r3, #0
 80025be:	77fb      	strb	r3, [r7, #31]
 80025c0:	e00f      	b.n	80025e2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	4611      	mov	r1, r2
 80025ca:	7ffa      	ldrb	r2, [r7, #31]
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	440a      	add	r2, r1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	3320      	adds	r3, #32
 80025d4:	443b      	add	r3, r7
 80025d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80025da:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
 80025de:	3301      	adds	r3, #1
 80025e0:	77fb      	strb	r3, [r7, #31]
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	2b07      	cmp	r3, #7
 80025e6:	d9ec      	bls.n	80025c2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0208 	orr.w	r2, r2, #8
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002612:	b292      	uxth	r2, r2
 8002614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0204 	orr.w	r2, r2, #4
 800262a:	b292      	uxth	r2, r2
 800262c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f008 f813 	bl	800a65c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f005 feac 	bl	8008398 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800264a:	d10e      	bne.n	800266a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800265e:	b292      	uxth	r2, r2
 8002660:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f007 ffcc 	bl	800a602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f005 fe92 	bl	8008398 <USB_ReadInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267e:	d10b      	bne.n	8002698 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002692:	b292      	uxth	r2, r2
 8002694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_PCD_SetAddress+0x1a>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e013      	b.n	80026e2 <HAL_PCD_SetAddress+0x42>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 fe39 	bl	800834a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	4608      	mov	r0, r1
 80026f4:	4611      	mov	r1, r2
 80026f6:	461a      	mov	r2, r3
 80026f8:	4603      	mov	r3, r0
 80026fa:	70fb      	strb	r3, [r7, #3]
 80026fc:	460b      	mov	r3, r1
 80026fe:	803b      	strh	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800270c:	2b00      	cmp	r3, #0
 800270e:	da0e      	bge.n	800272e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	705a      	strb	r2, [r3, #1]
 800272c:	e00e      	b.n	800274c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	f003 0207 	and.w	r2, r3, #7
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002758:	883a      	ldrh	r2, [r7, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	78ba      	ldrb	r2, [r7, #2]
 8002762:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002776:	78bb      	ldrb	r3, [r7, #2]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d102      	bne.n	8002782 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_PCD_EP_Open+0xa6>
 800278c:	2302      	movs	r3, #2
 800278e:	e00e      	b.n	80027ae <HAL_PCD_EP_Open+0xc4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 f948 	bl	8005a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80027ac:	7afb      	ldrb	r3, [r7, #11]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	da0e      	bge.n	80027e8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	705a      	strb	r2, [r3, #1]
 80027e6:	e00e      	b.n	8002806 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 0207 	and.w	r2, r3, #7
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_PCD_EP_Close+0x6a>
 800281c:	2302      	movs	r3, #2
 800281e:	e00e      	b.n	800283e <HAL_PCD_EP_Close+0x88>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fc6a 	bl	8006108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	460b      	mov	r3, r1
 8002854:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	f003 0207 	and.w	r2, r3, #7
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2200      	movs	r2, #0
 8002884:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002886:	7afb      	ldrb	r3, [r7, #11]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	b2da      	uxtb	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6979      	ldr	r1, [r7, #20]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fe1c 	bl	80064e0 <USB_EPStartXfer>
 80028a8:	e005      	b.n	80028b6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6979      	ldr	r1, [r7, #20]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fe15 	bl	80064e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	460b      	mov	r3, r1
 80028ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2201      	movs	r2, #1
 800290a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	b2da      	uxtb	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6979      	ldr	r1, [r7, #20]
 8002928:	4618      	mov	r0, r3
 800292a:	f003 fdd9 	bl	80064e0 <USB_EPStartXfer>
 800292e:	e005      	b.n	800293c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6979      	ldr	r1, [r7, #20]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fdd2 	bl	80064e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	f003 0207 	and.w	r2, r3, #7
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	d901      	bls.n	8002964 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e04c      	b.n	80029fe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da0e      	bge.n	800298a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	705a      	strb	r2, [r3, #1]
 8002988:	e00c      	b.n	80029a4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_PCD_EP_SetStall+0x7e>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e01c      	b.n	80029fe <HAL_PCD_EP_SetStall+0xb8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f005 fbbc 	bl	8008150 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f005 fce1 	bl	80083b6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 020f 	and.w	r2, r3, #15
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d901      	bls.n	8002a24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e040      	b.n	8002aa6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	da0e      	bge.n	8002a4a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	705a      	strb	r2, [r3, #1]
 8002a48:	e00e      	b.n	8002a68 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 0207 	and.w	r2, r3, #7
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_PCD_EP_ClrStall+0x82>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e00e      	b.n	8002aa6 <HAL_PCD_EP_ClrStall+0xa0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fbaa 	bl	80081f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b08e      	sub	sp, #56	; 0x38
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ab6:	e2ec      	b.n	8003092 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002ace:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 8161 	bne.w	8002d9a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d152      	bne.n	8002b88 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	81fb      	strh	r3, [r7, #14]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3328      	adds	r3, #40	; 0x28
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3302      	adds	r3, #2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	441a      	add	r2, r3
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b46:	2100      	movs	r1, #0
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f007 fd40 	bl	800a5ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 829b 	beq.w	8003092 <PCD_EP_ISR_Handler+0x5e4>
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 8296 	bne.w	8003092 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b292      	uxth	r2, r2
 8002b7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b86:	e284      	b.n	8003092 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d034      	beq.n	8002c0c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3306      	adds	r3, #6
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f005 fc38 	bl	8008456 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	823b      	strh	r3, [r7, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	8a3a      	ldrh	r2, [r7, #16]
 8002bfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c00:	b292      	uxth	r2, r2
 8002c02:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f007 fcb5 	bl	800a574 <HAL_PCD_SetupStageCallback>
 8002c0a:	e242      	b.n	8003092 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f280 823e 	bge.w	8003092 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c22:	4013      	ands	r3, r2
 8002c24:	83bb      	strh	r3, [r7, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	8bba      	ldrh	r2, [r7, #28]
 8002c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c30:	b292      	uxth	r2, r2
 8002c32:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	3306      	adds	r3, #6
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d019      	beq.n	8002c9c <PCD_EP_ISR_Handler+0x1ee>
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	6959      	ldr	r1, [r3, #20]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f005 fbe8 	bl	8008456 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	441a      	add	r2, r3
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c94:	2100      	movs	r1, #0
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f007 fc7e 	bl	800a598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 81f2 	bne.w	8003092 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d112      	bne.n	8002cfc <PCD_EP_ISR_Handler+0x24e>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	e02f      	b.n	8002d5c <PCD_EP_ISR_Handler+0x2ae>
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b3e      	cmp	r3, #62	; 0x3e
 8002d02:	d813      	bhi.n	8002d2c <PCD_EP_ISR_Handler+0x27e>
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <PCD_EP_ISR_Handler+0x270>
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	029b      	lsls	r3, r3, #10
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e017      	b.n	8002d5c <PCD_EP_ISR_Handler+0x2ae>
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <PCD_EP_ISR_Handler+0x298>
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	3b01      	subs	r3, #1
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	029b      	lsls	r3, r3, #10
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6c:	827b      	strh	r3, [r7, #18]
 8002d6e:	8a7b      	ldrh	r3, [r7, #18]
 8002d70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d74:	827b      	strh	r3, [r7, #18]
 8002d76:	8a7b      	ldrh	r3, [r7, #18]
 8002d78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d7c:	827b      	strh	r3, [r7, #18]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	8a7b      	ldrh	r3, [r7, #18]
 8002d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	8013      	strh	r3, [r2, #0]
 8002d98:	e17b      	b.n	8003092 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f280 80ea 	bge.w	8002f8a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dcc:	4013      	ands	r3, r2
 8002dce:	853b      	strh	r3, [r7, #40]	; 0x28
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002de4:	b292      	uxth	r2, r2
 8002de6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002de8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	7b1b      	ldrb	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d122      	bne.n	8002e4c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3306      	adds	r3, #6
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002e30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8087 	beq.w	8002f46 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	6959      	ldr	r1, [r3, #20]
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	88da      	ldrh	r2, [r3, #6]
 8002e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e46:	f005 fb06 	bl	8008456 <USB_ReadPMA>
 8002e4a:	e07c      	b.n	8002f46 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	78db      	ldrb	r3, [r3, #3]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d108      	bne.n	8002e66 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e56:	461a      	mov	r2, r3
 8002e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f927 	bl	80030ae <HAL_PCD_EP_DB_Receive>
 8002e60:	4603      	mov	r3, r0
 8002e62:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e64:	e06f      	b.n	8002f46 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e80:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	441a      	add	r2, r3
 8002e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d021      	beq.n	8002f04 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002eea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02a      	beq.n	8002f46 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	6959      	ldr	r1, [r3, #20]
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	891a      	ldrh	r2, [r3, #8]
 8002efc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002efe:	f005 faaa 	bl	8008456 <USB_ReadPMA>
 8002f02:	e020      	b.n	8002f46 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	3306      	adds	r3, #6
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	6959      	ldr	r1, [r3, #20]
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	895a      	ldrh	r2, [r3, #10]
 8002f40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f42:	f005 fa88 	bl	8008456 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f4c:	441a      	add	r2, r3
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f58:	441a      	add	r2, r3
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <PCD_EP_ISR_Handler+0x4c2>
 8002f66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d206      	bcs.n	8002f7e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f007 fb0e 	bl	800a598 <HAL_PCD_DataOutStageCallback>
 8002f7c:	e005      	b.n	8002f8a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 faab 	bl	80064e0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d07e      	beq.n	8003092 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	843b      	strh	r3, [r7, #32]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	8c3b      	ldrh	r3, [r7, #32]
 8002fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	78db      	ldrb	r3, [r3, #3]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d00c      	beq.n	8003002 <PCD_EP_ISR_Handler+0x554>
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	78db      	ldrb	r3, [r3, #3]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d146      	bne.n	8003086 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d141      	bne.n	8003086 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	3302      	adds	r3, #2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800302a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	8bfb      	ldrh	r3, [r7, #30]
 8003032:	429a      	cmp	r2, r3
 8003034:	d906      	bls.n	8003044 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	8bfb      	ldrh	r3, [r7, #30]
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	619a      	str	r2, [r3, #24]
 8003042:	e002      	b.n	800304a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f007 fab8 	bl	800a5ce <HAL_PCD_DataInStageCallback>
 800305e:	e018      	b.n	8003092 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	8bfb      	ldrh	r3, [r7, #30]
 8003066:	441a      	add	r2, r3
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	8bfb      	ldrh	r3, [r7, #30]
 8003072:	441a      	add	r2, r3
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fa2e 	bl	80064e0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003084:	e005      	b.n	8003092 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003088:	461a      	mov	r2, r3
 800308a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f91b 	bl	80032c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800309a:	b29b      	uxth	r3, r3
 800309c:	b21b      	sxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f6ff ad0a 	blt.w	8002ab8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3738      	adds	r7, #56	; 0x38
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b088      	sub	sp, #32
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d07e      	beq.n	80031c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	3302      	adds	r3, #2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	8b7b      	ldrh	r3, [r7, #26]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d306      	bcc.n	8003108 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	8b7b      	ldrh	r3, [r7, #26]
 8003100:	1ad2      	subs	r2, r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	619a      	str	r2, [r3, #24]
 8003106:	e002      	b.n	800310e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2200      	movs	r2, #0
 800310c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d123      	bne.n	800315e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003130:	833b      	strh	r3, [r7, #24]
 8003132:	8b3b      	ldrh	r3, [r7, #24]
 8003134:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003138:	833b      	strh	r3, [r7, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	8b3b      	ldrh	r3, [r7, #24]
 800314a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800314e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315a:	b29b      	uxth	r3, r3
 800315c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01f      	beq.n	80031a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	82fb      	strh	r3, [r7, #22]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	8afb      	ldrh	r3, [r7, #22]
 8003194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031a8:	8b7b      	ldrh	r3, [r7, #26]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8087 	beq.w	80032be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	6959      	ldr	r1, [r3, #20]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	891a      	ldrh	r2, [r3, #8]
 80031bc:	8b7b      	ldrh	r3, [r7, #26]
 80031be:	f005 f94a 	bl	8008456 <USB_ReadPMA>
 80031c2:	e07c      	b.n	80032be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	3306      	adds	r3, #6
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	8b7b      	ldrh	r3, [r7, #26]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d306      	bcc.n	8003206 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	8b7b      	ldrh	r3, [r7, #26]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	e002      	b.n	800320c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d123      	bne.n	800325c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	83fb      	strh	r3, [r7, #30]
 8003230:	8bfb      	ldrh	r3, [r7, #30]
 8003232:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003236:	83fb      	strh	r3, [r7, #30]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	8bfb      	ldrh	r3, [r7, #30]
 8003248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003258:	b29b      	uxth	r3, r3
 800325a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11f      	bne.n	80032a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003280:	83bb      	strh	r3, [r7, #28]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	441a      	add	r2, r3
 8003290:	8bbb      	ldrh	r3, [r7, #28]
 8003292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032a6:	8b7b      	ldrh	r3, [r7, #26]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6959      	ldr	r1, [r3, #20]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	895a      	ldrh	r2, [r3, #10]
 80032b8:	8b7b      	ldrh	r3, [r7, #26]
 80032ba:	f005 f8cc 	bl	8008456 <USB_ReadPMA>
    }
  }

  return count;
 80032be:	8b7b      	ldrh	r3, [r7, #26]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b0a2      	sub	sp, #136	; 0x88
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 81c7 	beq.w	8003670 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	3302      	adds	r3, #2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003316:	429a      	cmp	r2, r3
 8003318:	d907      	bls.n	800332a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003322:	1ad2      	subs	r2, r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	619a      	str	r2, [r3, #24]
 8003328:	e002      	b.n	8003330 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 80b9 	bne.w	80034ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d126      	bne.n	8003390 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	4413      	add	r3, r2
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	011a      	lsls	r2, r3, #4
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	4413      	add	r3, r2
 8003364:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003374:	b29a      	uxth	r2, r3
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	801a      	strh	r2, [r3, #0]
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003388:	b29a      	uxth	r2, r3
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e01a      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d116      	bne.n	80033c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	4413      	add	r3, r2
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	011a      	lsls	r2, r3, #4
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	4413      	add	r3, r2
 80033ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	2200      	movs	r2, #0
 80033c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d126      	bne.n	8003422 <HAL_PCD_EP_DB_Transmit+0x15a>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4413      	add	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	011a      	lsls	r2, r3, #4
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4413      	add	r3, r2
 80033f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003406:	b29a      	uxth	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800341a:	b29a      	uxth	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	e017      	b.n	8003452 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d113      	bne.n	8003452 <HAL_PCD_EP_DB_Transmit+0x18a>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	4413      	add	r3, r2
 800343a:	623b      	str	r3, [r7, #32]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	011a      	lsls	r2, r3, #4
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	4413      	add	r3, r2
 8003446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2200      	movs	r2, #0
 8003450:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	4619      	mov	r1, r3
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f007 f8b8 	bl	800a5ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 82d4 	beq.w	8003a12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	827b      	strh	r3, [r7, #18]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	8a7b      	ldrh	r3, [r7, #18]
 8003496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800349a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	8013      	strh	r3, [r2, #0]
 80034aa:	e2b2      	b.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d021      	beq.n	80034fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003500:	2b01      	cmp	r3, #1
 8003502:	f040 8286 	bne.w	8003a12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800350e:	441a      	add	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800351c:	441a      	add	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6a1a      	ldr	r2, [r3, #32]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	429a      	cmp	r2, r3
 800352c:	d309      	bcc.n	8003542 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353a:	1ad2      	subs	r2, r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	621a      	str	r2, [r3, #32]
 8003540:	e015      	b.n	800356e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800354a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003558:	e009      	b.n	800356e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2200      	movs	r2, #0
 800356c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d155      	bne.n	8003622 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	4413      	add	r3, r2
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	011a      	lsls	r2, r3, #4
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	4413      	add	r3, r2
 8003598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
 800359e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d112      	bne.n	80035ca <HAL_PCD_EP_DB_Transmit+0x302>
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	e047      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x392>
 80035ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035cc:	2b3e      	cmp	r3, #62	; 0x3e
 80035ce:	d811      	bhi.n	80035f4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80035d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80035e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e2:	3301      	adds	r3, #1
 80035e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	029b      	lsls	r3, r3, #10
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e032      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x392>
 80035f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80035fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <HAL_PCD_EP_DB_Transmit+0x342>
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	3b01      	subs	r3, #1
 8003608:	64bb      	str	r3, [r7, #72]	; 0x48
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360c:	b29b      	uxth	r3, r3
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	b29b      	uxth	r3, r3
 8003612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361a:	b29a      	uxth	r2, r3
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	e01b      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x392>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d117      	bne.n	800365a <HAL_PCD_EP_DB_Transmit+0x392>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	643b      	str	r3, [r7, #64]	; 0x40
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363e:	4413      	add	r3, r2
 8003640:	643b      	str	r3, [r7, #64]	; 0x40
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	011a      	lsls	r2, r3, #4
 8003648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364a:	4413      	add	r3, r2
 800364c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003654:	b29a      	uxth	r2, r3
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6959      	ldr	r1, [r3, #20]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	891a      	ldrh	r2, [r3, #8]
 8003666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003668:	b29b      	uxth	r3, r3
 800366a:	f004 feaf 	bl	80083cc <USB_WritePMA>
 800366e:	e1d0      	b.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003678:	b29b      	uxth	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	3306      	adds	r3, #6
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d307      	bcc.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	619a      	str	r2, [r3, #24]
 80036b6:	e002      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 80c4 	bne.w	8003850 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d126      	bne.n	800371e <HAL_PCD_EP_DB_Transmit+0x456>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036de:	b29b      	uxth	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	4413      	add	r3, r2
 80036e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	011a      	lsls	r2, r3, #4
 80036ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f0:	4413      	add	r3, r2
 80036f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003702:	b29a      	uxth	r2, r3
 8003704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003716:	b29a      	uxth	r2, r3
 8003718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	e01a      	b.n	8003754 <HAL_PCD_EP_DB_Transmit+0x48c>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d116      	bne.n	8003754 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003734:	b29b      	uxth	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373a:	4413      	add	r3, r2
 800373c:	677b      	str	r3, [r7, #116]	; 0x74
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	011a      	lsls	r2, r3, #4
 8003744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003746:	4413      	add	r3, r2
 8003748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800374c:	673b      	str	r3, [r7, #112]	; 0x70
 800374e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003750:	2200      	movs	r2, #0
 8003752:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	67bb      	str	r3, [r7, #120]	; 0x78
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d12f      	bne.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800377a:	4413      	add	r3, r2
 800377c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	011a      	lsls	r2, r3, #4
 8003786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800378a:	4413      	add	r3, r2
 800378c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	e017      	b.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d113      	bne.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d8:	4413      	add	r3, r2
 80037da:	67bb      	str	r3, [r7, #120]	; 0x78
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	011a      	lsls	r2, r3, #4
 80037e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e4:	4413      	add	r3, r2
 80037e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037ee:	2200      	movs	r2, #0
 80037f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f006 fee8 	bl	800a5ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 8104 	bne.w	8003a12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003824:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	441a      	add	r2, r3
 8003836:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800383a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800383e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384a:	b29b      	uxth	r3, r3
 800384c:	8013      	strh	r3, [r2, #0]
 800384e:	e0e0      	b.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d121      	bne.n	800389e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800388a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800388e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389a:	b29b      	uxth	r3, r3
 800389c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f040 80b4 	bne.w	8003a12 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038b2:	441a      	add	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038c0:	441a      	add	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d309      	bcc.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	621a      	str	r2, [r3, #32]
 80038e4:	e015      	b.n	8003912 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80038ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038fc:	e009      	b.n	8003912 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	667b      	str	r3, [r7, #100]	; 0x64
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	785b      	ldrb	r3, [r3, #1]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d155      	bne.n	80039cc <HAL_PCD_EP_DB_Transmit+0x704>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003934:	4413      	add	r3, r2
 8003936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	011a      	lsls	r2, r3, #4
 800393e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003940:	4413      	add	r3, r2
 8003942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003946:	65bb      	str	r3, [r7, #88]	; 0x58
 8003948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394a:	2b00      	cmp	r3, #0
 800394c:	d112      	bne.n	8003974 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800394e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003958:	b29a      	uxth	r2, r3
 800395a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800396c:	b29a      	uxth	r2, r3
 800396e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	e044      	b.n	80039fe <HAL_PCD_EP_DB_Transmit+0x736>
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	2b3e      	cmp	r3, #62	; 0x3e
 8003978:	d811      	bhi.n	800399e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800397a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
 8003980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800398a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398c:	3301      	adds	r3, #1
 800398e:	657b      	str	r3, [r7, #84]	; 0x54
 8003990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003992:	b29b      	uxth	r3, r3
 8003994:	029b      	lsls	r3, r3, #10
 8003996:	b29a      	uxth	r2, r3
 8003998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	e02f      	b.n	80039fe <HAL_PCD_EP_DB_Transmit+0x736>
 800399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
 80039a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80039ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b0:	3b01      	subs	r3, #1
 80039b2:	657b      	str	r3, [r7, #84]	; 0x54
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	029b      	lsls	r3, r3, #10
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	e018      	b.n	80039fe <HAL_PCD_EP_DB_Transmit+0x736>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d114      	bne.n	80039fe <HAL_PCD_EP_DB_Transmit+0x736>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039e2:	4413      	add	r3, r2
 80039e4:	667b      	str	r3, [r7, #100]	; 0x64
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	011a      	lsls	r2, r3, #4
 80039ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ee:	4413      	add	r3, r2
 80039f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039f4:	663b      	str	r3, [r7, #96]	; 0x60
 80039f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6959      	ldr	r1, [r3, #20]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	895a      	ldrh	r2, [r3, #10]
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f004 fcdd 	bl	80083cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a2c:	823b      	strh	r3, [r7, #16]
 8003a2e:	8a3b      	ldrh	r3, [r7, #16]
 8003a30:	f083 0310 	eor.w	r3, r3, #16
 8003a34:	823b      	strh	r3, [r7, #16]
 8003a36:	8a3b      	ldrh	r3, [r7, #16]
 8003a38:	f083 0320 	eor.w	r3, r3, #32
 8003a3c:	823b      	strh	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	8a3b      	ldrh	r3, [r7, #16]
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3788      	adds	r7, #136	; 0x88
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	817b      	strh	r3, [r7, #10]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	897b      	ldrh	r3, [r7, #10]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e009      	b.n	8003ab6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003aa2:	897a      	ldrh	r2, [r7, #10]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ab6:	893b      	ldrh	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	80da      	strh	r2, [r3, #6]
 8003aca:	e00b      	b.n	8003ae4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003af6:	f7fd fc37 	bl	8001368 <HAL_GetTick>
 8003afa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003afc:	4b45      	ldr	r3, [pc, #276]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a44      	ldr	r2, [pc, #272]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fd fc2d 	bl	8001368 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e077      	b.n	8003c0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8003b28:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b30:	4a38      	ldr	r2, [pc, #224]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b38:	f7fd fc16 	bl	8001368 <HAL_GetTick>
 8003b3c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b3e:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b46:	f7fd fc0f 	bl	8001368 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e057      	b.n	8003c0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ee      	bne.n	8003b46 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_DeInit+0x128>)
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <HAL_RCC_DeInit+0x12c>)
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <HAL_RCC_DeInit+0x130>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd fbb6 	bl	80012e4 <HAL_InitTick>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e044      	b.n	8003c0c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b82:	f7fd fbf1 	bl	8001368 <HAL_GetTick>
 8003b86:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a21      	ldr	r2, [pc, #132]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b92:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fd fbe7 	bl	8001368 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e031      	b.n	8003c0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bba:	f7fd fbd5 	bl	8001368 <HAL_GetTick>
 8003bbe:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003bc6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003bca:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bce:	f7fd fbcb 	bl	8001368 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	; 0x64
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e015      	b.n	8003c0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c02:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_DeInit+0x124>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	007a1200 	.word	0x007a1200
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e272      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8087 	beq.w	8003d52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c44:	4b92      	ldr	r3, [pc, #584]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d00c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c50:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d112      	bne.n	8003c82 <HAL_RCC_OscConfig+0x5e>
 8003c5c:	4b8c      	ldr	r3, [pc, #560]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c68:	d10b      	bne.n	8003c82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6a:	4b89      	ldr	r3, [pc, #548]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d06c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x12c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d168      	bne.n	8003d50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e24c      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCC_OscConfig+0x76>
 8003c8c:	4b80      	ldr	r3, [pc, #512]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a7f      	ldr	r2, [pc, #508]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	e02e      	b.n	8003cf8 <HAL_RCC_OscConfig+0xd4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x98>
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7a      	ldr	r2, [pc, #488]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b78      	ldr	r3, [pc, #480]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a77      	ldr	r2, [pc, #476]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e01d      	b.n	8003cf8 <HAL_RCC_OscConfig+0xd4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xbc>
 8003cc6:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a71      	ldr	r2, [pc, #452]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b6f      	ldr	r3, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0xd4>
 8003ce0:	4b6b      	ldr	r3, [pc, #428]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a6a      	ldr	r2, [pc, #424]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b68      	ldr	r3, [pc, #416]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a67      	ldr	r2, [pc, #412]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fd fb32 	bl	8001368 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fd fb2e 	bl	8001368 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e200      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0xe4>
 8003d26:	e014      	b.n	8003d52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd fb1e 	bl	8001368 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd fb1a 	bl	8001368 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1ec      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x10c>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d063      	beq.n	8003e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d5e:	4b4c      	ldr	r3, [pc, #304]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d6a:	4b49      	ldr	r3, [pc, #292]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d11c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x18c>
 8003d76:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d116      	bne.n	8003db0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_RCC_OscConfig+0x176>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e1c0      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9a:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4939      	ldr	r1, [pc, #228]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	e03a      	b.n	8003e26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db8:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fad3 	bl	8001368 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fd facf 	bl	8001368 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1a1      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4927      	ldr	r1, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
 8003df8:	e015      	b.n	8003e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd fab2 	bl	8001368 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fd faae 	bl	8001368 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e180      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d03a      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d019      	beq.n	8003e6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e40:	f7fd fa92 	bl	8001368 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e48:	f7fd fa8e 	bl	8001368 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e160      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e66:	2001      	movs	r0, #1
 8003e68:	f000 fad8 	bl	800441c <RCC_Delay>
 8003e6c:	e01c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fd fa78 	bl	8001368 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7a:	e00f      	b.n	8003e9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fd fa74 	bl	8001368 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d908      	bls.n	8003e9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e146      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	42420000 	.word	0x42420000
 8003e98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b92      	ldr	r3, [pc, #584]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e9      	bne.n	8003e7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a6 	beq.w	8004002 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eba:	4b8b      	ldr	r3, [pc, #556]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10d      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	4b88      	ldr	r3, [pc, #544]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4a87      	ldr	r2, [pc, #540]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	61d3      	str	r3, [r2, #28]
 8003ed2:	4b85      	ldr	r3, [pc, #532]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b82      	ldr	r3, [pc, #520]	; (80040ec <HAL_RCC_OscConfig+0x4c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d118      	bne.n	8003f20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eee:	4b7f      	ldr	r3, [pc, #508]	; (80040ec <HAL_RCC_OscConfig+0x4c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7e      	ldr	r2, [pc, #504]	; (80040ec <HAL_RCC_OscConfig+0x4c8>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efa:	f7fd fa35 	bl	8001368 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f02:	f7fd fa31 	bl	8001368 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b64      	cmp	r3, #100	; 0x64
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e103      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	4b75      	ldr	r3, [pc, #468]	; (80040ec <HAL_RCC_OscConfig+0x4c8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x312>
 8003f28:	4b6f      	ldr	r3, [pc, #444]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4a6e      	ldr	r2, [pc, #440]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6213      	str	r3, [r2, #32]
 8003f34:	e02d      	b.n	8003f92 <HAL_RCC_OscConfig+0x36e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x334>
 8003f3e:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	4a69      	ldr	r2, [pc, #420]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	6213      	str	r3, [r2, #32]
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4a66      	ldr	r2, [pc, #408]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	f023 0304 	bic.w	r3, r3, #4
 8003f54:	6213      	str	r3, [r2, #32]
 8003f56:	e01c      	b.n	8003f92 <HAL_RCC_OscConfig+0x36e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCC_OscConfig+0x356>
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4a60      	ldr	r2, [pc, #384]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	f043 0304 	orr.w	r3, r3, #4
 8003f6a:	6213      	str	r3, [r2, #32]
 8003f6c:	4b5e      	ldr	r3, [pc, #376]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a5d      	ldr	r2, [pc, #372]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	e00b      	b.n	8003f92 <HAL_RCC_OscConfig+0x36e>
 8003f7a:	4b5b      	ldr	r3, [pc, #364]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4a5a      	ldr	r2, [pc, #360]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6213      	str	r3, [r2, #32]
 8003f86:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a57      	ldr	r2, [pc, #348]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d015      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fd f9e5 	bl	8001368 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fd f9e1 	bl	8001368 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e0b1      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb8:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ee      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x37e>
 8003fc4:	e014      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd f9cf 	bl	8001368 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fce:	f7fd f9cb 	bl	8001368 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e09b      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1ee      	bne.n	8003fce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004000:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8087 	beq.w	800411a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400c:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b08      	cmp	r3, #8
 8004016:	d061      	beq.n	80040dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d146      	bne.n	80040ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fd f99f 	bl	8001368 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd f99b 	bl	8001368 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e06d      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004040:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d108      	bne.n	8004068 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4921      	ldr	r1, [pc, #132]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004068:	4b1f      	ldr	r3, [pc, #124]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a19      	ldr	r1, [r3, #32]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	430b      	orrs	r3, r1
 800407a:	491b      	ldr	r1, [pc, #108]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fd f96f 	bl	8001368 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408e:	f7fd f96b 	bl	8001368 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e03d      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x46a>
 80040ac:	e035      	b.n	800411a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_RCC_OscConfig+0x4cc>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd f958 	bl	8001368 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd f954 	bl	8001368 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e026      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_OscConfig+0x4c4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x498>
 80040da:	e01e      	b.n	800411a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e019      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40007000 	.word	0x40007000
 80040f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_OscConfig+0x500>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	429a      	cmp	r2, r3
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0d0      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d910      	bls.n	800416c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b67      	ldr	r3, [pc, #412]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 0207 	bic.w	r2, r3, #7
 8004152:	4965      	ldr	r1, [pc, #404]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800418e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d040      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d115      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b41      	ldr	r3, [pc, #260]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e073      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06b      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4936      	ldr	r1, [pc, #216]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fd f8a6 	bl	8001368 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fd f8a2 	bl	8001368 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e053      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2d      	ldr	r3, [pc, #180]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d210      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	4922      	ldr	r1, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1cc>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1d0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd f804 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40022000 	.word	0x40022000
 80042ec:	40021000 	.word	0x40021000
 80042f0:	0800e0f0 	.word	0x0800e0f0
 80042f4:	20000000 	.word	0x20000000
 80042f8:	20000004 	.word	0x20000004

080042fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	b490      	push	{r4, r7}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004304:	1d3c      	adds	r4, r7, #4
 8004306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800430c:	f240 2301 	movw	r3, #513	; 0x201
 8004310:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b04      	cmp	r3, #4
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004336:	2b08      	cmp	r3, #8
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x46>
 800433a:	e02b      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800433c:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800433e:	623b      	str	r3, [r7, #32]
      break;
 8004340:	e02b      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	0c9b      	lsrs	r3, r3, #18
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3328      	adds	r3, #40	; 0x28
 800434c:	443b      	add	r3, r7
 800434e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004352:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d012      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	0c5b      	lsrs	r3, r3, #17
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	3328      	adds	r3, #40	; 0x28
 800436a:	443b      	add	r3, r7
 800436c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004370:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004376:	fb03 f202 	mul.w	r2, r3, r2
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	e004      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4a0b      	ldr	r2, [pc, #44]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004388:	fb02 f303 	mul.w	r3, r2, r3
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	623b      	str	r3, [r7, #32]
      break;
 8004392:	e002      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004396:	623b      	str	r3, [r7, #32]
      break;
 8004398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439a:	6a3b      	ldr	r3, [r7, #32]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3728      	adds	r7, #40	; 0x28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc90      	pop	{r4, r7}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	0800e088 	.word	0x0800e088
 80043ac:	40021000 	.word	0x40021000
 80043b0:	007a1200 	.word	0x007a1200
 80043b4:	003d0900 	.word	0x003d0900

080043b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	20000000 	.word	0x20000000

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d0:	f7ff fff2 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	0800e100 	.word	0x0800e100

080043f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043f8:	f7ff ffde 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	0adb      	lsrs	r3, r3, #11
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	0800e100 	.word	0x0800e100

0800441c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <RCC_Delay+0x34>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <RCC_Delay+0x38>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	0a5b      	lsrs	r3, r3, #9
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	fb02 f303 	mul.w	r3, r2, r3
 8004436:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004438:	bf00      	nop
  }
  while (Delay --);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1e5a      	subs	r2, r3, #1
 800443e:	60fa      	str	r2, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f9      	bne.n	8004438 <RCC_Delay+0x1c>
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	20000000 	.word	0x20000000
 8004454:	10624dd3 	.word	0x10624dd3

08004458 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d07d      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004474:	2300      	movs	r3, #0
 8004476:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004478:	4b4f      	ldr	r3, [pc, #316]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10d      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	61d3      	str	r3, [r2, #28]
 8004490:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	4b46      	ldr	r3, [pc, #280]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d118      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ac:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a42      	ldr	r2, [pc, #264]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b8:	f7fc ff56 	bl	8001368 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044be:	e008      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fc ff52 	bl	8001368 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e06d      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b3a      	ldr	r3, [pc, #232]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044de:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d02e      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d027      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004506:	4b2e      	ldr	r3, [pc, #184]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800450c:	4b2c      	ldr	r3, [pc, #176]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004512:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d014      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fc ff21 	bl	8001368 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	e00a      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fc ff1d 	bl	8001368 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e036      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ee      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4917      	ldr	r1, [pc, #92]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	4313      	orrs	r3, r2
 800455c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004564:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	490b      	ldr	r1, [pc, #44]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4904      	ldr	r1, [pc, #16]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40007000 	.word	0x40007000
 80045c0:	42420440 	.word	0x42420440

080045c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e076      	b.n	80046c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e6:	d009      	beq.n	80045fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
 80045ee:	e005      	b.n	80045fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fc fb98 	bl	8000d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004632:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004680:	ea42 0103 	orr.w	r1, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	0c1a      	lsrs	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f002 0204 	and.w	r2, r2, #4
 80046a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_SPI_Transmit_DMA+0x20>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e09b      	b.n	8004824 <HAL_SPI_Transmit_DMA+0x158>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d002      	beq.n	8004706 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004700:	2302      	movs	r3, #2
 8004702:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004704:	e089      	b.n	800481a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Transmit_DMA+0x46>
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004716:	e080      	b.n	800481a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2203      	movs	r2, #3
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	88fa      	ldrh	r2, [r7, #6]
 8004736:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475e:	d10f      	bne.n	8004780 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	4a29      	ldr	r2, [pc, #164]	; (800482c <HAL_SPI_Transmit_DMA+0x160>)
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478c:	4a28      	ldr	r2, [pc, #160]	; (8004830 <HAL_SPI_Transmit_DMA+0x164>)
 800478e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <HAL_SPI_Transmit_DMA+0x168>)
 8004796:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	2200      	movs	r2, #0
 800479e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4619      	mov	r1, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047b8:	f7fc ff48 	bl	800164c <HAL_DMA_Start_IT>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f043 0210 	orr.w	r2, r3, #16
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80047da:	e01e      	b.n	800481a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d007      	beq.n	80047fa <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0220 	orr.w	r2, r2, #32
 8004808:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0202 	orr.w	r2, r2, #2
 8004818:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	08004acf 	.word	0x08004acf
 8004830:	08004a29 	.word	0x08004a29
 8004834:	08004aeb 	.word	0x08004aeb

08004838 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10f      	bne.n	800487c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	099b      	lsrs	r3, r3, #6
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
    return;
 800487a:	e0be      	b.n	80049fa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_SPI_IRQHandler+0x66>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	09db      	lsrs	r3, r3, #7
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
    return;
 800489c:	e0ad      	b.n	80049fa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_SPI_IRQHandler+0x80>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	099b      	lsrs	r3, r3, #6
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80a1 	beq.w	80049fa <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 809a 	beq.w	80049fa <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	099b      	lsrs	r3, r3, #6
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d023      	beq.n	800491a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d011      	beq.n	8004902 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	e00b      	b.n	800491a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]
        return;
 8004918:	e06f      	b.n	80049fa <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d014      	beq.n	8004950 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f043 0201 	orr.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	2b00      	cmp	r3, #0
 8004956:	d04f      	beq.n	80049f8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004966:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <HAL_SPI_IRQHandler+0x14c>
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d034      	beq.n	80049ee <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0203 	bic.w	r2, r2, #3
 8004992:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d011      	beq.n	80049c0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a0:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <HAL_SPI_IRQHandler+0x1c8>)
 80049a2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc feaf 	bl	800170c <HAL_DMA_Abort_IT>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d016      	beq.n	80049f6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049cc:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <HAL_SPI_IRQHandler+0x1c8>)
 80049ce:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc fe99 	bl	800170c <HAL_DMA_Abort_IT>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80049ec:	e003      	b.n	80049f6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f811 	bl	8004a16 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80049f4:	e000      	b.n	80049f8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80049f6:	bf00      	nop
    return;
 80049f8:	bf00      	nop
  }
}
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08004b2b 	.word	0x08004b2b

08004a04 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a36:	f7fc fc97 	bl	8001368 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d03b      	beq.n	8004ac2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0220 	bic.w	r2, r2, #32
 8004a58:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0202 	bic.w	r2, r2, #2
 8004a68:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	2164      	movs	r1, #100	; 0x64
 8004a6e:	6978      	ldr	r0, [r7, #20]
 8004a70:	f000 f8f8 	bl	8004c64 <SPI_EndRxTxTransaction>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	f7ff ffab 	bl	8004a16 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ac0:	e002      	b.n	8004ac8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f006 fcd0 	bl	800b468 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7ff ff91 	bl	8004a04 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0203 	bic.w	r2, r2, #3
 8004b06:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	f043 0210 	orr.w	r2, r3, #16
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ff7a 	bl	8004a16 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff ff66 	bl	8004a16 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b64:	f7fc fc00 	bl	8001368 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b74:	f7fc fbf8 	bl	8001368 <HAL_GetTick>
 8004b78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7a:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	015b      	lsls	r3, r3, #5
 8004b80:	0d1b      	lsrs	r3, r3, #20
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	fb02 f303 	mul.w	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8a:	e054      	b.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b92:	d050      	beq.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b94:	f7fc fbe8 	bl	8001368 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d902      	bls.n	8004baa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d13d      	bne.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc2:	d111      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bcc:	d004      	beq.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd6:	d107      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf0:	d10f      	bne.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e017      	b.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d19b      	bne.n	8004b8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000000 	.word	0x20000000

08004c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2200      	movs	r2, #0
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff ff6a 	bl	8004b54 <SPI_WaitFlagStateUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e000      	b.n	8004c98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e041      	b.n	8004d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc fa5a 	bl	8001180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f000 fa7a 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d001      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e03a      	b.n	8004dce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <HAL_TIM_Base_Start_IT+0x98>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00e      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x58>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d009      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x58>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <HAL_TIM_Base_Start_IT+0x9c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x58>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d111      	bne.n	8004dbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d010      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	e007      	b.n	8004dcc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800

08004de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d122      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d11b      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0202 	mvn.w	r2, #2
 8004e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f9ba 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9ad 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9bc 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0204 	mvn.w	r2, #4
 8004e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f990 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f983 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f992 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d122      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d11b      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0208 	mvn.w	r2, #8
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f966 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f959 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f968 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d122      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0210 	mvn.w	r2, #16
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2208      	movs	r2, #8
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f93c 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f92f 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f93e 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0201 	mvn.w	r2, #1
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f90a 	bl	800517c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	2b80      	cmp	r3, #128	; 0x80
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa81 	bl	8005496 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f902 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0220 	mvn.w	r2, #32
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa4c 	bl	8005484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIM_ConfigClockSource+0x18>
 8005008:	2302      	movs	r3, #2
 800500a:	e0b3      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x180>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800502a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005032:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005044:	d03e      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0xd0>
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504a:	f200 8087 	bhi.w	800515c <HAL_TIM_ConfigClockSource+0x168>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	f000 8085 	beq.w	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d87f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x168>
 800505c:	2b70      	cmp	r3, #112	; 0x70
 800505e:	d01a      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xa2>
 8005060:	2b70      	cmp	r3, #112	; 0x70
 8005062:	d87b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x168>
 8005064:	2b60      	cmp	r3, #96	; 0x60
 8005066:	d050      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x116>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d877      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x168>
 800506c:	2b50      	cmp	r3, #80	; 0x50
 800506e:	d03c      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xf6>
 8005070:	2b50      	cmp	r3, #80	; 0x50
 8005072:	d873      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x168>
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d058      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x136>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d86f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x168>
 800507c:	2b30      	cmp	r3, #48	; 0x30
 800507e:	d064      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x156>
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d86b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x168>
 8005084:	2b20      	cmp	r3, #32
 8005086:	d060      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x156>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d867      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x168>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x156>
 8005090:	2b10      	cmp	r3, #16
 8005092:	d05a      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005094:	e062      	b.n	800515c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f000 f970 	bl	800538a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	609a      	str	r2, [r3, #8]
      break;
 80050c2:	e04e      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f000 f959 	bl	800538a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e6:	609a      	str	r2, [r3, #8]
      break;
 80050e8:	e03b      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 f8d0 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2150      	movs	r1, #80	; 0x50
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f927 	bl	8005356 <TIM_ITRx_SetConfig>
      break;
 8005108:	e02b      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	461a      	mov	r2, r3
 8005118:	f000 f8ee 	bl	80052f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2160      	movs	r1, #96	; 0x60
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f917 	bl	8005356 <TIM_ITRx_SetConfig>
      break;
 8005128:	e01b      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	461a      	mov	r2, r3
 8005138:	f000 f8b0 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2140      	movs	r1, #64	; 0x40
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f907 	bl	8005356 <TIM_ITRx_SetConfig>
      break;
 8005148:	e00b      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 f8fe 	bl	8005356 <TIM_ITRx_SetConfig>
        break;
 800515a:	e002      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800515c:	bf00      	nop
 800515e:	e000      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005160:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
	...

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a29      	ldr	r2, [pc, #164]	; (8005290 <TIM_Base_SetConfig+0xb8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a26      	ldr	r2, [pc, #152]	; (8005294 <TIM_Base_SetConfig+0xbc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a25      	ldr	r2, [pc, #148]	; (8005298 <TIM_Base_SetConfig+0xc0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <TIM_Base_SetConfig+0xb8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d007      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a19      	ldr	r2, [pc, #100]	; (8005294 <TIM_Base_SetConfig+0xbc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a18      	ldr	r2, [pc, #96]	; (8005298 <TIM_Base_SetConfig+0xc0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a07      	ldr	r2, [pc, #28]	; (8005290 <TIM_Base_SetConfig+0xb8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d103      	bne.n	8005280 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	615a      	str	r2, [r3, #20]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800

0800529c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0201 	bic.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 030a 	bic.w	r3, r3, #10
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f023 0210 	bic.w	r2, r3, #16
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005322:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	031b      	lsls	r3, r3, #12
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005334:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	f043 0307 	orr.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	609a      	str	r2, [r3, #8]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800538a:	b480      	push	{r7}
 800538c:	b087      	sub	sp, #28
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	021a      	lsls	r2, r3, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	609a      	str	r2, [r3, #8]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053dc:	2302      	movs	r3, #2
 80053de:	e046      	b.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a16      	ldr	r2, [pc, #88]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d009      	beq.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a12      	ldr	r2, [pc, #72]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a10      	ldr	r2, [pc, #64]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d10c      	bne.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4313      	orrs	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800

08005484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr

08005496 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr

080054a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e03f      	b.n	800553a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb fea6 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2224      	movs	r2, #36	; 0x24
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9a7 	bl	8005840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b08a      	sub	sp, #40	; 0x28
 8005546:	af02      	add	r7, sp, #8
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b20      	cmp	r3, #32
 8005560:	d17c      	bne.n	800565c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_Transmit+0x2c>
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e075      	b.n	800565e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_UART_Transmit+0x3e>
 800557c:	2302      	movs	r3, #2
 800557e:	e06e      	b.n	800565e <HAL_UART_Transmit+0x11c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2221      	movs	r2, #33	; 0x21
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005596:	f7fb fee7 	bl	8001368 <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b0:	d108      	bne.n	80055c4 <HAL_UART_Transmit+0x82>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e003      	b.n	80055cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055d4:	e02a      	b.n	800562c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f8e2 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e036      	b.n	800565e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3302      	adds	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e007      	b.n	800561e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1cf      	bne.n	80055d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	2140      	movs	r1, #64	; 0x40
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f8b2 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e006      	b.n	800565e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	e000      	b.n	800565e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800565c:	2302      	movs	r3, #2
  }
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08a      	sub	sp, #40	; 0x28
 800566a:	af02      	add	r7, sp, #8
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b20      	cmp	r3, #32
 8005684:	f040 808c 	bne.w	80057a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Receive+0x2e>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e084      	b.n	80057a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Receive+0x40>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e07d      	b.n	80057a2 <HAL_UART_Receive+0x13c>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2222      	movs	r2, #34	; 0x22
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056c2:	f7fb fe51 	bl	8001368 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	d108      	bne.n	80056f0 <HAL_UART_Receive+0x8a>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e003      	b.n	80056f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005700:	e043      	b.n	800578a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	2120      	movs	r1, #32
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f84c 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e042      	b.n	80057a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10c      	bne.n	800573c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572e:	b29a      	uxth	r2, r3
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	3302      	adds	r3, #2
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	e01f      	b.n	800577c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005744:	d007      	beq.n	8005756 <HAL_UART_Receive+0xf0>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <HAL_UART_Receive+0xfe>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e008      	b.n	8005776 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005770:	b2da      	uxtb	r2, r3
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3301      	adds	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1b6      	bne.n	8005702 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ba:	e02c      	b.n	8005816 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c2:	d028      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0x30>
 80057ca:	f7fb fdcd 	bl	8001368 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d21d      	bcs.n	8005816 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e00f      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	429a      	cmp	r2, r3
 8005832:	d0c3      	beq.n	80057bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800587a:	f023 030c 	bic.w	r3, r3, #12
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	430b      	orrs	r3, r1
 8005886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2c      	ldr	r2, [pc, #176]	; (8005954 <UART_SetConfig+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fe fda4 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	e002      	b.n	80058b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058b0:	f7fe fd8c 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 80058b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009a      	lsls	r2, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	4a22      	ldr	r2, [pc, #136]	; (8005958 <UART_SetConfig+0x118>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	0119      	lsls	r1, r3, #4
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009a      	lsls	r2, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <UART_SetConfig+0x118>)
 80058ee:	fba3 0302 	umull	r0, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	2064      	movs	r0, #100	; 0x64
 80058f6:	fb00 f303 	mul.w	r3, r0, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	3332      	adds	r3, #50	; 0x32
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <UART_SetConfig+0x118>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800590c:	4419      	add	r1, r3
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009a      	lsls	r2, r3, #2
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	fbb2 f2f3 	udiv	r2, r2, r3
 8005924:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <UART_SetConfig+0x118>)
 8005926:	fba3 0302 	umull	r0, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2064      	movs	r0, #100	; 0x64
 800592e:	fb00 f303 	mul.w	r3, r0, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	3332      	adds	r3, #50	; 0x32
 8005938:	4a07      	ldr	r2, [pc, #28]	; (8005958 <UART_SetConfig+0x118>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f003 020f 	and.w	r2, r3, #15
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	440a      	add	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40013800 	.word	0x40013800
 8005958:	51eb851f 	.word	0x51eb851f

0800595c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800595c:	b084      	sub	sp, #16
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	f107 0014 	add.w	r0, r7, #20
 800596a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	b004      	add	sp, #16
 800597a:	4770      	bx	lr

0800597c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800598c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005990:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	43db      	mvns	r3, r3
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	4013      	ands	r3, r2
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059f4:	b084      	sub	sp, #16
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	f107 0014 	add.w	r0, r7, #20
 8005a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	b004      	add	sp, #16
 8005a32:	4770      	bx	lr

08005a34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b09b      	sub	sp, #108	; 0x6c
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	78db      	ldrb	r3, [r3, #3]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d81f      	bhi.n	8005aa6 <USB_ActivateEndpoint+0x72>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <USB_ActivateEndpoint+0x38>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a99 	.word	0x08005a99
 8005a74:	08005aaf 	.word	0x08005aaf
 8005a78:	08005a8b 	.word	0x08005a8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a88:	e012      	b.n	8005ab0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005a92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a96:	e00b      	b.n	8005ab0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aa0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005aa4:	e004      	b.n	8005ab0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005aac:	e000      	b.n	8005ab0 <USB_ActivateEndpoint+0x7c>
      break;
 8005aae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	7b1b      	ldrb	r3, [r3, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 8149 	bne.w	8005db4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8084 	beq.w	8005c34 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	011a      	lsls	r2, r3, #4
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	88db      	ldrh	r3, [r3, #6]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	81fb      	strh	r3, [r7, #14]
 8005b6e:	89fb      	ldrh	r3, [r7, #14]
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01b      	beq.n	8005bb0 <USB_ActivateEndpoint+0x17c>
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	81bb      	strh	r3, [r7, #12]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	89bb      	ldrh	r3, [r7, #12]
 8005b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d020      	beq.n	8005bfa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	813b      	strh	r3, [r7, #8]
 8005bd0:	893b      	ldrh	r3, [r7, #8]
 8005bd2:	f083 0320 	eor.w	r3, r3, #32
 8005bd6:	813b      	strh	r3, [r7, #8]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	893b      	ldrh	r3, [r7, #8]
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
 8005bf8:	e27f      	b.n	80060fa <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c10:	817b      	strh	r3, [r7, #10]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	441a      	add	r2, r3
 8005c1c:	897b      	ldrh	r3, [r7, #10]
 8005c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	8013      	strh	r3, [r2, #0]
 8005c32:	e262      	b.n	80060fa <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	4413      	add	r3, r2
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	011a      	lsls	r2, r3, #4
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	88db      	ldrh	r3, [r3, #6]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	4413      	add	r3, r2
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	011a      	lsls	r2, r3, #4
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c8a:	623b      	str	r3, [r7, #32]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d112      	bne.n	8005cba <USB_ActivateEndpoint+0x286>
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e02f      	b.n	8005d1a <USB_ActivateEndpoint+0x2e6>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc0:	d813      	bhi.n	8005cea <USB_ActivateEndpoint+0x2b6>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <USB_ActivateEndpoint+0x2a8>
 8005cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cd8:	3301      	adds	r3, #1
 8005cda:	663b      	str	r3, [r7, #96]	; 0x60
 8005cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	e017      	b.n	8005d1a <USB_ActivateEndpoint+0x2e6>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <USB_ActivateEndpoint+0x2d0>
 8005cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d00:	3b01      	subs	r3, #1
 8005d02:	663b      	str	r3, [r7, #96]	; 0x60
 8005d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	83fb      	strh	r3, [r7, #30]
 8005d28:	8bfb      	ldrh	r3, [r7, #30]
 8005d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01b      	beq.n	8005d6a <USB_ActivateEndpoint+0x336>
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d48:	83bb      	strh	r3, [r7, #28]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	441a      	add	r2, r3
 8005d54:	8bbb      	ldrh	r3, [r7, #28]
 8005d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	837b      	strh	r3, [r7, #26]
 8005d82:	8b7b      	ldrh	r3, [r7, #26]
 8005d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d88:	837b      	strh	r3, [r7, #26]
 8005d8a:	8b7b      	ldrh	r3, [r7, #26]
 8005d8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d90:	837b      	strh	r3, [r7, #26]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	441a      	add	r2, r3
 8005d9c:	8b7b      	ldrh	r3, [r7, #26]
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]
 8005db2:	e1a2      	b.n	80060fa <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e00:	4413      	add	r3, r2
 8005e02:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	011a      	lsls	r2, r3, #4
 8005e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e12:	657b      	str	r3, [r7, #84]	; 0x54
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	891b      	ldrh	r3, [r3, #8]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	653b      	str	r3, [r7, #80]	; 0x50
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	4413      	add	r3, r2
 8005e36:	653b      	str	r3, [r7, #80]	; 0x50
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	011a      	lsls	r2, r3, #4
 8005e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	895b      	ldrh	r3, [r3, #10]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f040 8091 	bne.w	8005f84 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005e70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01b      	beq.n	8005eb2 <USB_ActivateEndpoint+0x47e>
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e90:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ec0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01b      	beq.n	8005f02 <USB_ActivateEndpoint+0x4ce>
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f60:	867b      	strh	r3, [r7, #50]	; 0x32
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	8013      	strh	r3, [r2, #0]
 8005f82:	e0ba      	b.n	80060fa <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01d      	beq.n	8005fdc <USB_ActivateEndpoint+0x5a8>
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005fec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01d      	beq.n	8006034 <USB_ActivateEndpoint+0x600>
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	78db      	ldrb	r3, [r3, #3]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d024      	beq.n	8006086 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006052:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006056:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800605a:	f083 0320 	eor.w	r3, r3, #32
 800605e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	441a      	add	r2, r3
 800606c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]
 8006084:	e01d      	b.n	80060c2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80060ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060be:	b29b      	uxth	r3, r3
 80060c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	441a      	add	r2, r3
 80060e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80060e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80060fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80060fe:	4618      	mov	r0, r3
 8006100:	376c      	adds	r7, #108	; 0x6c
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr

08006108 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006108:	b480      	push	{r7}
 800610a:	b08d      	sub	sp, #52	; 0x34
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	7b1b      	ldrb	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	f040 808e 	bne.w	8006238 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d044      	beq.n	80061ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	81bb      	strh	r3, [r7, #12]
 8006132:	89bb      	ldrh	r3, [r7, #12]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01b      	beq.n	8006174 <USB_DeactivateEndpoint+0x6c>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	817b      	strh	r3, [r7, #10]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	441a      	add	r2, r3
 800615e:	897b      	ldrh	r3, [r7, #10]
 8006160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006170:	b29b      	uxth	r3, r3
 8006172:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618a:	813b      	strh	r3, [r7, #8]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	441a      	add	r2, r3
 8006196:	893b      	ldrh	r3, [r7, #8]
 8006198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	8013      	strh	r3, [r2, #0]
 80061ac:	e192      	b.n	80064d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	827b      	strh	r3, [r7, #18]
 80061bc:	8a7b      	ldrh	r3, [r7, #18]
 80061be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01b      	beq.n	80061fe <USB_DeactivateEndpoint+0xf6>
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061dc:	823b      	strh	r3, [r7, #16]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	8a3b      	ldrh	r3, [r7, #16]
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006214:	81fb      	strh	r3, [r7, #14]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	89fb      	ldrh	r3, [r7, #14]
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]
 8006236:	e14d      	b.n	80064d4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 80a5 	bne.w	800638c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	843b      	strh	r3, [r7, #32]
 8006250:	8c3b      	ldrh	r3, [r7, #32]
 8006252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01b      	beq.n	8006292 <USB_DeactivateEndpoint+0x18a>
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006270:	83fb      	strh	r3, [r7, #30]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	441a      	add	r2, r3
 800627c:	8bfb      	ldrh	r3, [r7, #30]
 800627e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800628a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628e:	b29b      	uxth	r3, r3
 8006290:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	83bb      	strh	r3, [r7, #28]
 80062a0:	8bbb      	ldrh	r3, [r7, #28]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01b      	beq.n	80062e2 <USB_DeactivateEndpoint+0x1da>
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	837b      	strh	r3, [r7, #26]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8b7b      	ldrh	r3, [r7, #26]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	833b      	strh	r3, [r7, #24]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	8b3b      	ldrh	r3, [r7, #24]
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800632c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006330:	82fb      	strh	r3, [r7, #22]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	441a      	add	r2, r3
 800633c:	8afb      	ldrh	r3, [r7, #22]
 800633e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634e:	b29b      	uxth	r3, r3
 8006350:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006368:	82bb      	strh	r3, [r7, #20]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	441a      	add	r2, r3
 8006374:	8abb      	ldrh	r3, [r7, #20]
 8006376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006386:	b29b      	uxth	r3, r3
 8006388:	8013      	strh	r3, [r2, #0]
 800638a:	e0a3      	b.n	80064d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800639a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800639c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01b      	beq.n	80063dc <USB_DeactivateEndpoint+0x2d4>
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80063ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <USB_DeactivateEndpoint+0x324>
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640a:	853b      	strh	r3, [r7, #40]	; 0x28
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006428:	b29b      	uxth	r3, r3
 800642a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	441a      	add	r2, r3
 800644e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800645c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	441a      	add	r2, r3
 8006486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006498:	b29b      	uxth	r3, r3
 800649a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3734      	adds	r7, #52	; 0x34
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b0cc      	sub	sp, #304	; 0x130
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ee:	6018      	str	r0, [r3, #0]
 80064f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b01      	cmp	r3, #1
 8006508:	f041 817d 	bne.w	8007806 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699a      	ldr	r2, [r3, #24]
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	429a      	cmp	r2, r3
 8006526:	d908      	bls.n	800653a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006538:	e007      	b.n	800654a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800653a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800654a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	7b1b      	ldrb	r3, [r3, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d152      	bne.n	8006600 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6959      	ldr	r1, [r3, #20]
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	88da      	ldrh	r2, [r3, #6]
 8006572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006576:	b29b      	uxth	r3, r3
 8006578:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800657c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006580:	6800      	ldr	r0, [r0, #0]
 8006582:	f001 ff23 	bl	80083cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800658e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006592:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065b8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	440a      	add	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	011a      	lsls	r2, r3, #4
 80065d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4413      	add	r3, r2
 80065dc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80065e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	f001 b8b5 	b.w	800776a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	78db      	ldrb	r3, [r3, #3]
 800660c:	2b02      	cmp	r3, #2
 800660e:	f040 84c6 	bne.w	8006f9e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	429a      	cmp	r2, r3
 800662c:	f240 8443 	bls.w	8006eb6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006680:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006688:	b29b      	uxth	r3, r3
 800668a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800668c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a1a      	ldr	r2, [r3, #32]
 8006698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 823e 	beq.w	8006b4e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066de:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 809a 	bne.w	800682c <USB_EPStartXfer+0x34c>
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006704:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006708:	6812      	ldr	r2, [r2, #0]
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671a:	b29b      	uxth	r3, r3
 800671c:	4619      	mov	r1, r3
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006726:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800672a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	440a      	add	r2, r1
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	011a      	lsls	r2, r3, #4
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4413      	add	r3, r2
 800674e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d122      	bne.n	80067aa <USB_EPStartXfer+0x2ca>
 8006764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006768:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006776:	b29a      	uxth	r2, r3
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e079      	b.n	800689e <USB_EPStartXfer+0x3be>
 80067aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ae:	2b3e      	cmp	r3, #62	; 0x3e
 80067b0:	d81b      	bhi.n	80067ea <USB_EPStartXfer+0x30a>
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <USB_EPStartXfer+0x2f2>
 80067c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067cc:	3301      	adds	r3, #1
 80067ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	801a      	strh	r2, [r3, #0]
 80067e8:	e059      	b.n	800689e <USB_EPStartXfer+0x3be>
 80067ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <USB_EPStartXfer+0x32a>
 8006800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006804:	3b01      	subs	r3, #1
 8006806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800680a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800680e:	b29b      	uxth	r3, r3
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	b29b      	uxth	r3, r3
 8006814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681c:	b29a      	uxth	r2, r3
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e038      	b.n	800689e <USB_EPStartXfer+0x3be>
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d130      	bne.n	800689e <USB_EPStartXfer+0x3be>
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	4619      	mov	r1, r3
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006856:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800685a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	440a      	add	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	011a      	lsls	r2, r3, #4
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4413      	add	r3, r2
 800687e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006890:	b29a      	uxth	r2, r3
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	895b      	ldrh	r3, [r3, #10]
 80068aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6959      	ldr	r1, [r3, #20]
 80068ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068cc:	6800      	ldr	r0, [r0, #0]
 80068ce:	f001 fd7d 	bl	80083cc <USB_WritePMA>
            ep->xfer_buff += len;
 80068d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e2:	441a      	add	r2, r3
 80068e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	d90f      	bls.n	800692c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800691c:	1ad2      	subs	r2, r2, r3
 800691e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	621a      	str	r2, [r3, #32]
 800692a:	e00e      	b.n	800694a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800692c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800693c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2200      	movs	r2, #0
 8006948:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	785b      	ldrb	r3, [r3, #1]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 809a 	bne.w	8006a90 <USB_EPStartXfer+0x5b0>
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006964:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006968:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006974:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800697e:	b29b      	uxth	r3, r3
 8006980:	4619      	mov	r1, r3
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800698a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800698e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	440a      	add	r2, r1
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	011a      	lsls	r2, r3, #4
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4413      	add	r3, r2
 80069b2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d122      	bne.n	8006a0e <USB_EPStartXfer+0x52e>
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069da:	b29a      	uxth	r2, r3
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	801a      	strh	r2, [r3, #0]
 80069e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e083      	b.n	8006b16 <USB_EPStartXfer+0x636>
 8006a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a12:	2b3e      	cmp	r3, #62	; 0x3e
 8006a14:	d81b      	bhi.n	8006a4e <USB_EPStartXfer+0x56e>
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <USB_EPStartXfer+0x556>
 8006a2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e063      	b.n	8006b16 <USB_EPStartXfer+0x636>
 8006a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d104      	bne.n	8006a6e <USB_EPStartXfer+0x58e>
 8006a64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	029b      	lsls	r3, r3, #10
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	e042      	b.n	8006b16 <USB_EPStartXfer+0x636>
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d13a      	bne.n	8006b16 <USB_EPStartXfer+0x636>
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006aa8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ace:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ad2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	440a      	add	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	011a      	lsls	r2, r3, #4
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	891b      	ldrh	r3, [r3, #8]
 8006b22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6959      	ldr	r1, [r3, #20]
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b3c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b40:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b44:	6800      	ldr	r0, [r0, #0]
 8006b46:	f001 fc41 	bl	80083cc <USB_WritePMA>
 8006b4a:	f000 be0e 	b.w	800776a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d16d      	bne.n	8006c3a <USB_EPStartXfer+0x75a>
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7e:	4413      	add	r3, r2
 8006b80:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	011a      	lsls	r2, r3, #4
 8006b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b92:	4413      	add	r3, r2
 8006b94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b98:	647b      	str	r3, [r7, #68]	; 0x44
 8006b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d112      	bne.n	8006bc8 <USB_EPStartXfer+0x6e8>
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	e063      	b.n	8006c90 <USB_EPStartXfer+0x7b0>
 8006bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bce:	d817      	bhi.n	8006c00 <USB_EPStartXfer+0x720>
 8006bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <USB_EPStartXfer+0x710>
 8006be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006bea:	3301      	adds	r3, #1
 8006bec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006bf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	029b      	lsls	r3, r3, #10
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	e047      	b.n	8006c90 <USB_EPStartXfer+0x7b0>
 8006c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c04:	095b      	lsrs	r3, r3, #5
 8006c06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <USB_EPStartXfer+0x740>
 8006c16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	029b      	lsls	r3, r3, #10
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	e02a      	b.n	8006c90 <USB_EPStartXfer+0x7b0>
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d122      	bne.n	8006c90 <USB_EPStartXfer+0x7b0>
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	653b      	str	r3, [r7, #80]	; 0x50
 8006c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6a:	4413      	add	r3, r2
 8006c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	011a      	lsls	r2, r3, #4
 8006c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7e:	4413      	add	r3, r2
 8006c80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	891b      	ldrh	r3, [r3, #8]
 8006c9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6959      	ldr	r1, [r3, #20]
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cb6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006cba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006cbe:	6800      	ldr	r0, [r0, #0]
 8006cc0:	f001 fb84 	bl	80083cc <USB_WritePMA>
            ep->xfer_buff += len;
 8006cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695a      	ldr	r2, [r3, #20]
 8006cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd4:	441a      	add	r2, r3
 8006cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6a1a      	ldr	r2, [r3, #32]
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d90f      	bls.n	8006d1e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	621a      	str	r2, [r3, #32]
 8006d1c:	e00e      	b.n	8006d3c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	643b      	str	r3, [r7, #64]	; 0x40
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	785b      	ldrb	r3, [r3, #1]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d16d      	bne.n	8006e34 <USB_EPStartXfer+0x954>
 8006d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	4413      	add	r3, r2
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	011a      	lsls	r2, r3, #4
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d92:	637b      	str	r3, [r7, #52]	; 0x34
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d112      	bne.n	8006dc2 <USB_EPStartXfer+0x8e2>
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	801a      	strh	r2, [r3, #0]
 8006dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e05d      	b.n	8006e7e <USB_EPStartXfer+0x99e>
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc8:	d817      	bhi.n	8006dfa <USB_EPStartXfer+0x91a>
 8006dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <USB_EPStartXfer+0x90a>
 8006de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	e041      	b.n	8006e7e <USB_EPStartXfer+0x99e>
 8006dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <USB_EPStartXfer+0x93a>
 8006e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e14:	3b01      	subs	r3, #1
 8006e16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	029b      	lsls	r3, r3, #10
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e024      	b.n	8006e7e <USB_EPStartXfer+0x99e>
 8006e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d11c      	bne.n	8006e7e <USB_EPStartXfer+0x99e>
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e58:	4413      	add	r3, r2
 8006e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	011a      	lsls	r2, r3, #4
 8006e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	895b      	ldrh	r3, [r3, #10]
 8006e8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6959      	ldr	r1, [r3, #20]
 8006e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ea4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ea8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006eac:	6800      	ldr	r0, [r0, #0]
 8006eae:	f001 fa8d 	bl	80083cc <USB_WritePMA>
 8006eb2:	f000 bc5a 	b.w	800776a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	441a      	add	r2, r3
 8006f0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f42:	4413      	add	r3, r2
 8006f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	011a      	lsls	r2, r3, #4
 8006f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	891b      	ldrh	r3, [r3, #8]
 8006f74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6959      	ldr	r1, [r3, #20]
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f8e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f92:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f96:	6800      	ldr	r0, [r0, #0]
 8006f98:	f001 fa18 	bl	80083cc <USB_WritePMA>
 8006f9c:	e3e5      	b.n	800776a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	441a      	add	r2, r3
 8006fe2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a1a      	ldr	r2, [r3, #32]
 8007006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 81bc 	beq.w	80073b8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d16d      	bne.n	800713a <USB_EPStartXfer+0xc5a>
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	67bb      	str	r3, [r7, #120]	; 0x78
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007078:	b29b      	uxth	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800707e:	4413      	add	r3, r2
 8007080:	67bb      	str	r3, [r7, #120]	; 0x78
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	011a      	lsls	r2, r3, #4
 8007090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007092:	4413      	add	r3, r2
 8007094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007098:	677b      	str	r3, [r7, #116]	; 0x74
 800709a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d112      	bne.n	80070c8 <USB_EPStartXfer+0xbe8>
 80070a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e060      	b.n	800718a <USB_EPStartXfer+0xcaa>
 80070c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070cc:	2b3e      	cmp	r3, #62	; 0x3e
 80070ce:	d817      	bhi.n	8007100 <USB_EPStartXfer+0xc20>
 80070d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80070da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <USB_EPStartXfer+0xc10>
 80070e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070ea:	3301      	adds	r3, #1
 80070ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80070f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	029b      	lsls	r3, r3, #10
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	e044      	b.n	800718a <USB_EPStartXfer+0xcaa>
 8007100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800710a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <USB_EPStartXfer+0xc40>
 8007116:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800711a:	3b01      	subs	r3, #1
 800711c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007120:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007124:	b29b      	uxth	r3, r3
 8007126:	029b      	lsls	r3, r3, #10
 8007128:	b29b      	uxth	r3, r3
 800712a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007132:	b29a      	uxth	r2, r3
 8007134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	e027      	b.n	800718a <USB_EPStartXfer+0xcaa>
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d11f      	bne.n	800718a <USB_EPStartXfer+0xcaa>
 800714a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007158:	b29b      	uxth	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007160:	4413      	add	r3, r2
 8007162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	011a      	lsls	r2, r3, #4
 8007174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007178:	4413      	add	r3, r2
 800717a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800717e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007184:	b29a      	uxth	r2, r3
 8007186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007188:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800718a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	895b      	ldrh	r3, [r3, #10]
 8007196:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6959      	ldr	r1, [r3, #20]
 80071a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071b8:	6800      	ldr	r0, [r0, #0]
 80071ba:	f001 f907 	bl	80083cc <USB_WritePMA>
          ep->xfer_buff += len;
 80071be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695a      	ldr	r2, [r3, #20]
 80071ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ce:	441a      	add	r2, r3
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a1a      	ldr	r2, [r3, #32]
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d90f      	bls.n	8007218 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80071f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6a1a      	ldr	r2, [r3, #32]
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	1ad2      	subs	r2, r2, r3
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	621a      	str	r2, [r3, #32]
 8007216:	e00e      	b.n	8007236 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8295 	beq.w	800776a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d16d      	bne.n	800732c <USB_EPStartXfer+0xe4c>
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	66bb      	str	r3, [r7, #104]	; 0x68
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007270:	4413      	add	r3, r2
 8007272:	66bb      	str	r3, [r7, #104]	; 0x68
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	011a      	lsls	r2, r3, #4
 8007282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007284:	4413      	add	r3, r2
 8007286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800728a:	667b      	str	r3, [r7, #100]	; 0x64
 800728c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d112      	bne.n	80072ba <USB_EPStartXfer+0xdda>
 8007294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729e:	b29a      	uxth	r2, r3
 80072a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	e063      	b.n	8007382 <USB_EPStartXfer+0xea2>
 80072ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072be:	2b3e      	cmp	r3, #62	; 0x3e
 80072c0:	d817      	bhi.n	80072f2 <USB_EPStartXfer+0xe12>
 80072c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <USB_EPStartXfer+0xe02>
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072dc:	3301      	adds	r3, #1
 80072de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e047      	b.n	8007382 <USB_EPStartXfer+0xea2>
 80072f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <USB_EPStartXfer+0xe32>
 8007308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800730c:	3b01      	subs	r3, #1
 800730e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007324:	b29a      	uxth	r2, r3
 8007326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007328:	801a      	strh	r2, [r3, #0]
 800732a:	e02a      	b.n	8007382 <USB_EPStartXfer+0xea2>
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d122      	bne.n	8007382 <USB_EPStartXfer+0xea2>
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	673b      	str	r3, [r7, #112]	; 0x70
 8007348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735c:	4413      	add	r3, r2
 800735e:	673b      	str	r3, [r7, #112]	; 0x70
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	011a      	lsls	r2, r3, #4
 800736e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007370:	4413      	add	r3, r2
 8007372:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737c:	b29a      	uxth	r2, r3
 800737e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007380:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	891b      	ldrh	r3, [r3, #8]
 800738e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6959      	ldr	r1, [r3, #20]
 800739e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073b0:	6800      	ldr	r0, [r0, #0]
 80073b2:	f001 f80b 	bl	80083cc <USB_WritePMA>
 80073b6:	e1d8      	b.n	800776a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d178      	bne.n	80074ba <USB_EPStartXfer+0xfda>
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073ec:	4413      	add	r3, r2
 80073ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	011a      	lsls	r2, r3, #4
 8007400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007404:	4413      	add	r3, r2
 8007406:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800740a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800740e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d116      	bne.n	8007444 <USB_EPStartXfer+0xf64>
 8007416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743a:	b29a      	uxth	r2, r3
 800743c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	e06b      	b.n	800751c <USB_EPStartXfer+0x103c>
 8007444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d818      	bhi.n	800747e <USB_EPStartXfer+0xf9e>
 800744c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <USB_EPStartXfer+0xf8c>
 8007462:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007466:	3301      	adds	r3, #1
 8007468:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800746c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007470:	b29b      	uxth	r3, r3
 8007472:	029b      	lsls	r3, r3, #10
 8007474:	b29a      	uxth	r2, r3
 8007476:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	e04e      	b.n	800751c <USB_EPStartXfer+0x103c>
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <USB_EPStartXfer+0xfbe>
 8007494:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007498:	3b01      	subs	r3, #1
 800749a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800749e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074b6:	801a      	strh	r2, [r3, #0]
 80074b8:	e030      	b.n	800751c <USB_EPStartXfer+0x103c>
 80074ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d128      	bne.n	800751c <USB_EPStartXfer+0x103c>
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074ee:	4413      	add	r3, r2
 80074f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	011a      	lsls	r2, r3, #4
 8007502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007506:	4413      	add	r3, r2
 8007508:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800750c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800751a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	891b      	ldrh	r3, [r3, #8]
 8007528:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800752c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6959      	ldr	r1, [r3, #20]
 8007538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753c:	b29b      	uxth	r3, r3
 800753e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007542:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007546:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800754a:	6800      	ldr	r0, [r0, #0]
 800754c:	f000 ff3e 	bl	80083cc <USB_WritePMA>
          ep->xfer_buff += len;
 8007550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	695a      	ldr	r2, [r3, #20]
 800755c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007560:	441a      	add	r2, r3
 8007562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800756e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6a1a      	ldr	r2, [r3, #32]
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	429a      	cmp	r2, r3
 8007588:	d90f      	bls.n	80075aa <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800758a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a1a      	ldr	r2, [r3, #32]
 8007596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759a:	1ad2      	subs	r2, r2, r3
 800759c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	621a      	str	r2, [r3, #32]
 80075a8:	e00e      	b.n	80075c8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2200      	movs	r2, #0
 80075c6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80cc 	beq.w	800776a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d178      	bne.n	80076e2 <USB_EPStartXfer+0x1202>
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760c:	b29b      	uxth	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007614:	4413      	add	r3, r2
 8007616:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	011a      	lsls	r2, r3, #4
 8007628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800762c:	4413      	add	r3, r2
 800762e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d116      	bne.n	800766c <USB_EPStartXfer+0x118c>
 800763e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	e064      	b.n	8007736 <USB_EPStartXfer+0x1256>
 800766c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007670:	2b3e      	cmp	r3, #62	; 0x3e
 8007672:	d818      	bhi.n	80076a6 <USB_EPStartXfer+0x11c6>
 8007674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800767e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <USB_EPStartXfer+0x11b4>
 800768a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800768e:	3301      	adds	r3, #1
 8007690:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007698:	b29b      	uxth	r3, r3
 800769a:	029b      	lsls	r3, r3, #10
 800769c:	b29a      	uxth	r2, r3
 800769e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	e047      	b.n	8007736 <USB_EPStartXfer+0x1256>
 80076a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <USB_EPStartXfer+0x11e6>
 80076bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c0:	3b01      	subs	r3, #1
 80076c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	029b      	lsls	r3, r3, #10
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d8:	b29a      	uxth	r2, r3
 80076da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e029      	b.n	8007736 <USB_EPStartXfer+0x1256>
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d121      	bne.n	8007736 <USB_EPStartXfer+0x1256>
 80076f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007700:	b29b      	uxth	r3, r3
 8007702:	461a      	mov	r2, r3
 8007704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007708:	4413      	add	r3, r2
 800770a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	011a      	lsls	r2, r3, #4
 800771c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007720:	4413      	add	r3, r2
 8007722:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800772a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772e:	b29a      	uxth	r2, r3
 8007730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	895b      	ldrh	r3, [r3, #10]
 8007742:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6959      	ldr	r1, [r3, #20]
 8007752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007756:	b29b      	uxth	r3, r3
 8007758:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800775c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007760:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007764:	6800      	ldr	r0, [r0, #0]
 8007766:	f000 fe31 	bl	80083cc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800776a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800778c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007798:	8013      	strh	r3, [r2, #0]
 800779a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80077a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077a6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80077aa:	8812      	ldrh	r2, [r2, #0]
 80077ac:	f082 0210 	eor.w	r2, r2, #16
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80077ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077be:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80077c2:	8812      	ldrh	r2, [r2, #0]
 80077c4:	f082 0220 	eor.w	r2, r2, #32
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fe:	b29b      	uxth	r3, r3
 8007800:	8013      	strh	r3, [r2, #0]
 8007802:	f000 bc9f 	b.w	8008144 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	7b1b      	ldrb	r3, [r3, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 80ae 	bne.w	8007974 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	429a      	cmp	r2, r3
 8007832:	d917      	bls.n	8007864 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007854:	1ad2      	subs	r2, r2, r3
 8007856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	619a      	str	r2, [r3, #24]
 8007862:	e00e      	b.n	8007882 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2200      	movs	r2, #0
 8007880:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078a6:	4413      	add	r3, r2
 80078a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	011a      	lsls	r2, r3, #4
 80078ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078be:	4413      	add	r3, r2
 80078c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d116      	bne.n	80078fe <USB_EPStartXfer+0x141e>
 80078d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078fa:	801a      	strh	r2, [r3, #0]
 80078fc:	e3e8      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
 80078fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007902:	2b3e      	cmp	r3, #62	; 0x3e
 8007904:	d818      	bhi.n	8007938 <USB_EPStartXfer+0x1458>
 8007906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <USB_EPStartXfer+0x1446>
 800791c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007920:	3301      	adds	r3, #1
 8007922:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007926:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800792a:	b29b      	uxth	r3, r3
 800792c:	029b      	lsls	r3, r3, #10
 800792e:	b29a      	uxth	r2, r3
 8007930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	e3cb      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
 8007938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	2b00      	cmp	r3, #0
 800794c:	d104      	bne.n	8007958 <USB_EPStartXfer+0x1478>
 800794e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007952:	3b01      	subs	r3, #1
 8007954:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007958:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800795c:	b29b      	uxth	r3, r3
 800795e:	029b      	lsls	r3, r3, #10
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	e3ad      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	78db      	ldrb	r3, [r3, #3]
 8007980:	2b02      	cmp	r3, #2
 8007982:	f040 8200 	bne.w	8007d86 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 8091 	bne.w	8007aba <USB_EPStartXfer+0x15da>
 8007998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079bc:	4413      	add	r3, r2
 80079be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	011a      	lsls	r2, r3, #4
 80079d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079d4:	4413      	add	r3, r2
 80079d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d116      	bne.n	8007a1c <USB_EPStartXfer+0x153c>
 80079ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e083      	b.n	8007b24 <USB_EPStartXfer+0x1644>
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b3e      	cmp	r3, #62	; 0x3e
 8007a2a:	d820      	bhi.n	8007a6e <USB_EPStartXfer+0x158e>
 8007a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <USB_EPStartXfer+0x157c>
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a56:	3301      	adds	r3, #1
 8007a58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	e05a      	b.n	8007b24 <USB_EPStartXfer+0x1644>
 8007a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <USB_EPStartXfer+0x15be>
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	029b      	lsls	r3, r3, #10
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	e034      	b.n	8007b24 <USB_EPStartXfer+0x1644>
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d12c      	bne.n	8007b24 <USB_EPStartXfer+0x1644>
 8007aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aee:	4413      	add	r3, r2
 8007af0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	011a      	lsls	r2, r3, #4
 8007b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b06:	4413      	add	r3, r2
 8007b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f040 8091 	bne.w	8007c66 <USB_EPStartXfer+0x1786>
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	461a      	mov	r2, r3
 8007b64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b68:	4413      	add	r3, r2
 8007b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	011a      	lsls	r2, r3, #4
 8007b7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b80:	4413      	add	r3, r2
 8007b82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d116      	bne.n	8007bc8 <USB_EPStartXfer+0x16e8>
 8007b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bc4:	801a      	strh	r2, [r3, #0]
 8007bc6:	e07c      	b.n	8007cc2 <USB_EPStartXfer+0x17e2>
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bd6:	d820      	bhi.n	8007c1a <USB_EPStartXfer+0x173a>
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d004      	beq.n	8007c08 <USB_EPStartXfer+0x1728>
 8007bfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c02:	3301      	adds	r3, #1
 8007c04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	029b      	lsls	r3, r3, #10
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	e053      	b.n	8007cc2 <USB_EPStartXfer+0x17e2>
 8007c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d104      	bne.n	8007c4a <USB_EPStartXfer+0x176a>
 8007c40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c44:	3b01      	subs	r3, #1
 8007c46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	029b      	lsls	r3, r3, #10
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	e02d      	b.n	8007cc2 <USB_EPStartXfer+0x17e2>
 8007c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d125      	bne.n	8007cc2 <USB_EPStartXfer+0x17e2>
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	461a      	mov	r2, r3
 8007c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	011a      	lsls	r2, r3, #4
 8007ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cc0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 81fe 	beq.w	80080d0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cf4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <USB_EPStartXfer+0x182c>
 8007d00:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10d      	bne.n	8007d28 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d0c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 81db 	bne.w	80080d0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d1a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 81d4 	bne.w	80080d0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	441a      	add	r2, r3
 8007d6c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	8013      	strh	r3, [r2, #0]
 8007d84:	e1a4      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	78db      	ldrb	r3, [r3, #3]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	f040 819a 	bne.w	80080cc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699a      	ldr	r2, [r3, #24]
 8007da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d917      	bls.n	8007de4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	699a      	ldr	r2, [r3, #24]
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	1ad2      	subs	r2, r2, r3
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	619a      	str	r2, [r3, #24]
 8007de2:	e00e      	b.n	8007e02 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d178      	bne.n	8007f04 <USB_EPStartXfer+0x1a24>
 8007e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e36:	4413      	add	r3, r2
 8007e38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	011a      	lsls	r2, r3, #4
 8007e4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e4e:	4413      	add	r3, r2
 8007e50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d116      	bne.n	8007e8e <USB_EPStartXfer+0x19ae>
 8007e60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e72:	801a      	strh	r2, [r3, #0]
 8007e74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	e06b      	b.n	8007f66 <USB_EPStartXfer+0x1a86>
 8007e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e92:	2b3e      	cmp	r3, #62	; 0x3e
 8007e94:	d818      	bhi.n	8007ec8 <USB_EPStartXfer+0x19e8>
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <USB_EPStartXfer+0x19d6>
 8007eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	029b      	lsls	r3, r3, #10
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	e04e      	b.n	8007f66 <USB_EPStartXfer+0x1a86>
 8007ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <USB_EPStartXfer+0x1a08>
 8007ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	029b      	lsls	r3, r3, #10
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	e030      	b.n	8007f66 <USB_EPStartXfer+0x1a86>
 8007f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d128      	bne.n	8007f66 <USB_EPStartXfer+0x1a86>
 8007f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f38:	4413      	add	r3, r2
 8007f3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	011a      	lsls	r2, r3, #4
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f50:	4413      	add	r3, r2
 8007f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d178      	bne.n	8008076 <USB_EPStartXfer+0x1b96>
 8007f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa8:	4413      	add	r3, r2
 8007faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	011a      	lsls	r2, r3, #4
 8007fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d116      	bne.n	8008000 <USB_EPStartXfer+0x1b20>
 8007fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	e067      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
 8008000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008004:	2b3e      	cmp	r3, #62	; 0x3e
 8008006:	d818      	bhi.n	800803a <USB_EPStartXfer+0x1b5a>
 8008008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <USB_EPStartXfer+0x1b48>
 800801e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008022:	3301      	adds	r3, #1
 8008024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008028:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800802c:	b29b      	uxth	r3, r3
 800802e:	029b      	lsls	r3, r3, #10
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	e04a      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
 800803a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <USB_EPStartXfer+0x1b7a>
 8008050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008054:	3b01      	subs	r3, #1
 8008056:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800805a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800805e:	b29b      	uxth	r3, r3
 8008060:	029b      	lsls	r3, r3, #10
 8008062:	b29b      	uxth	r3, r3
 8008064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806c:	b29a      	uxth	r2, r3
 800806e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008072:	801a      	strh	r2, [r3, #0]
 8008074:	e02c      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d124      	bne.n	80080d0 <USB_EPStartXfer+0x1bf0>
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008094:	b29b      	uxth	r3, r3
 8008096:	461a      	mov	r2, r3
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809c:	4413      	add	r3, r2
 800809e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	011a      	lsls	r2, r3, #4
 80080b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b4:	4413      	add	r3, r2
 80080b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c8:	801a      	strh	r2, [r3, #0]
 80080ca:	e001      	b.n	80080d0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e03a      	b.n	8008146 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80080fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80080fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008102:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008106:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800810a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800810e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	441a      	add	r2, r3
 800812c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008140:	b29b      	uxth	r3, r3
 8008142:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d020      	beq.n	80081a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008178:	81bb      	strh	r3, [r7, #12]
 800817a:	89bb      	ldrh	r3, [r7, #12]
 800817c:	f083 0310 	eor.w	r3, r3, #16
 8008180:	81bb      	strh	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	441a      	add	r2, r3
 800818c:	89bb      	ldrh	r3, [r7, #12]
 800818e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819e:	b29b      	uxth	r3, r3
 80081a0:	8013      	strh	r3, [r2, #0]
 80081a2:	e01f      	b.n	80081e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ba:	81fb      	strh	r3, [r7, #14]
 80081bc:	89fb      	ldrh	r3, [r7, #14]
 80081be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081c2:	81fb      	strh	r3, [r7, #14]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	441a      	add	r2, r3
 80081ce:	89fb      	ldrh	r3, [r7, #14]
 80081d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	7b1b      	ldrb	r3, [r3, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 809d 	bne.w	800833e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d04c      	beq.n	80082a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	823b      	strh	r3, [r7, #16]
 800821a:	8a3b      	ldrh	r3, [r7, #16]
 800821c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <USB_EPClearStall+0x6c>
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	81fb      	strh	r3, [r7, #14]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	89fb      	ldrh	r3, [r7, #14]
 8008248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	78db      	ldrb	r3, [r3, #3]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d06c      	beq.n	800833e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800827a:	81bb      	strh	r3, [r7, #12]
 800827c:	89bb      	ldrh	r3, [r7, #12]
 800827e:	f083 0320 	eor.w	r3, r3, #32
 8008282:	81bb      	strh	r3, [r7, #12]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	441a      	add	r2, r3
 800828e:	89bb      	ldrh	r3, [r7, #12]
 8008290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	8013      	strh	r3, [r2, #0]
 80082a4:	e04b      	b.n	800833e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	82fb      	strh	r3, [r7, #22]
 80082b4:	8afb      	ldrh	r3, [r7, #22]
 80082b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01b      	beq.n	80082f6 <USB_EPClearStall+0x106>
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d4:	82bb      	strh	r3, [r7, #20]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	8abb      	ldrh	r3, [r7, #20]
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830c:	827b      	strh	r3, [r7, #18]
 800830e:	8a7b      	ldrh	r3, [r7, #18]
 8008310:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008314:	827b      	strh	r3, [r7, #18]
 8008316:	8a7b      	ldrh	r3, [r7, #18]
 8008318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800831c:	827b      	strh	r3, [r7, #18]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	441a      	add	r2, r3
 8008328:	8a7b      	ldrh	r3, [r7, #18]
 800832a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833a:	b29b      	uxth	r3, r3
 800833c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	bc80      	pop	{r7}
 8008348:	4770      	bx	lr

0800834a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2280      	movs	r2, #128	; 0x80
 8008360:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr

08008370 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	bc80      	pop	{r7}
 8008382:	4770      	bx	lr

08008384 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80083aa:	68fb      	ldr	r3, [r7, #12]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr

080083b6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr

080083cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b08d      	sub	sp, #52	; 0x34
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	460b      	mov	r3, r1
 80083dc:	80fb      	strh	r3, [r7, #6]
 80083de:	4613      	mov	r3, r2
 80083e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80083e2:	88bb      	ldrh	r3, [r7, #4]
 80083e4:	3301      	adds	r3, #1
 80083e6:	085b      	lsrs	r3, r3, #1
 80083e8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	005a      	lsls	r2, r3, #1
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008404:	e01e      	b.n	8008444 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	3301      	adds	r3, #1
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	b29b      	uxth	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	b29a      	uxth	r2, r3
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	3302      	adds	r3, #2
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	3302      	adds	r3, #2
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	3301      	adds	r3, #1
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	3b01      	subs	r3, #1
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1dd      	bne.n	8008406 <USB_WritePMA+0x3a>
  }
}
 800844a:	bf00      	nop
 800844c:	bf00      	nop
 800844e:	3734      	adds	r7, #52	; 0x34
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr

08008456 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008456:	b480      	push	{r7}
 8008458:	b08b      	sub	sp, #44	; 0x2c
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	4611      	mov	r1, r2
 8008462:	461a      	mov	r2, r3
 8008464:	460b      	mov	r3, r1
 8008466:	80fb      	strh	r3, [r7, #6]
 8008468:	4613      	mov	r3, r2
 800846a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800846c:	88bb      	ldrh	r3, [r7, #4]
 800846e:	085b      	lsrs	r3, r3, #1
 8008470:	b29b      	uxth	r3, r3
 8008472:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	005a      	lsls	r2, r3, #1
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008488:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
 800848e:	e01b      	b.n	80084c8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	3302      	adds	r3, #2
 800849c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3301      	adds	r3, #1
 80084aa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	3301      	adds	r3, #1
 80084ba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	3302      	adds	r3, #2
 80084c0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	3b01      	subs	r3, #1
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e0      	bne.n	8008490 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80084ce:	88bb      	ldrh	r3, [r7, #4]
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	701a      	strb	r2, [r3, #0]
  }
}
 80084ea:	bf00      	nop
 80084ec:	372c      	adds	r7, #44	; 0x2c
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <EEPROMReadBufferedByte>:
    EEPROMBufferFlush();
}


uint8_t EEPROMReadBufferedByte(const uint32_t _pos)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
    return eepromBuffer[_pos];
 80084fc:	4a04      	ldr	r2, [pc, #16]	; (8008510 <EEPROMReadBufferedByte+0x1c>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	781b      	ldrb	r3, [r3, #0]
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20000548 	.word	0x20000548

08008514 <EEPROMWriteBufferedByte>:


void EEPROMWriteBufferedByte(uint32_t _pos, uint8_t _value)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
    eepromBuffer[_pos] = _value;
 8008520:	4a04      	ldr	r2, [pc, #16]	; (8008534 <EEPROMWriteBufferedByte+0x20>)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4413      	add	r3, r2
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	701a      	strb	r2, [r3, #0]
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	20000548 	.word	0x20000548

08008538 <EEPROMFillBuffer>:


void EEPROMFillBuffer(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
    memcpy(eepromBuffer, (uint8_t*) (FLASH_BASE_ADDRESS), EEPROM_SIZE);
 800853c:	4a05      	ldr	r2, [pc, #20]	; (8008554 <EEPROMFillBuffer+0x1c>)
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <EEPROMFillBuffer+0x20>)
 8008540:	4610      	mov	r0, r2
 8008542:	4619      	mov	r1, r3
 8008544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008548:	461a      	mov	r2, r3
 800854a:	f003 f87b 	bl	800b644 <memcpy>
}
 800854e:	bf00      	nop
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000548 	.word	0x20000548
 8008558:	0801fc00 	.word	0x0801fc00

0800855c <EEPROMBufferFlush>:


void EEPROMBufferFlush(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08c      	sub	sp, #48	; 0x30
 8008560:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t offset = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t address = FLASH_BASE_ADDRESS;
 8008566:	4b2d      	ldr	r3, [pc, #180]	; (800861c <EEPROMBufferFlush+0xc0>)
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t address_end = FLASH_BASE_ADDRESS + EEPROM_SIZE - 1;
 800856a:	4b2d      	ldr	r3, [pc, #180]	; (8008620 <EEPROMBufferFlush+0xc4>)
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t pageError = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
    uint64_t data = 0;
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* ERASING page */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800857e:	2300      	movs	r3, #0
 8008580:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.Banks = FLASH_BANK_NUMBER;
 8008582:	2301      	movs	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.PageAddress = FLASH_BASE_ADDRESS;
 8008586:	4b25      	ldr	r3, [pc, #148]	; (800861c <EEPROMBufferFlush+0xc0>)
 8008588:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbPages = 1;
 800858a:	2301      	movs	r3, #1
 800858c:	617b      	str	r3, [r7, #20]

    if (HAL_FLASH_Unlock() == HAL_OK)
 800858e:	f7f9 fad7 	bl	8001b40 <HAL_FLASH_Unlock>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	bf0c      	ite	eq
 8008598:	2301      	moveq	r3, #1
 800859a:	2300      	movne	r3, #0
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d037      	beq.n	8008612 <EEPROMBufferFlush+0xb6>
    {
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80085a2:	4b20      	ldr	r3, [pc, #128]	; (8008624 <EEPROMBufferFlush+0xc8>)
 80085a4:	2234      	movs	r2, #52	; 0x34
 80085a6:	60da      	str	r2, [r3, #12]

        if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) == HAL_OK)
 80085a8:	1d3a      	adds	r2, r7, #4
 80085aa:	f107 0308 	add.w	r3, r7, #8
 80085ae:	4611      	mov	r1, r2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f9 fbad 	bl	8001d10 <HAL_FLASHEx_Erase>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bf0c      	ite	eq
 80085bc:	2301      	moveq	r3, #1
 80085be:	2300      	movne	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d023      	beq.n	800860e <EEPROMBufferFlush+0xb2>
        {
            while (address <= address_end)
 80085c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d81f      	bhi.n	800860e <EEPROMBufferFlush+0xb2>
            {
                data = *((uint64_t*) ((uint8_t*) eepromBuffer + offset));
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	4a15      	ldr	r2, [pc, #84]	; (8008628 <EEPROMBufferFlush+0xcc>)
 80085d2:	4413      	add	r3, r2
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

                if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data) == HAL_OK)
 80085dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085e2:	2003      	movs	r0, #3
 80085e4:	f7f9 fa3c 	bl	8001a60 <HAL_FLASH_Program>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf0c      	ite	eq
 80085ee:	2301      	moveq	r3, #1
 80085f0:	2300      	movne	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d006      	beq.n	8008606 <EEPROMBufferFlush+0xaa>
                {
                    address += 8;
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	3308      	adds	r3, #8
 80085fc:	62bb      	str	r3, [r7, #40]	; 0x28
                    offset += 8;
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	3308      	adds	r3, #8
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008604:	e7df      	b.n	80085c6 <EEPROMBufferFlush+0x6a>
                } else
                    address = address_end + 1;
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	3301      	adds	r3, #1
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28
            while (address <= address_end)
 800860c:	e7db      	b.n	80085c6 <EEPROMBufferFlush+0x6a>
            }
        }
        HAL_FLASH_Lock();
 800860e:	f7f9 fabd 	bl	8001b8c <HAL_FLASH_Lock>
    }
}
 8008612:	bf00      	nop
 8008614:	3730      	adds	r7, #48	; 0x30
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	0801fc00 	.word	0x0801fc00
 8008620:	0801ffff 	.word	0x0801ffff
 8008624:	40022000 	.word	0x40022000
 8008628:	20000548 	.word	0x20000548

0800862c <_isatty>:
     * chars are sent out as soon as they are printed. */
    setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
    if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	db04      	blt.n	8008644 <_isatty+0x18>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b02      	cmp	r3, #2
 800863e:	dc01      	bgt.n	8008644 <_isatty+0x18>
        return 1;
 8008640:	2301      	movs	r3, #1
 8008642:	e005      	b.n	8008650 <_isatty+0x24>

    errno = EBADF;
 8008644:	f002 ffd4 	bl	800b5f0 <__errno>
 8008648:	4603      	mov	r3, r0
 800864a:	2209      	movs	r2, #9
 800864c:	601a      	str	r2, [r3, #0]
    return 0;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <_write>:

int _write(int fd, char* ptr, int len)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d002      	beq.n	8008670 <_write+0x18>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d109      	bne.n	8008684 <_write+0x2c>
    {
        HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, 10);
 8008670:	4b07      	ldr	r3, [pc, #28]	; (8008690 <_write+0x38>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	b29a      	uxth	r2, r3
 8008678:	230a      	movs	r3, #10
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	f7fc ff61 	bl	8005542 <HAL_UART_Transmit>
        return len;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	e001      	b.n	8008688 <_write+0x30>
    } else
        return -1;
 8008684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20000948 	.word	0x20000948

08008694 <_close>:

int _close(int fd)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
    if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	db04      	blt.n	80086ac <_close+0x18>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	dc01      	bgt.n	80086ac <_close+0x18>
        return 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	e006      	b.n	80086ba <_close+0x26>

    errno = EBADF;
 80086ac:	f002 ffa0 	bl	800b5f0 <__errno>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2209      	movs	r2, #9
 80086b4:	601a      	str	r2, [r3, #0]
    return -1;
 80086b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <_lseek>:

int _lseek(int fd, int ptr, int dir)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	607a      	str	r2, [r7, #4]
    (void) fd;
    (void) ptr;
    (void) dir;

    errno = EBADF;
 80086ce:	f002 ff8f 	bl	800b5f0 <__errno>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2209      	movs	r2, #9
 80086d6:	601a      	str	r2, [r3, #0]
    return -1;
 80086d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <_read>:

int _read(int fd, char* ptr, int len)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == STDIN_FILENO)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d110      	bne.n	8008718 <_read+0x34>
    {
        hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 80086f6:	4b0e      	ldr	r3, [pc, #56]	; (8008730 <_read+0x4c>)
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086fe:	2201      	movs	r2, #1
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	f7fc ffb0 	bl	8005666 <HAL_UART_Receive>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <_read+0x30>
            return 1;
 8008710:	2301      	movs	r3, #1
 8008712:	e008      	b.n	8008726 <_read+0x42>
        else
            return EIO;
 8008714:	2305      	movs	r3, #5
 8008716:	e006      	b.n	8008726 <_read+0x42>
    }
    errno = EBADF;
 8008718:	f002 ff6a 	bl	800b5f0 <__errno>
 800871c:	4603      	mov	r3, r0
 800871e:	2209      	movs	r2, #9
 8008720:	601a      	str	r2, [r3, #0]
    return -1;
 8008722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000948 	.word	0x20000948

08008734 <_fstat>:

int _fstat(int fd, struct stat* st)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
    if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	db08      	blt.n	8008756 <_fstat+0x22>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b02      	cmp	r3, #2
 8008748:	dc05      	bgt.n	8008756 <_fstat+0x22>
    {
        st->st_mode = S_IFCHR;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008750:	605a      	str	r2, [r3, #4]
        return 0;
 8008752:	2300      	movs	r3, #0
 8008754:	e005      	b.n	8008762 <_fstat+0x2e>
    }

    errno = EBADF;
 8008756:	f002 ff4b 	bl	800b5f0 <__errno>
 800875a:	4603      	mov	r3, r0
 800875c:	2209      	movs	r2, #9
 800875e:	601a      	str	r2, [r3, #0]
    return 0;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <_Z7DelayUsm>:
#include <cstring>
#include "hw_keyboard.h"


inline void DelayUs(uint32_t _us)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < _us; i++)
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	429a      	cmp	r2, r3
 800877c:	d90d      	bls.n	800879a <_Z7DelayUsm+0x30>
        for (int j = 0; j < 8; j++)  // ToDo: tune this for different chips
 800877e:	2300      	movs	r3, #0
 8008780:	60bb      	str	r3, [r7, #8]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b07      	cmp	r3, #7
 8008786:	dc04      	bgt.n	8008792 <_Z7DelayUsm+0x28>
            __NOP();
 8008788:	bf00      	nop
        for (int j = 0; j < 8; j++)  // ToDo: tune this for different chips
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3301      	adds	r3, #1
 800878e:	60bb      	str	r3, [r7, #8]
 8008790:	e7f7      	b.n	8008782 <_Z7DelayUsm+0x18>
    for (int i = 0; i < _us; i++)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	e7ed      	b.n	8008776 <_Z7DelayUsm+0xc>
}
 800879a:	bf00      	nop
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr

080087a4 <_ZN10HWKeyboard13ScanKeyStatesEv>:


uint8_t* HWKeyboard::ScanKeyStates()
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
    memset(spiBuffer, 0xFF, IO_NUMBER / 8 + 1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80087b2:	220c      	movs	r2, #12
 80087b4:	21ff      	movs	r1, #255	; 0xff
 80087b6:	4618      	mov	r0, r3
 80087b8:	f002 ff52 	bl	800b660 <memset>
    PL_GPIO_Port->BSRR = PL_Pin; // Latch
 80087bc:	4b34      	ldr	r3, [pc, #208]	; (8008890 <_ZN10HWKeyboard13ScanKeyStatesEv+0xec>)
 80087be:	2210      	movs	r2, #16
 80087c0:	611a      	str	r2, [r3, #16]

    spiHandle->pRxBuffPtr = (uint8_t*) spiBuffer;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	f502 726a 	add.w	r2, r2, #936	; 0x3a8
 80087ce:	639a      	str	r2, [r3, #56]	; 0x38
    spiHandle->RxXferCount = IO_NUMBER / 8 + 1;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80087d6:	220c      	movs	r2, #12
 80087d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    __HAL_SPI_ENABLE(spiHandle);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f0:	601a      	str	r2, [r3, #0]
    while (spiHandle->RxXferCount > 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80087f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bf14      	ite	ne
 8008800:	2301      	movne	r3, #1
 8008802:	2300      	moveq	r3, #0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d02c      	beq.n	8008864 <_ZN10HWKeyboard13ScanKeyStatesEv+0xc0>
    {
        if (__HAL_SPI_GET_FLAG(spiHandle, SPI_FLAG_RXNE))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	bf0c      	ite	eq
 800881c:	2301      	moveq	r3, #1
 800881e:	2300      	movne	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0e5      	beq.n	80087f2 <_ZN10HWKeyboard13ScanKeyStatesEv+0x4e>
        {
            /* read the received data */
            (*(uint8_t*) spiHandle->pRxBuffPtr) = *(__IO uint8_t*) &spiHandle->Instance->DR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f103 020c 	add.w	r2, r3, #12
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	7812      	ldrb	r2, [r2, #0]
 800883c:	b2d2      	uxtb	r2, r2
 800883e:	701a      	strb	r2, [r3, #0]
            spiHandle->pRxBuffPtr += sizeof(uint8_t);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8008846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800884e:	3201      	adds	r2, #1
 8008850:	639a      	str	r2, [r3, #56]	; 0x38
            spiHandle->RxXferCount--;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8008858:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800885a:	b292      	uxth	r2, r2
 800885c:	3a01      	subs	r2, #1
 800885e:	b292      	uxth	r2, r2
 8008860:	87da      	strh	r2, [r3, #62]	; 0x3e
    while (spiHandle->RxXferCount > 0U)
 8008862:	e7c6      	b.n	80087f2 <_ZN10HWKeyboard13ScanKeyStatesEv+0x4e>
        }
    }
    __HAL_SPI_DISABLE(spiHandle);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800887a:	601a      	str	r2, [r3, #0]

    PL_GPIO_Port->BRR = PL_Pin; // Sample
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <_ZN10HWKeyboard13ScanKeyStatesEv+0xec>)
 800887e:	2210      	movs	r2, #16
 8008880:	615a      	str	r2, [r3, #20]
    return scanBuffer;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	40010c00 	.word	0x40010c00

08008894 <_ZN10HWKeyboard19ApplyDebounceFilterEm>:


void HWKeyboard::ApplyDebounceFilter(uint32_t _filterTimeUs)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
    memcpy(debounceBuffer, spiBuffer, IO_NUMBER / 8 + 1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f503 706e 	add.w	r0, r3, #952	; 0x3b8
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80088aa:	220c      	movs	r2, #12
 80088ac:	4619      	mov	r1, r3
 80088ae:	f002 fec9 	bl	800b644 <memcpy>

    DelayUs(_filterTimeUs);
 80088b2:	6838      	ldr	r0, [r7, #0]
 80088b4:	f7ff ff59 	bl	800876a <_Z7DelayUsm>
    ScanKeyStates();
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff ff73 	bl	80087a4 <_ZN10HWKeyboard13ScanKeyStatesEv>

    uint8_t mask;
    for (int i = 0; i < IO_NUMBER / 8 + 1; i++)
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b0b      	cmp	r3, #11
 80088c6:	dc21      	bgt.n	800890c <_ZN10HWKeyboard19ApplyDebounceFilterEm+0x78>
    {
        mask = debounceBuffer[i] ^ spiBuffer[i];
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	440b      	add	r3, r1
 80088da:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	4053      	eors	r3, r2
 80088e2:	72fb      	strb	r3, [r7, #11]
        spiBuffer[i] |= mask;
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	b2d9      	uxtb	r1, r3
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8008900:	460a      	mov	r2, r1
 8008902:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < IO_NUMBER / 8 + 1; i++)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	e7da      	b.n	80088c2 <_ZN10HWKeyboard19ApplyDebounceFilterEm+0x2e>
    }
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <_ZN10HWKeyboard5RemapEh>:


uint8_t* HWKeyboard::Remap(uint8_t _layer)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
    int16_t index, bitIndex;

    memset(remapBuffer, 0, IO_NUMBER / 8);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008926:	220b      	movs	r2, #11
 8008928:	2100      	movs	r1, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f002 fe98 	bl	800b660 <memset>
    for (int16_t i = 0; i < IO_NUMBER / 8; i++)
 8008930:	2300      	movs	r3, #0
 8008932:	827b      	strh	r3, [r7, #18]
 8008934:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008938:	2b0a      	cmp	r3, #10
 800893a:	dc68      	bgt.n	8008a0e <_ZN10HWKeyboard5RemapEh+0xfa>
    {
        for (int16_t j = 0; j < 8; j++)
 800893c:	2300      	movs	r3, #0
 800893e:	823b      	strh	r3, [r7, #16]
 8008940:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008944:	2b07      	cmp	r3, #7
 8008946:	dc4c      	bgt.n	80089e2 <_ZN10HWKeyboard5RemapEh+0xce>
        {
            index = (int16_t) (keyMap[0][i * 8 + j] / 8);
 8008948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800894c:	00da      	lsls	r2, r3, #3
 800894e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008952:	441a      	add	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800895a:	2b00      	cmp	r3, #0
 800895c:	da00      	bge.n	8008960 <_ZN10HWKeyboard5RemapEh+0x4c>
 800895e:	3307      	adds	r3, #7
 8008960:	10db      	asrs	r3, r3, #3
 8008962:	82fb      	strh	r3, [r7, #22]
            bitIndex = (int16_t) (keyMap[0][i * 8 + j] % 8);
 8008964:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008968:	00da      	lsls	r2, r3, #3
 800896a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800896e:	441a      	add	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008976:	425a      	negs	r2, r3
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	f002 0207 	and.w	r2, r2, #7
 8008980:	bf58      	it	pl
 8008982:	4253      	negpl	r3, r2
 8008984:	82bb      	strh	r3, [r7, #20]
            if (scanBuffer[index] & (0x80 >> bitIndex))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800898c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008990:	4413      	add	r3, r2
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800899a:	2280      	movs	r2, #128	; 0x80
 800899c:	fa42 f303 	asr.w	r3, r2, r3
 80089a0:	400b      	ands	r3, r1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d016      	beq.n	80089d4 <_ZN10HWKeyboard5RemapEh+0xc0>
                remapBuffer[i] |= 0x80 >> j;
 80089a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	4413      	add	r3, r2
 80089ae:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80089b2:	b25a      	sxtb	r2, r3
 80089b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80089b8:	2180      	movs	r1, #128	; 0x80
 80089ba:	fa41 f303 	asr.w	r3, r1, r3
 80089be:	b25b      	sxtb	r3, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b25a      	sxtb	r2, r3
 80089c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089c8:	b2d1      	uxtb	r1, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	460a      	mov	r2, r1
 80089d0:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
        for (int16_t j = 0; j < 8; j++)
 80089d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3301      	adds	r3, #1
 80089dc:	b29b      	uxth	r3, r3
 80089de:	823b      	strh	r3, [r7, #16]
 80089e0:	e7ae      	b.n	8008940 <_ZN10HWKeyboard5RemapEh+0x2c>
        }
        remapBuffer[i] = ~remapBuffer[i];
 80089e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	4413      	add	r3, r2
 80089ea:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 80089ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089f2:	43d2      	mvns	r2, r2
 80089f4:	b2d1      	uxtb	r1, r2
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	4413      	add	r3, r2
 80089fa:	460a      	mov	r2, r1
 80089fc:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
    for (int16_t i = 0; i < IO_NUMBER / 8; i++)
 8008a00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3301      	adds	r3, #1
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	827b      	strh	r3, [r7, #18]
 8008a0c:	e792      	b.n	8008934 <_ZN10HWKeyboard5RemapEh+0x20>
    }

    memset(hidBuffer, 0, KEY_REPORT_SIZE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f203 3371 	addw	r3, r3, #881	; 0x371
 8008a14:	2211      	movs	r2, #17
 8008a16:	2100      	movs	r1, #0
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f002 fe21 	bl	800b660 <memset>
    for (int i = 0; i < IO_NUMBER / 8; i++)
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b0a      	cmp	r3, #10
 8008a26:	dc6f      	bgt.n	8008b08 <_ZN10HWKeyboard5RemapEh+0x1f4>
    {
        for (int j = 0; j < 8; j++)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60bb      	str	r3, [r7, #8]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b07      	cmp	r3, #7
 8008a30:	dc66      	bgt.n	8008b00 <_ZN10HWKeyboard5RemapEh+0x1ec>
        {
            index = (int16_t) (keyMap[_layer][i * 8 + j] / 8 + 1); // +1 for modifier
 8008a32:	78f9      	ldrb	r1, [r7, #3]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	00da      	lsls	r2, r3, #3
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	441a      	add	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2058      	movs	r0, #88	; 0x58
 8008a40:	fb00 f101 	mul.w	r1, r0, r1
 8008a44:	440a      	add	r2, r1
 8008a46:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	da00      	bge.n	8008a50 <_ZN10HWKeyboard5RemapEh+0x13c>
 8008a4e:	3307      	adds	r3, #7
 8008a50:	10db      	asrs	r3, r3, #3
 8008a52:	b21b      	sxth	r3, r3
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3301      	adds	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	82fb      	strh	r3, [r7, #22]
            bitIndex = (int16_t) (keyMap[_layer][i * 8 + j] % 8);
 8008a5c:	78f9      	ldrb	r1, [r7, #3]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	00da      	lsls	r2, r3, #3
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	441a      	add	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2058      	movs	r0, #88	; 0x58
 8008a6a:	fb00 f101 	mul.w	r1, r0, r1
 8008a6e:	440a      	add	r2, r1
 8008a70:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008a74:	425a      	negs	r2, r3
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	f002 0207 	and.w	r2, r2, #7
 8008a7e:	bf58      	it	pl
 8008a80:	4253      	negpl	r3, r2
 8008a82:	82bb      	strh	r3, [r7, #20]
            if (bitIndex < 0)
 8008a84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da08      	bge.n	8008a9e <_ZN10HWKeyboard5RemapEh+0x18a>
            {
                index -= 1;
 8008a8c:	8afb      	ldrh	r3, [r7, #22]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	82fb      	strh	r3, [r7, #22]
                bitIndex += 8;
 8008a94:	8abb      	ldrh	r3, [r7, #20]
 8008a96:	3308      	adds	r3, #8
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	82bb      	strh	r3, [r7, #20]
 8008a9c:	e003      	b.n	8008aa6 <_ZN10HWKeyboard5RemapEh+0x192>
            } else if (index > 100)
 8008a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008aa2:	2b64      	cmp	r3, #100	; 0x64
 8008aa4:	dc27      	bgt.n	8008af6 <_ZN10HWKeyboard5RemapEh+0x1e2>
                continue;

            if (remapBuffer[i] & (0x80 >> j))
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	2280      	movs	r2, #128	; 0x80
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	fa42 f303 	asr.w	r3, r2, r3
 8008abc:	400b      	ands	r3, r1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01a      	beq.n	8008af8 <_ZN10HWKeyboard5RemapEh+0x1e4>
                hidBuffer[index + 1] |= 1 << (bitIndex); // +1 for Report-ID
 8008ac2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	4413      	add	r3, r2
 8008acc:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8008ad0:	b25a      	sxtb	r2, r3
 8008ad2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	b25a      	sxtb	r2, r3
 8008ae2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	b2d1      	uxtb	r1, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	460a      	mov	r2, r1
 8008af0:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8008af4:	e000      	b.n	8008af8 <_ZN10HWKeyboard5RemapEh+0x1e4>
                continue;
 8008af6:	bf00      	nop
        for (int j = 0; j < 8; j++)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	3301      	adds	r3, #1
 8008afc:	60bb      	str	r3, [r7, #8]
 8008afe:	e795      	b.n	8008a2c <_ZN10HWKeyboard5RemapEh+0x118>
    for (int i = 0; i < IO_NUMBER / 8; i++)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e78c      	b.n	8008a22 <_ZN10HWKeyboard5RemapEh+0x10e>
        }
    }

    return hidBuffer;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f203 3371 	addw	r3, r3, #881	; 0x371
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <_ZN10HWKeyboard9FnPressedEv>:


bool HWKeyboard::FnPressed()
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
    return remapBuffer[9] & 0x02;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	bf14      	ite	ne
 8008b2c:	2301      	movne	r3, #1
 8008b2e:	2300      	moveq	r3, #0
 8008b30:	b2db      	uxtb	r3, r3
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bc80      	pop	{r7}
 8008b3a:	4770      	bx	lr

08008b3c <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE>:


void HWKeyboard::SetRgbBuffer(uint8_t _keyId, HWKeyboard::Color_t _color)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	460b      	mov	r3, r1
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	72fb      	strb	r3, [r7, #11]
    for (int i = 0; i < 8; i++)
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b07      	cmp	r3, #7
 8008b52:	dc5a      	bgt.n	8008c0a <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0xce>
    {
        rgbBuffer[_keyId][0][i] = (_color.g >> brightnessPrediv) & (0x80 >> i) ? WS_HIGH : WS_LOW;
 8008b54:	797b      	ldrb	r3, [r7, #5]
 8008b56:	461a      	mov	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3dcf 	ldrb.w	r3, [r3, #3535]	; 0xdcf
 8008b5e:	411a      	asrs	r2, r3
 8008b60:	2180      	movs	r1, #128	; 0x80
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	fa41 f303 	asr.w	r3, r1, r3
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0x36>
 8008b6e:	20fe      	movs	r0, #254	; 0xfe
 8008b70:	e000      	b.n	8008b74 <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0x38>
 8008b72:	20e0      	movs	r0, #224	; 0xe0
 8008b74:	7afa      	ldrb	r2, [r7, #11]
 8008b76:	68f9      	ldr	r1, [r7, #12]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	4413      	add	r3, r2
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	18ca      	adds	r2, r1, r3
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	4413      	add	r3, r2
 8008b86:	f203 33cf 	addw	r3, r3, #975	; 0x3cf
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	701a      	strb	r2, [r3, #0]
        rgbBuffer[_keyId][1][i] = (_color.r >> brightnessPrediv) & (0x80 >> i) ? WS_HIGH : WS_LOW;
 8008b8e:	793b      	ldrb	r3, [r7, #4]
 8008b90:	461a      	mov	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 3dcf 	ldrb.w	r3, [r3, #3535]	; 0xdcf
 8008b98:	411a      	asrs	r2, r3
 8008b9a:	2180      	movs	r1, #128	; 0x80
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	fa41 f303 	asr.w	r3, r1, r3
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0x70>
 8008ba8:	20fe      	movs	r0, #254	; 0xfe
 8008baa:	e000      	b.n	8008bae <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0x72>
 8008bac:	20e0      	movs	r0, #224	; 0xe0
 8008bae:	7afa      	ldrb	r2, [r7, #11]
 8008bb0:	68f9      	ldr	r1, [r7, #12]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	18ca      	adds	r2, r1, r3
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f203 33d7 	addw	r3, r3, #983	; 0x3d7
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	701a      	strb	r2, [r3, #0]
        rgbBuffer[_keyId][2][i] = (_color.b >> brightnessPrediv) & (0x80 >> i) ? WS_HIGH : WS_LOW;
 8008bc8:	79bb      	ldrb	r3, [r7, #6]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3dcf 	ldrb.w	r3, [r3, #3535]	; 0xdcf
 8008bd2:	411a      	asrs	r2, r3
 8008bd4:	2180      	movs	r1, #128	; 0x80
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	fa41 f303 	asr.w	r3, r1, r3
 8008bdc:	4013      	ands	r3, r2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0xaa>
 8008be2:	20fe      	movs	r0, #254	; 0xfe
 8008be4:	e000      	b.n	8008be8 <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0xac>
 8008be6:	20e0      	movs	r0, #224	; 0xe0
 8008be8:	7afa      	ldrb	r2, [r7, #11]
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	4613      	mov	r3, r2
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	4413      	add	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	18ca      	adds	r2, r1, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f203 33df 	addw	r3, r3, #991	; 0x3df
 8008bfe:	4602      	mov	r2, r0
 8008c00:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	3301      	adds	r3, #1
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	e7a1      	b.n	8008b4e <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE+0x12>
    }
}
 8008c0a:	bf00      	nop
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <_ZN10HWKeyboard10SyncLightsEv>:


void HWKeyboard::SyncLights()
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
    while (isRgbTxBusy);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d000      	beq.n	8008c2a <_ZN10HWKeyboard10SyncLightsEv+0x16>
 8008c28:	e7f8      	b.n	8008c1c <_ZN10HWKeyboard10SyncLightsEv+0x8>
    isRgbTxBusy = true;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*) rgbBuffer, LED_NUMBER * 3 * 8);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f203 33cf 	addw	r3, r3, #975	; 0x3cf
 8008c38:	f44f 621c 	mov.w	r2, #2496	; 0x9c0
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	480d      	ldr	r0, [pc, #52]	; (8008c74 <_ZN10HWKeyboard10SyncLightsEv+0x60>)
 8008c40:	f7fb fd44 	bl	80046cc <HAL_SPI_Transmit_DMA>
    while (isRgbTxBusy);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d000      	beq.n	8008c52 <_ZN10HWKeyboard10SyncLightsEv+0x3e>
 8008c50:	e7f8      	b.n	8008c44 <_ZN10HWKeyboard10SyncLightsEv+0x30>
    isRgbTxBusy = true;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    HAL_SPI_Transmit_DMA(&hspi2, wsCommit, 64);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f603 538f 	addw	r3, r3, #3471	; 0xd8f
 8008c60:	2240      	movs	r2, #64	; 0x40
 8008c62:	4619      	mov	r1, r3
 8008c64:	4803      	ldr	r0, [pc, #12]	; (8008c74 <_ZN10HWKeyboard10SyncLightsEv+0x60>)
 8008c66:	f7fb fd31 	bl	80046cc <HAL_SPI_Transmit_DMA>
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	200003b4 	.word	0x200003b4

08008c78 <_ZN10HWKeyboard18GetHidReportBufferEh>:


uint8_t* HWKeyboard::GetHidReportBuffer(uint8_t _reportId)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
    switch (_reportId)
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d002      	beq.n	8008c90 <_ZN10HWKeyboard18GetHidReportBufferEh+0x18>
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d008      	beq.n	8008ca0 <_ZN10HWKeyboard18GetHidReportBufferEh+0x28>
 8008c8e:	e010      	b.n	8008cb2 <_ZN10HWKeyboard18GetHidReportBufferEh+0x3a>
    {
        case 1:
            hidBuffer[0] = 1;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
            return hidBuffer;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f203 3371 	addw	r3, r3, #881	; 0x371
 8008c9e:	e00b      	b.n	8008cb8 <_ZN10HWKeyboard18GetHidReportBufferEh+0x40>
        case 2:
            hidBuffer[KEY_REPORT_SIZE] = 2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
            return hidBuffer + KEY_REPORT_SIZE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f203 3371 	addw	r3, r3, #881	; 0x371
 8008cae:	3311      	adds	r3, #17
 8008cb0:	e002      	b.n	8008cb8 <_ZN10HWKeyboard18GetHidReportBufferEh+0x40>
        default:
            return hidBuffer;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f203 3371 	addw	r3, r3, #881	; 0x371
    }
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr

08008cc2 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	2203      	movs	r2, #3
 8008cd6:	2181      	movs	r1, #129	; 0x81
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 fd52 	bl	800a782 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	2101      	movs	r1, #1
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fd49 	bl	800a782 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008cf8:	2054      	movs	r0, #84	; 0x54
 8008cfa:	f001 fe57 	bl	800a9ac <USBD_static_malloc>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008d10:	2301      	movs	r3, #1
 8008d12:	73fb      	strb	r3, [r7, #15]
 8008d14:	e012      	b.n	8008d3c <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d1c:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	2101      	movs	r1, #1
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f001 fe14 	bl	800a964 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008d52:	2181      	movs	r1, #129	; 0x81
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 fd3a 	bl	800a7ce <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008d60:	2101      	movs	r1, #1
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 fd33 	bl	800a7ce <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 fe1a 	bl	800a9c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d051      	beq.n	8008e76 <USBD_CUSTOM_HID_Setup+0xd2>
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	f040 80d8 	bne.w	8008f88 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	785b      	ldrb	r3, [r3, #1]
 8008ddc:	3b02      	subs	r3, #2
 8008dde:	2b09      	cmp	r3, #9
 8008de0:	d841      	bhi.n	8008e66 <USBD_CUSTOM_HID_Setup+0xc2>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <USBD_CUSTOM_HID_Setup+0x44>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	08008e1f 	.word	0x08008e1f
 8008df0:	08008e67 	.word	0x08008e67
 8008df4:	08008e67 	.word	0x08008e67
 8008df8:	08008e67 	.word	0x08008e67
 8008dfc:	08008e67 	.word	0x08008e67
 8008e00:	08008e67 	.word	0x08008e67
 8008e04:	08008e51 	.word	0x08008e51
 8008e08:	08008e2f 	.word	0x08008e2f
 8008e0c:	08008e11 	.word	0x08008e11
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	885b      	ldrh	r3, [r3, #2]
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8008e1c:	e02a      	b.n	8008e74 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3340      	adds	r3, #64	; 0x40
 8008e22:	2201      	movs	r2, #1
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 f99f 	bl	800a16a <USBD_CtlSendData>
          break;
 8008e2c:	e022      	b.n	8008e74 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	0a1b      	lsrs	r3, r3, #8
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8008e3e:	e019      	b.n	8008e74 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	3344      	adds	r3, #68	; 0x44
 8008e44:	2201      	movs	r2, #1
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 f98e 	bl	800a16a <USBD_CtlSendData>
          break;
 8008e4e:	e011      	b.n	8008e74 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	2201      	movs	r2, #1
 8008e54:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008e56:	6939      	ldr	r1, [r7, #16]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	88db      	ldrh	r3, [r3, #6]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f001 f9b1 	bl	800a1c6 <USBD_CtlPrepareRx>
          break;
 8008e64:	e006      	b.n	8008e74 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 f914 	bl	800a096 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	75fb      	strb	r3, [r7, #23]
          break;
 8008e72:	bf00      	nop
      }
      break;
 8008e74:	e08f      	b.n	8008f96 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2b0b      	cmp	r3, #11
 8008e7c:	d87c      	bhi.n	8008f78 <USBD_CUSTOM_HID_Setup+0x1d4>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008f79 	.word	0x08008f79
 8008e8c:	08008f79 	.word	0x08008f79
 8008e90:	08008f79 	.word	0x08008f79
 8008e94:	08008f79 	.word	0x08008f79
 8008e98:	08008f79 	.word	0x08008f79
 8008e9c:	08008edd 	.word	0x08008edd
 8008ea0:	08008f79 	.word	0x08008f79
 8008ea4:	08008f79 	.word	0x08008f79
 8008ea8:	08008f79 	.word	0x08008f79
 8008eac:	08008f2b 	.word	0x08008f2b
 8008eb0:	08008f53 	.word	0x08008f53
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d107      	bne.n	8008ece <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ebe:	f107 030e 	add.w	r3, r7, #14
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 f94f 	bl	800a16a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ecc:	e05b      	b.n	8008f86 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 f8e0 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8008eda:	e054      	b.n	8008f86 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	885b      	ldrh	r3, [r3, #2]
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b22      	cmp	r3, #34	; 0x22
 8008ee6:	d10b      	bne.n	8008f00 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	88db      	ldrh	r3, [r3, #6]
 8008eec:	2b27      	cmp	r3, #39	; 0x27
 8008eee:	bf28      	it	cs
 8008ef0:	2327      	movcs	r3, #39	; 0x27
 8008ef2:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	e00d      	b.n	8008f1c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	885b      	ldrh	r3, [r3, #2]
 8008f04:	0a1b      	lsrs	r3, r3, #8
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2b21      	cmp	r3, #33	; 0x21
 8008f0a:	d107      	bne.n	8008f1c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008f0c:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008f0e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	88db      	ldrh	r3, [r3, #6]
 8008f14:	2b09      	cmp	r3, #9
 8008f16:	bf28      	it	cs
 8008f18:	2309      	movcs	r3, #9
 8008f1a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008f1c:	8bfb      	ldrh	r3, [r7, #30]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	69b9      	ldr	r1, [r7, #24]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 f921 	bl	800a16a <USBD_CtlSendData>
          break;
 8008f28:	e02d      	b.n	8008f86 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d107      	bne.n	8008f44 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3348      	adds	r3, #72	; 0x48
 8008f38:	2201      	movs	r2, #1
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 f914 	bl	800a16a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f42:	e020      	b.n	8008f86 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f8a5 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	75fb      	strb	r3, [r7, #23]
          break;
 8008f50:	e019      	b.n	8008f86 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d106      	bne.n	8008f6a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	461a      	mov	r2, r3
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f68:	e00d      	b.n	8008f86 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f892 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f72:	2302      	movs	r3, #2
 8008f74:	75fb      	strb	r3, [r7, #23]
          break;
 8008f76:	e006      	b.n	8008f86 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f001 f88b 	bl	800a096 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f80:	2302      	movs	r3, #2
 8008f82:	75fb      	strb	r3, [r7, #23]
          break;
 8008f84:	bf00      	nop
      }
      break;
 8008f86:	e006      	b.n	8008f96 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f883 	bl	800a096 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f90:	2302      	movs	r3, #2
 8008f92:	75fb      	strb	r3, [r7, #23]
      break;
 8008f94:	bf00      	nop
  }
  return ret;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3720      	adds	r7, #32
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	200000c8 	.word	0x200000c8

08008fa4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d111      	bne.n	8008fe8 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	2181      	movs	r1, #129	; 0x81
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f001 fc9e 	bl	800a91e <USBD_LL_Transmit>
 8008fe2:	e001      	b.n	8008fe8 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e000      	b.n	8008fea <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2229      	movs	r2, #41	; 0x29
 8009000:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8009002:	4b03      	ldr	r3, [pc, #12]	; (8009010 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000044 	.word	0x20000044

08009014 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2229      	movs	r2, #41	; 0x29
 8009020:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8009022:	4b03      	ldr	r3, [pc, #12]	; (8009030 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	20000070 	.word	0x20000070

08009034 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2229      	movs	r2, #41	; 0x29
 8009040:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8009042:	4b03      	ldr	r3, [pc, #12]	; (8009050 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	2000009c 	.word	0x2000009c

08009054 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr

08009078 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	7810      	ldrb	r0, [r2, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	7852      	ldrb	r2, [r2, #1]
 800909c:	4611      	mov	r1, r2
 800909e:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	2101      	movs	r1, #1
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 fc5c 	bl	800a964 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c4:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d10c      	bne.n	80090e8 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	7810      	ldrb	r0, [r2, #0]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	7852      	ldrb	r2, [r2, #1]
 80090de:	4611      	mov	r1, r2
 80090e0:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	220a      	movs	r2, #10
 8009100:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009102:	4b03      	ldr	r3, [pc, #12]	; (8009110 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	200000d4 	.word	0x200000d4

08009114 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800911e:	2302      	movs	r3, #2
 8009120:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr

08009140 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009154:	2302      	movs	r3, #2
 8009156:	e01a      	b.n	800918e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	79fa      	ldrb	r2, [r7, #7]
 8009184:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f001 fa90 	bl	800a6ac <USBD_LL_Init>

  return USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d006      	beq.n	80091b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
 80091b6:	e001      	b.n	80091bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091b8:	2302      	movs	r3, #2
 80091ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 fabb 	bl	800a74c <USBD_LL_Start>

  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr

080091f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009200:	2302      	movs	r3, #2
 8009202:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00c      	beq.n	8009228 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	78fa      	ldrb	r2, [r7, #3]
 8009218:	4611      	mov	r1, r2
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	4798      	blx	r3
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	4611      	mov	r1, r2
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	4798      	blx	r3

  return USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fed7 	bl	800a01e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800928c:	f003 031f 	and.w	r3, r3, #31
 8009290:	2b02      	cmp	r3, #2
 8009292:	d016      	beq.n	80092c2 <USBD_LL_SetupStage+0x6a>
 8009294:	2b02      	cmp	r3, #2
 8009296:	d81c      	bhi.n	80092d2 <USBD_LL_SetupStage+0x7a>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <USBD_LL_SetupStage+0x4a>
 800929c:	2b01      	cmp	r3, #1
 800929e:	d008      	beq.n	80092b2 <USBD_LL_SetupStage+0x5a>
 80092a0:	e017      	b.n	80092d2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f9ca 	bl	8009644 <USBD_StdDevReq>
      break;
 80092b0:	e01a      	b.n	80092e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fa2c 	bl	8009718 <USBD_StdItfReq>
      break;
 80092c0:	e012      	b.n	80092e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa6c 	bl	80097a8 <USBD_StdEPReq>
      break;
 80092d0:	e00a      	b.n	80092e8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80092d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 fa93 	bl	800a80c <USBD_LL_StallEP>
      break;
 80092e6:	bf00      	nop
  }

  return USBD_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b086      	sub	sp, #24
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	460b      	mov	r3, r1
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d14b      	bne.n	800939e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800930c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009314:	2b03      	cmp	r3, #3
 8009316:	d134      	bne.n	8009382 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	429a      	cmp	r2, r3
 8009322:	d919      	bls.n	8009358 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	1ad2      	subs	r2, r2, r3
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800933a:	429a      	cmp	r2, r3
 800933c:	d203      	bcs.n	8009346 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009342:	b29b      	uxth	r3, r3
 8009344:	e002      	b.n	800934c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800934a:	b29b      	uxth	r3, r3
 800934c:	461a      	mov	r2, r3
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 ff56 	bl	800a202 <USBD_CtlContinueRx>
 8009356:	e038      	b.n	80093ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00a      	beq.n	800937a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800936a:	2b03      	cmp	r3, #3
 800936c:	d105      	bne.n	800937a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 ff53 	bl	800a226 <USBD_CtlSendStatus>
 8009380:	e023      	b.n	80093ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009388:	2b05      	cmp	r3, #5
 800938a:	d11e      	bne.n	80093ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009394:	2100      	movs	r1, #0
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f001 fa38 	bl	800a80c <USBD_LL_StallEP>
 800939c:	e015      	b.n	80093ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d108      	bne.n	80093c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	7afa      	ldrb	r2, [r7, #11]
 80093be:	4611      	mov	r1, r2
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	4798      	blx	r3
 80093c4:	e001      	b.n	80093ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	e000      	b.n	80093cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	460b      	mov	r3, r1
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d17f      	bne.n	80094e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3314      	adds	r3, #20
 80093ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d15c      	bne.n	80094b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	429a      	cmp	r2, r3
 8009402:	d915      	bls.n	8009430 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	1ad2      	subs	r2, r2, r3
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	b29b      	uxth	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 fec0 	bl	800a1a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009422:	2300      	movs	r3, #0
 8009424:	2200      	movs	r2, #0
 8009426:	2100      	movs	r1, #0
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f001 fa9b 	bl	800a964 <USBD_LL_PrepareReceive>
 800942e:	e04e      	b.n	80094ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	6912      	ldr	r2, [r2, #16]
 8009438:	fbb3 f1f2 	udiv	r1, r3, r2
 800943c:	fb01 f202 	mul.w	r2, r1, r2
 8009440:	1a9b      	subs	r3, r3, r2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d11c      	bne.n	8009480 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800944e:	429a      	cmp	r2, r3
 8009450:	d316      	bcc.n	8009480 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800945c:	429a      	cmp	r2, r3
 800945e:	d20f      	bcs.n	8009480 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009460:	2200      	movs	r2, #0
 8009462:	2100      	movs	r1, #0
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 fe9c 	bl	800a1a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009472:	2300      	movs	r3, #0
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f001 fa73 	bl	800a964 <USBD_LL_PrepareReceive>
 800947e:	e026      	b.n	80094ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009492:	2b03      	cmp	r3, #3
 8009494:	d105      	bne.n	80094a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094a2:	2180      	movs	r1, #128	; 0x80
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f001 f9b1 	bl	800a80c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 fece 	bl	800a24c <USBD_CtlReceiveStatus>
 80094b0:	e00d      	b.n	80094ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d004      	beq.n	80094c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094c6:	2180      	movs	r1, #128	; 0x80
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f001 f99f 	bl	800a80c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d11d      	bne.n	8009514 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7ff fe81 	bl	80091e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094e6:	e015      	b.n	8009514 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00d      	beq.n	8009510 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d108      	bne.n	8009510 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	7afa      	ldrb	r2, [r7, #11]
 8009508:	4611      	mov	r1, r2
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	4798      	blx	r3
 800950e:	e001      	b.n	8009514 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009510:	2302      	movs	r3, #2
 8009512:	e000      	b.n	8009516 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009526:	2340      	movs	r3, #64	; 0x40
 8009528:	2200      	movs	r2, #0
 800952a:	2100      	movs	r1, #0
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 f928 	bl	800a782 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2240      	movs	r2, #64	; 0x40
 800953e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009542:	2340      	movs	r3, #64	; 0x40
 8009544:	2200      	movs	r2, #0
 8009546:	2180      	movs	r1, #128	; 0x80
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 f91a 	bl	800a782 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2240      	movs	r2, #64	; 0x40
 8009558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d009      	beq.n	8009596 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	6852      	ldr	r2, [r2, #4]
 800958e:	b2d2      	uxtb	r2, r2
 8009590:	4611      	mov	r1, r2
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	4798      	blx	r3
  }

  return USBD_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	78fa      	ldrb	r2, [r7, #3]
 80095b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bc80      	pop	{r7}
 80095bc:	4770      	bx	lr

080095be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2204      	movs	r2, #4
 80095d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr

080095e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d105      	bne.n	8009604 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	bc80      	pop	{r7}
 800960e:	4770      	bx	lr

08009610 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961e:	2b03      	cmp	r3, #3
 8009620:	d10b      	bne.n	800963a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d005      	beq.n	800963a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800965a:	2b40      	cmp	r3, #64	; 0x40
 800965c:	d005      	beq.n	800966a <USBD_StdDevReq+0x26>
 800965e:	2b40      	cmp	r3, #64	; 0x40
 8009660:	d84f      	bhi.n	8009702 <USBD_StdDevReq+0xbe>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <USBD_StdDevReq+0x36>
 8009666:	2b20      	cmp	r3, #32
 8009668:	d14b      	bne.n	8009702 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
      break;
 8009678:	e048      	b.n	800970c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b09      	cmp	r3, #9
 8009680:	d839      	bhi.n	80096f6 <USBD_StdDevReq+0xb2>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <USBD_StdDevReq+0x44>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	080096d9 	.word	0x080096d9
 800968c:	080096ed 	.word	0x080096ed
 8009690:	080096f7 	.word	0x080096f7
 8009694:	080096e3 	.word	0x080096e3
 8009698:	080096f7 	.word	0x080096f7
 800969c:	080096bb 	.word	0x080096bb
 80096a0:	080096b1 	.word	0x080096b1
 80096a4:	080096f7 	.word	0x080096f7
 80096a8:	080096cf 	.word	0x080096cf
 80096ac:	080096c5 	.word	0x080096c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f9dc 	bl	8009a70 <USBD_GetDescriptor>
          break;
 80096b8:	e022      	b.n	8009700 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fb3f 	bl	8009d40 <USBD_SetAddress>
          break;
 80096c2:	e01d      	b.n	8009700 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fb7e 	bl	8009dc8 <USBD_SetConfig>
          break;
 80096cc:	e018      	b.n	8009700 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc07 	bl	8009ee4 <USBD_GetConfig>
          break;
 80096d6:	e013      	b.n	8009700 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fc37 	bl	8009f4e <USBD_GetStatus>
          break;
 80096e0:	e00e      	b.n	8009700 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fc65 	bl	8009fb4 <USBD_SetFeature>
          break;
 80096ea:	e009      	b.n	8009700 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fc74 	bl	8009fdc <USBD_ClrFeature>
          break;
 80096f4:	e004      	b.n	8009700 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fccc 	bl	800a096 <USBD_CtlError>
          break;
 80096fe:	bf00      	nop
      }
      break;
 8009700:	e004      	b.n	800970c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fcc6 	bl	800a096 <USBD_CtlError>
      break;
 800970a:	bf00      	nop
  }

  return ret;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop

08009718 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800972e:	2b40      	cmp	r3, #64	; 0x40
 8009730:	d005      	beq.n	800973e <USBD_StdItfReq+0x26>
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d82e      	bhi.n	8009794 <USBD_StdItfReq+0x7c>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <USBD_StdItfReq+0x26>
 800973a:	2b20      	cmp	r3, #32
 800973c:	d12a      	bne.n	8009794 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009744:	3b01      	subs	r3, #1
 8009746:	2b02      	cmp	r3, #2
 8009748:	d81d      	bhi.n	8009786 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	889b      	ldrh	r3, [r3, #4]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b01      	cmp	r3, #1
 8009752:	d813      	bhi.n	800977c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
 8009762:	4603      	mov	r3, r0
 8009764:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	88db      	ldrh	r3, [r3, #6]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d110      	bne.n	8009790 <USBD_StdItfReq+0x78>
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10d      	bne.n	8009790 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fd56 	bl	800a226 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800977a:	e009      	b.n	8009790 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fc89 	bl	800a096 <USBD_CtlError>
          break;
 8009784:	e004      	b.n	8009790 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fc84 	bl	800a096 <USBD_CtlError>
          break;
 800978e:	e000      	b.n	8009792 <USBD_StdItfReq+0x7a>
          break;
 8009790:	bf00      	nop
      }
      break;
 8009792:	e004      	b.n	800979e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fc7d 	bl	800a096 <USBD_CtlError>
      break;
 800979c:	bf00      	nop
  }

  return USBD_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	889b      	ldrh	r3, [r3, #4]
 80097ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097c4:	2b40      	cmp	r3, #64	; 0x40
 80097c6:	d007      	beq.n	80097d8 <USBD_StdEPReq+0x30>
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	f200 8146 	bhi.w	8009a5a <USBD_StdEPReq+0x2b2>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <USBD_StdEPReq+0x40>
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	f040 8141 	bne.w	8009a5a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
      break;
 80097e6:	e13d      	b.n	8009a64 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097f0:	2b20      	cmp	r3, #32
 80097f2:	d10a      	bne.n	800980a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	4798      	blx	r3
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	e12d      	b.n	8009a66 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	785b      	ldrb	r3, [r3, #1]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d007      	beq.n	8009822 <USBD_StdEPReq+0x7a>
 8009812:	2b03      	cmp	r3, #3
 8009814:	f300 811b 	bgt.w	8009a4e <USBD_StdEPReq+0x2a6>
 8009818:	2b00      	cmp	r3, #0
 800981a:	d072      	beq.n	8009902 <USBD_StdEPReq+0x15a>
 800981c:	2b01      	cmp	r3, #1
 800981e:	d03a      	beq.n	8009896 <USBD_StdEPReq+0xee>
 8009820:	e115      	b.n	8009a4e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009828:	2b02      	cmp	r3, #2
 800982a:	d002      	beq.n	8009832 <USBD_StdEPReq+0x8a>
 800982c:	2b03      	cmp	r3, #3
 800982e:	d015      	beq.n	800985c <USBD_StdEPReq+0xb4>
 8009830:	e02b      	b.n	800988a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00c      	beq.n	8009852 <USBD_StdEPReq+0xaa>
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	2b80      	cmp	r3, #128	; 0x80
 800983c:	d009      	beq.n	8009852 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 ffe2 	bl	800a80c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009848:	2180      	movs	r1, #128	; 0x80
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 ffde 	bl	800a80c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009850:	e020      	b.n	8009894 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fc1e 	bl	800a096 <USBD_CtlError>
              break;
 800985a:	e01b      	b.n	8009894 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	885b      	ldrh	r3, [r3, #2]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10e      	bne.n	8009882 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <USBD_StdEPReq+0xda>
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	2b80      	cmp	r3, #128	; 0x80
 800986e:	d008      	beq.n	8009882 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	88db      	ldrh	r3, [r3, #6]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d104      	bne.n	8009882 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 ffc5 	bl	800a80c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fccf 	bl	800a226 <USBD_CtlSendStatus>

              break;
 8009888:	e004      	b.n	8009894 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fc02 	bl	800a096 <USBD_CtlError>
              break;
 8009892:	bf00      	nop
          }
          break;
 8009894:	e0e0      	b.n	8009a58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800989c:	2b02      	cmp	r3, #2
 800989e:	d002      	beq.n	80098a6 <USBD_StdEPReq+0xfe>
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d015      	beq.n	80098d0 <USBD_StdEPReq+0x128>
 80098a4:	e026      	b.n	80098f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00c      	beq.n	80098c6 <USBD_StdEPReq+0x11e>
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	2b80      	cmp	r3, #128	; 0x80
 80098b0:	d009      	beq.n	80098c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 ffa8 	bl	800a80c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098bc:	2180      	movs	r1, #128	; 0x80
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 ffa4 	bl	800a80c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098c4:	e01c      	b.n	8009900 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fbe4 	bl	800a096 <USBD_CtlError>
              break;
 80098ce:	e017      	b.n	8009900 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	885b      	ldrh	r3, [r3, #2]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d112      	bne.n	80098fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 ffaf 	bl	800a84a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fc9a 	bl	800a226 <USBD_CtlSendStatus>
              }
              break;
 80098f2:	e004      	b.n	80098fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fbcd 	bl	800a096 <USBD_CtlError>
              break;
 80098fc:	e000      	b.n	8009900 <USBD_StdEPReq+0x158>
              break;
 80098fe:	bf00      	nop
          }
          break;
 8009900:	e0aa      	b.n	8009a58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009908:	2b02      	cmp	r3, #2
 800990a:	d002      	beq.n	8009912 <USBD_StdEPReq+0x16a>
 800990c:	2b03      	cmp	r3, #3
 800990e:	d032      	beq.n	8009976 <USBD_StdEPReq+0x1ce>
 8009910:	e097      	b.n	8009a42 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <USBD_StdEPReq+0x180>
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2b80      	cmp	r3, #128	; 0x80
 800991c:	d004      	beq.n	8009928 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fbb8 	bl	800a096 <USBD_CtlError>
                break;
 8009926:	e091      	b.n	8009a4c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	da0b      	bge.n	8009948 <USBD_StdEPReq+0x1a0>
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	3310      	adds	r3, #16
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	4413      	add	r3, r2
 8009944:	3304      	adds	r3, #4
 8009946:	e00b      	b.n	8009960 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	3304      	adds	r3, #4
 8009960:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2202      	movs	r2, #2
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fbfb 	bl	800a16a <USBD_CtlSendData>
              break;
 8009974:	e06a      	b.n	8009a4c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800997a:	2b00      	cmp	r3, #0
 800997c:	da11      	bge.n	80099a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	f003 020f 	and.w	r2, r3, #15
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	3318      	adds	r3, #24
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d117      	bne.n	80099c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fb7b 	bl	800a096 <USBD_CtlError>
                  break;
 80099a0:	e054      	b.n	8009a4c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	f003 020f 	and.w	r2, r3, #15
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	4613      	mov	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d104      	bne.n	80099c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb68 	bl	800a096 <USBD_CtlError>
                  break;
 80099c6:	e041      	b.n	8009a4c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	da0b      	bge.n	80099e8 <USBD_StdEPReq+0x240>
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	3310      	adds	r3, #16
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	3304      	adds	r3, #4
 80099e6:	e00b      	b.n	8009a00 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <USBD_StdEPReq+0x266>
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b80      	cmp	r3, #128	; 0x80
 8009a0c:	d103      	bne.n	8009a16 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	e00e      	b.n	8009a34 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 ff34 	bl	800a888 <USBD_LL_IsStallEP>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	e002      	b.n	8009a34 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2202      	movs	r2, #2
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fb95 	bl	800a16a <USBD_CtlSendData>
              break;
 8009a40:	e004      	b.n	8009a4c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fb26 	bl	800a096 <USBD_CtlError>
              break;
 8009a4a:	bf00      	nop
          }
          break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fb20 	bl	800a096 <USBD_CtlError>
          break;
 8009a56:	bf00      	nop
      }
      break;
 8009a58:	e004      	b.n	8009a64 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fb1a 	bl	800a096 <USBD_CtlError>
      break;
 8009a62:	bf00      	nop
  }

  return ret;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	2b06      	cmp	r3, #6
 8009a92:	f200 8128 	bhi.w	8009ce6 <USBD_GetDescriptor+0x276>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <USBD_GetDescriptor+0x2c>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009ab9 	.word	0x08009ab9
 8009aa0:	08009ad1 	.word	0x08009ad1
 8009aa4:	08009b11 	.word	0x08009b11
 8009aa8:	08009ce7 	.word	0x08009ce7
 8009aac:	08009ce7 	.word	0x08009ce7
 8009ab0:	08009c87 	.word	0x08009c87
 8009ab4:	08009cb3 	.word	0x08009cb3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	7c12      	ldrb	r2, [r2, #16]
 8009ac4:	f107 0108 	add.w	r1, r7, #8
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4798      	blx	r3
 8009acc:	60f8      	str	r0, [r7, #12]
      break;
 8009ace:	e112      	b.n	8009cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	7c1b      	ldrb	r3, [r3, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10d      	bne.n	8009af4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae0:	f107 0208 	add.w	r2, r7, #8
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4798      	blx	r3
 8009ae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3301      	adds	r3, #1
 8009aee:	2202      	movs	r2, #2
 8009af0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009af2:	e100      	b.n	8009cf6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	f107 0208 	add.w	r2, r7, #8
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	701a      	strb	r2, [r3, #0]
      break;
 8009b0e:	e0f2      	b.n	8009cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	885b      	ldrh	r3, [r3, #2]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b05      	cmp	r3, #5
 8009b18:	f200 80ac 	bhi.w	8009c74 <USBD_GetDescriptor+0x204>
 8009b1c:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <USBD_GetDescriptor+0xb4>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b3d 	.word	0x08009b3d
 8009b28:	08009b71 	.word	0x08009b71
 8009b2c:	08009ba5 	.word	0x08009ba5
 8009b30:	08009bd9 	.word	0x08009bd9
 8009b34:	08009c0d 	.word	0x08009c0d
 8009b38:	08009c41 	.word	0x08009c41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	7c12      	ldrb	r2, [r2, #16]
 8009b54:	f107 0108 	add.w	r1, r7, #8
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4798      	blx	r3
 8009b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5e:	e091      	b.n	8009c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa97 	bl	800a096 <USBD_CtlError>
            err++;
 8009b68:	7afb      	ldrb	r3, [r7, #11]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6e:	e089      	b.n	8009c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	7c12      	ldrb	r2, [r2, #16]
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4798      	blx	r3
 8009b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b92:	e077      	b.n	8009c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fa7d 	bl	800a096 <USBD_CtlError>
            err++;
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ba2:	e06f      	b.n	8009c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	f107 0108 	add.w	r1, r7, #8
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc6:	e05d      	b.n	8009c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa63 	bl	800a096 <USBD_CtlError>
            err++;
 8009bd0:	7afb      	ldrb	r3, [r7, #11]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd6:	e055      	b.n	8009c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	7c12      	ldrb	r2, [r2, #16]
 8009bf0:	f107 0108 	add.w	r1, r7, #8
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3
 8009bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bfa:	e043      	b.n	8009c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fa49 	bl	800a096 <USBD_CtlError>
            err++;
 8009c04:	7afb      	ldrb	r3, [r7, #11]
 8009c06:	3301      	adds	r3, #1
 8009c08:	72fb      	strb	r3, [r7, #11]
          break;
 8009c0a:	e03b      	b.n	8009c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	7c12      	ldrb	r2, [r2, #16]
 8009c24:	f107 0108 	add.w	r1, r7, #8
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4798      	blx	r3
 8009c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c2e:	e029      	b.n	8009c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa2f 	bl	800a096 <USBD_CtlError>
            err++;
 8009c38:	7afb      	ldrb	r3, [r7, #11]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c3e:	e021      	b.n	8009c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00b      	beq.n	8009c64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	7c12      	ldrb	r2, [r2, #16]
 8009c58:	f107 0108 	add.w	r1, r7, #8
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4798      	blx	r3
 8009c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c62:	e00f      	b.n	8009c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa15 	bl	800a096 <USBD_CtlError>
            err++;
 8009c6c:	7afb      	ldrb	r3, [r7, #11]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	72fb      	strb	r3, [r7, #11]
          break;
 8009c72:	e007      	b.n	8009c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa0d 	bl	800a096 <USBD_CtlError>
          err++;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c82:	e038      	b.n	8009cf6 <USBD_GetDescriptor+0x286>
 8009c84:	e037      	b.n	8009cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	7c1b      	ldrb	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d109      	bne.n	8009ca2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c96:	f107 0208 	add.w	r2, r7, #8
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4798      	blx	r3
 8009c9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ca0:	e029      	b.n	8009cf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f9f6 	bl	800a096 <USBD_CtlError>
        err++;
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	3301      	adds	r3, #1
 8009cae:	72fb      	strb	r3, [r7, #11]
      break;
 8009cb0:	e021      	b.n	8009cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7c1b      	ldrb	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10d      	bne.n	8009cd6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc2:	f107 0208 	add.w	r2, r7, #8
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4798      	blx	r3
 8009cca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cd4:	e00f      	b.n	8009cf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f9dc 	bl	800a096 <USBD_CtlError>
        err++;
 8009cde:	7afb      	ldrb	r3, [r7, #11]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ce4:	e007      	b.n	8009cf6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f9d4 	bl	800a096 <USBD_CtlError>
      err++;
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf4:	bf00      	nop
  }

  if (err != 0U)
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d11c      	bne.n	8009d36 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009cfc:	893b      	ldrh	r3, [r7, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d011      	beq.n	8009d26 <USBD_GetDescriptor+0x2b6>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	88db      	ldrh	r3, [r3, #6]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00d      	beq.n	8009d26 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	88da      	ldrh	r2, [r3, #6]
 8009d0e:	893b      	ldrh	r3, [r7, #8]
 8009d10:	4293      	cmp	r3, r2
 8009d12:	bf28      	it	cs
 8009d14:	4613      	movcs	r3, r2
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d1a:	893b      	ldrh	r3, [r7, #8]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fa22 	bl	800a16a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	88db      	ldrh	r3, [r3, #6]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa79 	bl	800a226 <USBD_CtlSendStatus>
 8009d34:	e000      	b.n	8009d38 <USBD_GetDescriptor+0x2c8>
    return;
 8009d36:	bf00      	nop
    }
  }
}
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop

08009d40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	889b      	ldrh	r3, [r3, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d130      	bne.n	8009db4 <USBD_SetAddress+0x74>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	88db      	ldrh	r3, [r3, #6]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d12c      	bne.n	8009db4 <USBD_SetAddress+0x74>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	885b      	ldrh	r3, [r3, #2]
 8009d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8009d60:	d828      	bhi.n	8009db4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	885b      	ldrh	r3, [r3, #2]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d104      	bne.n	8009d82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f98b 	bl	800a096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d80:	e01d      	b.n	8009dbe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	7bfa      	ldrb	r2, [r7, #15]
 8009d86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fda6 	bl	800a8e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fa46 	bl	800a226 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da8:	e009      	b.n	8009dbe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db2:	e004      	b.n	8009dbe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f96d 	bl	800a096 <USBD_CtlError>
  }
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	885b      	ldrh	r3, [r3, #2]
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	4b41      	ldr	r3, [pc, #260]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009dda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ddc:	4b40      	ldr	r3, [pc, #256]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d904      	bls.n	8009dee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f955 	bl	800a096 <USBD_CtlError>
 8009dec:	e075      	b.n	8009eda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d002      	beq.n	8009dfe <USBD_SetConfig+0x36>
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d023      	beq.n	8009e44 <USBD_SetConfig+0x7c>
 8009dfc:	e062      	b.n	8009ec4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009dfe:	4b38      	ldr	r3, [pc, #224]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01a      	beq.n	8009e3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e06:	4b36      	ldr	r3, [pc, #216]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2203      	movs	r2, #3
 8009e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e18:	4b31      	ldr	r3, [pc, #196]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff f9e8 	bl	80091f4 <USBD_SetClassConfig>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d104      	bne.n	8009e34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f932 	bl	800a096 <USBD_CtlError>
            return;
 8009e32:	e052      	b.n	8009eda <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f9f6 	bl	800a226 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e3a:	e04e      	b.n	8009eda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f9f2 	bl	800a226 <USBD_CtlSendStatus>
        break;
 8009e42:	e04a      	b.n	8009eda <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e44:	4b26      	ldr	r3, [pc, #152]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d112      	bne.n	8009e72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009e54:	4b22      	ldr	r3, [pc, #136]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e5e:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff f9e4 	bl	8009232 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f9db 	bl	800a226 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e70:	e033      	b.n	8009eda <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e72:	4b1b      	ldr	r3, [pc, #108]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d01d      	beq.n	8009ebc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff f9d2 	bl	8009232 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e8e:	4b14      	ldr	r3, [pc, #80]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e98:	4b11      	ldr	r3, [pc, #68]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff f9a8 	bl	80091f4 <USBD_SetClassConfig>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d104      	bne.n	8009eb4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f8f2 	bl	800a096 <USBD_CtlError>
            return;
 8009eb2:	e012      	b.n	8009eda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f9b6 	bl	800a226 <USBD_CtlSendStatus>
        break;
 8009eba:	e00e      	b.n	8009eda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f9b2 	bl	800a226 <USBD_CtlSendStatus>
        break;
 8009ec2:	e00a      	b.n	8009eda <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f8e5 	bl	800a096 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ecc:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <USBD_SetConfig+0x118>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff f9ad 	bl	8009232 <USBD_ClrClassConfig>
        break;
 8009ed8:	bf00      	nop
    }
  }
}
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	2000094c 	.word	0x2000094c

08009ee4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	88db      	ldrh	r3, [r3, #6]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d004      	beq.n	8009f00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f8cc 	bl	800a096 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009efe:	e022      	b.n	8009f46 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	dc02      	bgt.n	8009f10 <USBD_GetConfig+0x2c>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dc03      	bgt.n	8009f16 <USBD_GetConfig+0x32>
 8009f0e:	e015      	b.n	8009f3c <USBD_GetConfig+0x58>
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetConfig+0x48>
 8009f14:	e012      	b.n	8009f3c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	2201      	movs	r2, #1
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f920 	bl	800a16a <USBD_CtlSendData>
        break;
 8009f2a:	e00c      	b.n	8009f46 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	2201      	movs	r2, #1
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f918 	bl	800a16a <USBD_CtlSendData>
        break;
 8009f3a:	e004      	b.n	8009f46 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f8a9 	bl	800a096 <USBD_CtlError>
        break;
 8009f44:	bf00      	nop
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d81e      	bhi.n	8009fa2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	88db      	ldrh	r3, [r3, #6]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d004      	beq.n	8009f76 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f891 	bl	800a096 <USBD_CtlError>
        break;
 8009f74:	e01a      	b.n	8009fac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f043 0202 	orr.w	r2, r3, #2
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	330c      	adds	r3, #12
 8009f96:	2202      	movs	r2, #2
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f8e5 	bl	800a16a <USBD_CtlSendData>
      break;
 8009fa0:	e004      	b.n	8009fac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f876 	bl	800a096 <USBD_CtlError>
      break;
 8009faa:	bf00      	nop
  }
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	885b      	ldrh	r3, [r3, #2]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d106      	bne.n	8009fd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f929 	bl	800a226 <USBD_CtlSendStatus>
  }
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fec:	3b01      	subs	r3, #1
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d80b      	bhi.n	800a00a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d10c      	bne.n	800a014 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f90f 	bl	800a226 <USBD_CtlSendStatus>
      }
      break;
 800a008:	e004      	b.n	800a014 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f842 	bl	800a096 <USBD_CtlError>
      break;
 800a012:	e000      	b.n	800a016 <USBD_ClrFeature+0x3a>
      break;
 800a014:	bf00      	nop
  }
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781a      	ldrb	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	785a      	ldrb	r2, [r3, #1]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	3302      	adds	r3, #2
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b29a      	uxth	r2, r3
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	3303      	adds	r3, #3
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	b29b      	uxth	r3, r3
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	4413      	add	r3, r2
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	3304      	adds	r3, #4
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	3305      	adds	r3, #5
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	b29b      	uxth	r3, r3
 800a064:	021b      	lsls	r3, r3, #8
 800a066:	b29b      	uxth	r3, r3
 800a068:	4413      	add	r3, r2
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	3306      	adds	r3, #6
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b29a      	uxth	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	3307      	adds	r3, #7
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	b29b      	uxth	r3, r3
 800a084:	4413      	add	r3, r2
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	80da      	strh	r2, [r3, #6]

}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	bc80      	pop	{r7}
 800a094:	4770      	bx	lr

0800a096 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0a0:	2180      	movs	r1, #128	; 0x80
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fbb2 	bl	800a80c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fbae 	bl	800a80c <USBD_LL_StallEP>
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d032      	beq.n	800a134 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f834 	bl	800a13c <USBD_GetLen>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	75fa      	strb	r2, [r7, #23]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	7812      	ldrb	r2, [r2, #0]
 800a0f2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	75fa      	strb	r2, [r7, #23]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4413      	add	r3, r2
 800a100:	2203      	movs	r2, #3
 800a102:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a104:	e012      	b.n	800a12c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	60fa      	str	r2, [r7, #12]
 800a10c:	7dfa      	ldrb	r2, [r7, #23]
 800a10e:	1c51      	adds	r1, r2, #1
 800a110:	75f9      	strb	r1, [r7, #23]
 800a112:	4611      	mov	r1, r2
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	440a      	add	r2, r1
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	75fa      	strb	r2, [r7, #23]
 800a122:	461a      	mov	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4413      	add	r3, r2
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e8      	bne.n	800a106 <USBD_GetString+0x4e>
    }
  }
}
 800a134:	bf00      	nop
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a148:	e005      	b.n	800a156 <USBD_GetLen+0x1a>
  {
    len++;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	3301      	adds	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3301      	adds	r3, #1
 800a154:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1f5      	bne.n	800a14a <USBD_GetLen+0xe>
  }

  return len;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr

0800a16a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	4613      	mov	r3, r2
 800a176:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a180:	88fa      	ldrh	r2, [r7, #6]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a186:	88fa      	ldrh	r2, [r7, #6]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a18c:	88fb      	ldrh	r3, [r7, #6]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	2100      	movs	r1, #0
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 fbc3 	bl	800a91e <USBD_LL_Transmit>

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fbb1 	bl	800a91e <USBD_LL_Transmit>

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2203      	movs	r2, #3
 800a1d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1dc:	88fa      	ldrh	r2, [r7, #6]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a1e4:	88fa      	ldrh	r2, [r7, #6]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1ec:	88fb      	ldrh	r3, [r7, #6]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fbb6 	bl	800a964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	4613      	mov	r3, r2
 800a20e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a210:	88fb      	ldrh	r3, [r7, #6]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	2100      	movs	r1, #0
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 fba4 	bl	800a964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2204      	movs	r2, #4
 800a232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a236:	2300      	movs	r3, #0
 800a238:	2200      	movs	r2, #0
 800a23a:	2100      	movs	r1, #0
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fb6e 	bl	800a91e <USBD_LL_Transmit>

  return USBD_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2205      	movs	r2, #5
 800a258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a25c:	2300      	movs	r3, #0
 800a25e:	2200      	movs	r2, #0
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fb7e 	bl	800a964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a278:	2200      	movs	r2, #0
 800a27a:	4912      	ldr	r1, [pc, #72]	; (800a2c4 <MX_USB_DEVICE_Init+0x50>)
 800a27c:	4812      	ldr	r0, [pc, #72]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a27e:	f7fe ff5f 	bl	8009140 <USBD_Init>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a288:	f7f6 fced 	bl	8000c66 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a28c:	490f      	ldr	r1, [pc, #60]	; (800a2cc <MX_USB_DEVICE_Init+0x58>)
 800a28e:	480e      	ldr	r0, [pc, #56]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a290:	f7fe ff81 	bl	8009196 <USBD_RegisterClass>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a29a:	f7f6 fce4 	bl	8000c66 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a29e:	490c      	ldr	r1, [pc, #48]	; (800a2d0 <MX_USB_DEVICE_Init+0x5c>)
 800a2a0:	4809      	ldr	r0, [pc, #36]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a2a2:	f7fe ff37 	bl	8009114 <USBD_CUSTOM_HID_RegisterInterface>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2ac:	f7f6 fcdb 	bl	8000c66 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2b0:	4805      	ldr	r0, [pc, #20]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a2b2:	f7fe ff89 	bl	80091c8 <USBD_Start>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2bc:	f7f6 fcd3 	bl	8000c66 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2c0:	bf00      	nop
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20000118 	.word	0x20000118
 800a2c8:	20000950 	.word	0x20000950
 800a2cc:	2000000c 	.word	0x2000000c
 800a2d0:	20000108 	.word	0x20000108

0800a2d4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800a2d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr

0800a2e2 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
    return (USBD_OK);
 800a2e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bc80      	pop	{r7}
 800a2ee:	4770      	bx	lr

0800a2f0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	460a      	mov	r2, r1
 800a2fa:	71fb      	strb	r3, [r7, #7]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */


    return (USBD_OK);
 800a300:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	bc80      	pop	{r7}
 800a30a:	4770      	bx	lr

0800a30c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2212      	movs	r2, #18
 800a31c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a31e:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bc80      	pop	{r7}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	20000134 	.word	0x20000134

0800a330 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2204      	movs	r2, #4
 800a340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a342:	4b03      	ldr	r3, [pc, #12]	; (800a350 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	bc80      	pop	{r7}
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	20000148 	.word	0x20000148

0800a354 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d105      	bne.n	800a372 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4907      	ldr	r1, [pc, #28]	; (800a388 <USBD_FS_ProductStrDescriptor+0x34>)
 800a36a:	4808      	ldr	r0, [pc, #32]	; (800a38c <USBD_FS_ProductStrDescriptor+0x38>)
 800a36c:	f7ff fea4 	bl	800a0b8 <USBD_GetString>
 800a370:	e004      	b.n	800a37c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4904      	ldr	r1, [pc, #16]	; (800a388 <USBD_FS_ProductStrDescriptor+0x34>)
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <USBD_FS_ProductStrDescriptor+0x38>)
 800a378:	f7ff fe9e 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a37c:	4b02      	ldr	r3, [pc, #8]	; (800a388 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000c14 	.word	0x20000c14
 800a38c:	0800e098 	.word	0x0800e098

0800a390 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3a0:	4804      	ldr	r0, [pc, #16]	; (800a3b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3a2:	f7ff fe89 	bl	800a0b8 <USBD_GetString>
  return USBD_StrDesc;
 800a3a6:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20000c14 	.word	0x20000c14
 800a3b4:	0800e0b4 	.word	0x0800e0b4

0800a3b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	221a      	movs	r2, #26
 800a3c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3ca:	f000 f843 	bl	800a454 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3ce:	4b02      	ldr	r3, [pc, #8]	; (800a3d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	2000014c 	.word	0x2000014c

0800a3dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4907      	ldr	r1, [pc, #28]	; (800a410 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3f2:	4808      	ldr	r0, [pc, #32]	; (800a414 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3f4:	f7ff fe60 	bl	800a0b8 <USBD_GetString>
 800a3f8:	e004      	b.n	800a404 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	4904      	ldr	r1, [pc, #16]	; (800a410 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3fe:	4805      	ldr	r0, [pc, #20]	; (800a414 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a400:	f7ff fe5a 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a404:	4b02      	ldr	r3, [pc, #8]	; (800a410 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000c14 	.word	0x20000c14
 800a414:	0800e0c0 	.word	0x0800e0c0

0800a418 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d105      	bne.n	800a436 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	4907      	ldr	r1, [pc, #28]	; (800a44c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a42e:	4808      	ldr	r0, [pc, #32]	; (800a450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a430:	f7ff fe42 	bl	800a0b8 <USBD_GetString>
 800a434:	e004      	b.n	800a440 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	4904      	ldr	r1, [pc, #16]	; (800a44c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a43a:	4805      	ldr	r0, [pc, #20]	; (800a450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a43c:	f7ff fe3c 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a440:	4b02      	ldr	r3, [pc, #8]	; (800a44c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	20000c14 	.word	0x20000c14
 800a450:	0800e0d4 	.word	0x0800e0d4

0800a454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a45a:	4b0f      	ldr	r3, [pc, #60]	; (800a498 <Get_SerialNum+0x44>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a460:	4b0e      	ldr	r3, [pc, #56]	; (800a49c <Get_SerialNum+0x48>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a466:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <Get_SerialNum+0x4c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4413      	add	r3, r2
 800a472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d009      	beq.n	800a48e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a47a:	2208      	movs	r2, #8
 800a47c:	4909      	ldr	r1, [pc, #36]	; (800a4a4 <Get_SerialNum+0x50>)
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f814 	bl	800a4ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a484:	2204      	movs	r2, #4
 800a486:	4908      	ldr	r1, [pc, #32]	; (800a4a8 <Get_SerialNum+0x54>)
 800a488:	68b8      	ldr	r0, [r7, #8]
 800a48a:	f000 f80f 	bl	800a4ac <IntToUnicode>
  }
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	1ffff7e8 	.word	0x1ffff7e8
 800a49c:	1ffff7ec 	.word	0x1ffff7ec
 800a4a0:	1ffff7f0 	.word	0x1ffff7f0
 800a4a4:	2000014e 	.word	0x2000014e
 800a4a8:	2000015e 	.word	0x2000015e

0800a4ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4be:	2300      	movs	r3, #0
 800a4c0:	75fb      	strb	r3, [r7, #23]
 800a4c2:	e027      	b.n	800a514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	0f1b      	lsrs	r3, r3, #28
 800a4c8:	2b09      	cmp	r3, #9
 800a4ca:	d80b      	bhi.n	800a4e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	0f1b      	lsrs	r3, r3, #28
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	440b      	add	r3, r1
 800a4dc:	3230      	adds	r2, #48	; 0x30
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e00a      	b.n	800a4fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	0f1b      	lsrs	r3, r3, #28
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	005b      	lsls	r3, r3, #1
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	440b      	add	r3, r1
 800a4f4:	3237      	adds	r2, #55	; 0x37
 800a4f6:	b2d2      	uxtb	r2, r2
 800a4f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a500:	7dfb      	ldrb	r3, [r7, #23]
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	3301      	adds	r3, #1
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	3301      	adds	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
 800a514:	7dfa      	ldrb	r2, [r7, #23]
 800a516:	79fb      	ldrb	r3, [r7, #7]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d3d3      	bcc.n	800a4c4 <IntToUnicode+0x18>
  }
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	bc80      	pop	{r7}
 800a526:	4770      	bx	lr

0800a528 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a0d      	ldr	r2, [pc, #52]	; (800a56c <HAL_PCD_MspInit+0x44>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d113      	bne.n	800a562 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a53a:	4b0d      	ldr	r3, [pc, #52]	; (800a570 <HAL_PCD_MspInit+0x48>)
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	4a0c      	ldr	r2, [pc, #48]	; (800a570 <HAL_PCD_MspInit+0x48>)
 800a540:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a544:	61d3      	str	r3, [r2, #28]
 800a546:	4b0a      	ldr	r3, [pc, #40]	; (800a570 <HAL_PCD_MspInit+0x48>)
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a552:	2200      	movs	r2, #0
 800a554:	2100      	movs	r1, #0
 800a556:	2014      	movs	r0, #20
 800a558:	f7f6 ffe7 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a55c:	2014      	movs	r0, #20
 800a55e:	f7f7 f800 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	40005c00 	.word	0x40005c00
 800a570:	40021000 	.word	0x40021000

0800a574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a588:	4619      	mov	r1, r3
 800a58a:	4610      	mov	r0, r2
 800a58c:	f7fe fe64 	bl	8009258 <USBD_LL_SetupStage>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a5aa:	78fa      	ldrb	r2, [r7, #3]
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	440b      	add	r3, r1
 800a5b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	78fb      	ldrb	r3, [r7, #3]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	f7fe fe96 	bl	80092f2 <USBD_LL_DataOutStage>
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b082      	sub	sp, #8
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a5e0:	78fa      	ldrb	r2, [r7, #3]
 800a5e2:	6879      	ldr	r1, [r7, #4]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	440b      	add	r3, r1
 800a5ee:	333c      	adds	r3, #60	; 0x3c
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	78fb      	ldrb	r3, [r7, #3]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	f7fe feed 	bl	80093d4 <USBD_LL_DataInStage>
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fffd 	bl	8009610 <USBD_LL_SOF>
}
 800a616:	bf00      	nop
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b084      	sub	sp, #16
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a626:	2301      	movs	r3, #1
 800a628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d001      	beq.n	800a636 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a632:	f7f6 fb18 	bl	8000c66 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a63c:	7bfa      	ldrb	r2, [r7, #15]
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe ffad 	bl	80095a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe ff66 	bl	800951e <USBD_LL_Reset>
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe ffa7 	bl	80095be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d005      	beq.n	800a684 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a678:	4b04      	ldr	r3, [pc, #16]	; (800a68c <HAL_PCD_SuspendCallback+0x30>)
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	4a03      	ldr	r2, [pc, #12]	; (800a68c <HAL_PCD_SuspendCallback+0x30>)
 800a67e:	f043 0306 	orr.w	r3, r3, #6
 800a682:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a684:	bf00      	nop
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	e000ed00 	.word	0xe000ed00

0800a690 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe ffa1 	bl	80095e6 <USBD_LL_Resume>
}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a6b4:	4a23      	ldr	r2, [pc, #140]	; (800a744 <USBD_LL_Init+0x98>)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a21      	ldr	r2, [pc, #132]	; (800a744 <USBD_LL_Init+0x98>)
 800a6c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a6c4:	4b1f      	ldr	r3, [pc, #124]	; (800a744 <USBD_LL_Init+0x98>)
 800a6c6:	4a20      	ldr	r2, [pc, #128]	; (800a748 <USBD_LL_Init+0x9c>)
 800a6c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a6ca:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <USBD_LL_Init+0x98>)
 800a6cc:	2208      	movs	r2, #8
 800a6ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a6d0:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <USBD_LL_Init+0x98>)
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a6d6:	4b1b      	ldr	r3, [pc, #108]	; (800a744 <USBD_LL_Init+0x98>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a6dc:	4b19      	ldr	r3, [pc, #100]	; (800a744 <USBD_LL_Init+0x98>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a6e2:	4b18      	ldr	r3, [pc, #96]	; (800a744 <USBD_LL_Init+0x98>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a6e8:	4816      	ldr	r0, [pc, #88]	; (800a744 <USBD_LL_Init+0x98>)
 800a6ea:	f7f7 fd55 	bl	8002198 <HAL_PCD_Init>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a6f4:	f7f6 fab7 	bl	8000c66 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6fe:	2318      	movs	r3, #24
 800a700:	2200      	movs	r2, #0
 800a702:	2100      	movs	r1, #0
 800a704:	f7f9 f9b2 	bl	8003a6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a70e:	2358      	movs	r3, #88	; 0x58
 800a710:	2200      	movs	r2, #0
 800a712:	2180      	movs	r1, #128	; 0x80
 800a714:	f7f9 f9aa 	bl	8003a6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a71e:	2398      	movs	r3, #152	; 0x98
 800a720:	2200      	movs	r2, #0
 800a722:	2181      	movs	r1, #129	; 0x81
 800a724:	f7f9 f9a2 	bl	8003a6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a72e:	23d8      	movs	r3, #216	; 0xd8
 800a730:	2200      	movs	r2, #0
 800a732:	2101      	movs	r1, #1
 800a734:	f7f9 f99a 	bl	8003a6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000e14 	.word	0x20000e14
 800a748:	40005c00 	.word	0x40005c00

0800a74c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a762:	4618      	mov	r0, r3
 800a764:	f7f7 fe23 	bl	80023ae <HAL_PCD_Start>
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 f93c 	bl	800a9ec <USBD_Get_USB_Status>
 800a774:	4603      	mov	r3, r0
 800a776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a778:	7bbb      	ldrb	r3, [r7, #14]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	461a      	mov	r2, r3
 800a790:	4603      	mov	r3, r0
 800a792:	70fb      	strb	r3, [r7, #3]
 800a794:	460b      	mov	r3, r1
 800a796:	70bb      	strb	r3, [r7, #2]
 800a798:	4613      	mov	r3, r2
 800a79a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7aa:	78bb      	ldrb	r3, [r7, #2]
 800a7ac:	883a      	ldrh	r2, [r7, #0]
 800a7ae:	78f9      	ldrb	r1, [r7, #3]
 800a7b0:	f7f7 ff9b 	bl	80026ea <HAL_PCD_EP_Open>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f916 	bl	800a9ec <USBD_Get_USB_Status>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7e8:	78fa      	ldrb	r2, [r7, #3]
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7f7 ffe2 	bl	80027b6 <HAL_PCD_EP_Close>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f8f7 	bl	800a9ec <USBD_Get_USB_Status>
 800a7fe:	4603      	mov	r3, r0
 800a800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a802:	7bbb      	ldrb	r3, [r7, #14]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	4611      	mov	r1, r2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f8 f88b 	bl	8002946 <HAL_PCD_EP_SetStall>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 f8d8 	bl	800a9ec <USBD_Get_USB_Status>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a840:	7bbb      	ldrb	r3, [r7, #14]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f8 f8cc 	bl	8002a06 <HAL_PCD_EP_ClrStall>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f8b9 	bl	800a9ec <USBD_Get_USB_Status>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a89a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a89c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	da0c      	bge.n	800a8be <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8aa:	68f9      	ldr	r1, [r7, #12]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	440b      	add	r3, r1
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	e00b      	b.n	800a8d6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8c4:	68f9      	ldr	r1, [r7, #12]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	440b      	add	r3, r1
 800a8d0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a8d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bc80      	pop	{r7}
 800a8de:	4770      	bx	lr

0800a8e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8fa:	78fa      	ldrb	r2, [r7, #3]
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7f7 fece 	bl	80026a0 <HAL_PCD_SetAddress>
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 f86e 	bl	800a9ec <USBD_Get_USB_Status>
 800a910:	4603      	mov	r3, r0
 800a912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a914:	7bbb      	ldrb	r3, [r7, #14]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b086      	sub	sp, #24
 800a922:	af00      	add	r7, sp, #0
 800a924:	60f8      	str	r0, [r7, #12]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	461a      	mov	r2, r3
 800a92a:	460b      	mov	r3, r1
 800a92c:	72fb      	strb	r3, [r7, #11]
 800a92e:	4613      	mov	r3, r2
 800a930:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a940:	893b      	ldrh	r3, [r7, #8]
 800a942:	7af9      	ldrb	r1, [r7, #11]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	f7f7 ffbb 	bl	80028c0 <HAL_PCD_EP_Transmit>
 800a94a:	4603      	mov	r3, r0
 800a94c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	4618      	mov	r0, r3
 800a952:	f000 f84b 	bl	800a9ec <USBD_Get_USB_Status>
 800a956:	4603      	mov	r3, r0
 800a958:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a95a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	607a      	str	r2, [r7, #4]
 800a96e:	461a      	mov	r2, r3
 800a970:	460b      	mov	r3, r1
 800a972:	72fb      	strb	r3, [r7, #11]
 800a974:	4613      	mov	r3, r2
 800a976:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a986:	893b      	ldrh	r3, [r7, #8]
 800a988:	7af9      	ldrb	r1, [r7, #11]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	f7f7 ff5b 	bl	8002846 <HAL_PCD_EP_Receive>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f828 	bl	800a9ec <USBD_Get_USB_Status>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a9b4:	4b02      	ldr	r3, [pc, #8]	; (800a9c0 <USBD_static_malloc+0x14>)
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bc80      	pop	{r7}
 800a9be:	4770      	bx	lr
 800a9c0:	20001100 	.word	0x20001100

0800a9c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]

}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr

0800a9d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a9e2:	bf00      	nop
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bc80      	pop	{r7}
 800a9ea:	4770      	bx	lr

0800a9ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	2b03      	cmp	r3, #3
 800a9fe:	d817      	bhi.n	800aa30 <USBD_Get_USB_Status+0x44>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <USBD_Get_USB_Status+0x1c>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa1f 	.word	0x0800aa1f
 800aa10:	0800aa25 	.word	0x0800aa25
 800aa14:	0800aa2b 	.word	0x0800aa2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa1c:	e00b      	b.n	800aa36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa1e:	2302      	movs	r3, #2
 800aa20:	73fb      	strb	r3, [r7, #15]
    break;
 800aa22:	e008      	b.n	800aa36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa24:	2301      	movs	r3, #1
 800aa26:	73fb      	strb	r3, [r7, #15]
    break;
 800aa28:	e005      	b.n	800aa36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa2e:	e002      	b.n	800aa36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa30:	2302      	movs	r3, #2
 800aa32:	73fb      	strb	r3, [r7, #15]
    break;
 800aa34:	bf00      	nop
  }
  return usb_status;
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bc80      	pop	{r7}
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop

0800aa44 <_ZN6EEPROM4initEv>:

    bool isValid = true;


private:
    void init()
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
    {
        // Copy the data from the flash to the buffer
        EEPROMFillBuffer();
 800aa4c:	f7fd fd74 	bl	8008538 <EEPROMFillBuffer>
        isInitialized = true;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	705a      	strb	r2, [r3, #1]
    }
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <_ZN10HWKeyboardC1EP19__SPI_HandleTypeDef>:


class HWKeyboard
{
public:
    explicit HWKeyboard(SPI_HandleTypeDef* _spi) :
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
        spiHandle(_spi)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f44f 735c 	mov.w	r3, #880	; 0x370
 800aa72:	461a      	mov	r2, r3
 800aa74:	2100      	movs	r1, #0
 800aa76:	f000 fdf3 	bl	800b660 <memset>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2243      	movs	r2, #67	; 0x43
 800aa7e:	801a      	strh	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	223d      	movs	r2, #61	; 0x3d
 800aa84:	805a      	strh	r2, [r3, #2]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	223c      	movs	r2, #60	; 0x3c
 800aa8a:	809a      	strh	r2, [r3, #4]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	223a      	movs	r2, #58	; 0x3a
 800aa90:	80da      	strh	r2, [r3, #6]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	223b      	movs	r2, #59	; 0x3b
 800aa96:	811a      	strh	r2, [r3, #8]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2234      	movs	r2, #52	; 0x34
 800aa9c:	815a      	strh	r2, [r3, #10]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2237      	movs	r2, #55	; 0x37
 800aaa2:	819a      	strh	r2, [r3, #12]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2233      	movs	r2, #51	; 0x33
 800aaa8:	81da      	strh	r2, [r3, #14]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2232      	movs	r2, #50	; 0x32
 800aaae:	821a      	strh	r2, [r3, #16]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2231      	movs	r2, #49	; 0x31
 800aab4:	825a      	strh	r2, [r3, #18]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2230      	movs	r2, #48	; 0x30
 800aaba:	829a      	strh	r2, [r3, #20]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	222f      	movs	r2, #47	; 0x2f
 800aac0:	82da      	strh	r2, [r3, #22]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	222e      	movs	r2, #46	; 0x2e
 800aac6:	831a      	strh	r2, [r3, #24]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2203      	movs	r2, #3
 800aacc:	835a      	strh	r2, [r3, #26]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2250      	movs	r2, #80	; 0x50
 800aad2:	839a      	strh	r2, [r3, #28]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2251      	movs	r2, #81	; 0x51
 800aad8:	83da      	strh	r2, [r3, #30]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2240      	movs	r2, #64	; 0x40
 800aade:	841a      	strh	r2, [r3, #32]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2239      	movs	r2, #57	; 0x39
 800aae4:	845a      	strh	r2, [r3, #34]	; 0x22
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	223e      	movs	r2, #62	; 0x3e
 800aaea:	849a      	strh	r2, [r3, #36]	; 0x24
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	223f      	movs	r2, #63	; 0x3f
 800aaf0:	84da      	strh	r2, [r3, #38]	; 0x26
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2235      	movs	r2, #53	; 0x35
 800aaf6:	851a      	strh	r2, [r3, #40]	; 0x28
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2236      	movs	r2, #54	; 0x36
 800aafc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	222d      	movs	r2, #45	; 0x2d
 800ab02:	859a      	strh	r2, [r3, #44]	; 0x2c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	222c      	movs	r2, #44	; 0x2c
 800ab08:	85da      	strh	r2, [r3, #46]	; 0x2e
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2228      	movs	r2, #40	; 0x28
 800ab0e:	861a      	strh	r2, [r3, #48]	; 0x30
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	221f      	movs	r2, #31
 800ab14:	865a      	strh	r2, [r3, #50]	; 0x32
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	221a      	movs	r2, #26
 800ab1a:	869a      	strh	r2, [r3, #52]	; 0x34
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2212      	movs	r2, #18
 800ab20:	86da      	strh	r2, [r3, #54]	; 0x36
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2202      	movs	r2, #2
 800ab26:	871a      	strh	r2, [r3, #56]	; 0x38
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2213      	movs	r2, #19
 800ab2c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2246      	movs	r2, #70	; 0x46
 800ab32:	879a      	strh	r2, [r3, #60]	; 0x3c
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2247      	movs	r2, #71	; 0x47
 800ab38:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2242      	movs	r2, #66	; 0x42
 800ab3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2241      	movs	r2, #65	; 0x41
 800ab46:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2238      	movs	r2, #56	; 0x38
 800ab4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2224      	movs	r2, #36	; 0x24
 800ab56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2225      	movs	r2, #37	; 0x25
 800ab5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2226      	movs	r2, #38	; 0x26
 800ab66:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2227      	movs	r2, #39	; 0x27
 800ab6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	222b      	movs	r2, #43	; 0x2b
 800ab76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	222a      	movs	r2, #42	; 0x2a
 800ab7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2229      	movs	r2, #41	; 0x29
 800ab86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	221c      	movs	r2, #28
 800ab8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	220f      	movs	r2, #15
 800ab9e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	224a      	movs	r2, #74	; 0x4a
 800aba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2249      	movs	r2, #73	; 0x49
 800abae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2248      	movs	r2, #72	; 0x48
 800abb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2244      	movs	r2, #68	; 0x44
 800abbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2245      	movs	r2, #69	; 0x45
 800abc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	221d      	movs	r2, #29
 800abce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	221e      	movs	r2, #30
 800abd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2223      	movs	r2, #35	; 0x23
 800abde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2222      	movs	r2, #34	; 0x22
 800abe6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2221      	movs	r2, #33	; 0x21
 800abee:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2218      	movs	r2, #24
 800abfe:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	220e      	movs	r2, #14
 800ac06:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	224c      	movs	r2, #76	; 0x4c
 800ac0e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	224d      	movs	r2, #77	; 0x4d
 800ac16:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	224e      	movs	r2, #78	; 0x4e
 800ac1e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	224f      	movs	r2, #79	; 0x4f
 800ac26:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2210      	movs	r2, #16
 800ac2e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2214      	movs	r2, #20
 800ac36:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2215      	movs	r2, #21
 800ac3e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2216      	movs	r2, #22
 800ac46:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2217      	movs	r2, #23
 800ac4e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	221b      	movs	r2, #27
 800ac56:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2219      	movs	r2, #25
 800ac5e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2211      	movs	r2, #17
 800ac66:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2204      	movs	r2, #4
 800ac6e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	220d      	movs	r2, #13
 800ac76:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	220c      	movs	r2, #12
 800ac7e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2208      	movs	r2, #8
 800ac86:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	224b      	movs	r2, #75	; 0x4b
 800ac8e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2209      	movs	r2, #9
 800ac96:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	220a      	movs	r2, #10
 800ac9e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2207      	movs	r2, #7
 800aca6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	220b      	movs	r2, #11
 800acae:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2206      	movs	r2, #6
 800acb6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2205      	movs	r2, #5
 800acbe:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2252      	movs	r2, #82	; 0x52
 800acc6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2253      	movs	r2, #83	; 0x53
 800acce:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2254      	movs	r2, #84	; 0x54
 800acd6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2255      	movs	r2, #85	; 0x55
 800acde:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2256      	movs	r2, #86	; 0x56
 800ace6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2257      	movs	r2, #87	; 0x57
 800acee:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2229      	movs	r2, #41	; 0x29
 800acf6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	223a      	movs	r2, #58	; 0x3a
 800acfe:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	223b      	movs	r2, #59	; 0x3b
 800ad06:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	223c      	movs	r2, #60	; 0x3c
 800ad0e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	223d      	movs	r2, #61	; 0x3d
 800ad16:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	223e      	movs	r2, #62	; 0x3e
 800ad1e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	223f      	movs	r2, #63	; 0x3f
 800ad26:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2240      	movs	r2, #64	; 0x40
 800ad2e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2241      	movs	r2, #65	; 0x41
 800ad36:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2242      	movs	r2, #66	; 0x42
 800ad3e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2243      	movs	r2, #67	; 0x43
 800ad46:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2244      	movs	r2, #68	; 0x44
 800ad4e:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2245      	movs	r2, #69	; 0x45
 800ad56:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2248      	movs	r2, #72	; 0x48
 800ad5e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2235      	movs	r2, #53	; 0x35
 800ad66:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	221e      	movs	r2, #30
 800ad6e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	221f      	movs	r2, #31
 800ad76:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2221      	movs	r2, #33	; 0x21
 800ad86:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2222      	movs	r2, #34	; 0x22
 800ad8e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2223      	movs	r2, #35	; 0x23
 800ad96:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2224      	movs	r2, #36	; 0x24
 800ad9e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2225      	movs	r2, #37	; 0x25
 800ada6:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2226      	movs	r2, #38	; 0x26
 800adae:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2227      	movs	r2, #39	; 0x27
 800adb6:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	222d      	movs	r2, #45	; 0x2d
 800adbe:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	222e      	movs	r2, #46	; 0x2e
 800adc6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	222a      	movs	r2, #42	; 0x2a
 800adce:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2249      	movs	r2, #73	; 0x49
 800add6:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	222b      	movs	r2, #43	; 0x2b
 800adde:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2214      	movs	r2, #20
 800ade6:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	221a      	movs	r2, #26
 800adee:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2208      	movs	r2, #8
 800adf6:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2215      	movs	r2, #21
 800adfe:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2217      	movs	r2, #23
 800ae06:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	221c      	movs	r2, #28
 800ae0e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2218      	movs	r2, #24
 800ae16:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	220c      	movs	r2, #12
 800ae1e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2212      	movs	r2, #18
 800ae26:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2213      	movs	r2, #19
 800ae2e:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	222f      	movs	r2, #47	; 0x2f
 800ae36:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2230      	movs	r2, #48	; 0x30
 800ae3e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2231      	movs	r2, #49	; 0x31
 800ae46:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	224c      	movs	r2, #76	; 0x4c
 800ae4e:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2239      	movs	r2, #57	; 0x39
 800ae56:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2204      	movs	r2, #4
 800ae5e:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2216      	movs	r2, #22
 800ae66:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2207      	movs	r2, #7
 800ae6e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2209      	movs	r2, #9
 800ae76:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	220a      	movs	r2, #10
 800ae7e:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	220b      	movs	r2, #11
 800ae86:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	220d      	movs	r2, #13
 800ae8e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	220e      	movs	r2, #14
 800ae96:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	220f      	movs	r2, #15
 800ae9e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2233      	movs	r2, #51	; 0x33
 800aea6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2234      	movs	r2, #52	; 0x34
 800aeae:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2228      	movs	r2, #40	; 0x28
 800aeb6:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	224b      	movs	r2, #75	; 0x4b
 800aebe:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f64f 72f9 	movw	r2, #65529	; 0xfff9
 800aec8:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	221d      	movs	r2, #29
 800aed0:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	221b      	movs	r2, #27
 800aed8:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2206      	movs	r2, #6
 800aee0:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2219      	movs	r2, #25
 800aee8:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2205      	movs	r2, #5
 800aef0:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2211      	movs	r2, #17
 800aef8:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2210      	movs	r2, #16
 800af00:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2236      	movs	r2, #54	; 0x36
 800af08:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2237      	movs	r2, #55	; 0x37
 800af10:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2238      	movs	r2, #56	; 0x38
 800af18:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800af22:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2252      	movs	r2, #82	; 0x52
 800af2a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	224e      	movs	r2, #78	; 0x4e
 800af32:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 800af3c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800af46:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800af50:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	222c      	movs	r2, #44	; 0x2c
 800af58:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af62:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af6c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af76:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2250      	movs	r2, #80	; 0x50
 800af7e:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2251      	movs	r2, #81	; 0x51
 800af86:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	224f      	movs	r2, #79	; 0x4f
 800af8e:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2259      	movs	r2, #89	; 0x59
 800af96:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	225a      	movs	r2, #90	; 0x5a
 800af9e:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	225b      	movs	r2, #91	; 0x5b
 800afa6:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	225c      	movs	r2, #92	; 0x5c
 800afae:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	225d      	movs	r2, #93	; 0x5d
 800afb6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	225e      	movs	r2, #94	; 0x5e
 800afbe:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2229      	movs	r2, #41	; 0x29
 800afc6:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	223a      	movs	r2, #58	; 0x3a
 800afce:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	223b      	movs	r2, #59	; 0x3b
 800afd6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	223c      	movs	r2, #60	; 0x3c
 800afde:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	223d      	movs	r2, #61	; 0x3d
 800afe6:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	223e      	movs	r2, #62	; 0x3e
 800afee:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	223f      	movs	r2, #63	; 0x3f
 800aff6:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2240      	movs	r2, #64	; 0x40
 800affe:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2241      	movs	r2, #65	; 0x41
 800b006:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2242      	movs	r2, #66	; 0x42
 800b00e:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2243      	movs	r2, #67	; 0x43
 800b016:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2244      	movs	r2, #68	; 0x44
 800b01e:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2245      	movs	r2, #69	; 0x45
 800b026:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2248      	movs	r2, #72	; 0x48
 800b02e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2235      	movs	r2, #53	; 0x35
 800b036:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	221e      	movs	r2, #30
 800b03e:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	221f      	movs	r2, #31
 800b046:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2221      	movs	r2, #33	; 0x21
 800b056:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2222      	movs	r2, #34	; 0x22
 800b05e:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2223      	movs	r2, #35	; 0x23
 800b066:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2224      	movs	r2, #36	; 0x24
 800b06e:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2225      	movs	r2, #37	; 0x25
 800b076:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2226      	movs	r2, #38	; 0x26
 800b07e:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2227      	movs	r2, #39	; 0x27
 800b086:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	222d      	movs	r2, #45	; 0x2d
 800b08e:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	222e      	movs	r2, #46	; 0x2e
 800b096:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	222a      	movs	r2, #42	; 0x2a
 800b09e:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2249      	movs	r2, #73	; 0x49
 800b0a6:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	222b      	movs	r2, #43	; 0x2b
 800b0ae:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2214      	movs	r2, #20
 800b0b6:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	221a      	movs	r2, #26
 800b0be:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2208      	movs	r2, #8
 800b0c6:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2215      	movs	r2, #21
 800b0ce:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2217      	movs	r2, #23
 800b0d6:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	221c      	movs	r2, #28
 800b0de:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2218      	movs	r2, #24
 800b0e6:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	220c      	movs	r2, #12
 800b0ee:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2212      	movs	r2, #18
 800b0f6:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2213      	movs	r2, #19
 800b0fe:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	222f      	movs	r2, #47	; 0x2f
 800b106:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2230      	movs	r2, #48	; 0x30
 800b10e:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2231      	movs	r2, #49	; 0x31
 800b116:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	224c      	movs	r2, #76	; 0x4c
 800b11e:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2239      	movs	r2, #57	; 0x39
 800b126:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2204      	movs	r2, #4
 800b12e:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2216      	movs	r2, #22
 800b136:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2207      	movs	r2, #7
 800b13e:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2209      	movs	r2, #9
 800b146:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	220a      	movs	r2, #10
 800b14e:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	220b      	movs	r2, #11
 800b156:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	220d      	movs	r2, #13
 800b15e:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	220e      	movs	r2, #14
 800b166:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	220f      	movs	r2, #15
 800b16e:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2233      	movs	r2, #51	; 0x33
 800b176:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2234      	movs	r2, #52	; 0x34
 800b17e:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2228      	movs	r2, #40	; 0x28
 800b186:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	224b      	movs	r2, #75	; 0x4b
 800b18e:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f64f 72f9 	movw	r2, #65529	; 0xfff9
 800b198:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	221d      	movs	r2, #29
 800b1a0:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	221b      	movs	r2, #27
 800b1a8:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2206      	movs	r2, #6
 800b1b0:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2219      	movs	r2, #25
 800b1b8:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2205      	movs	r2, #5
 800b1c0:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2211      	movs	r2, #17
 800b1c8:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2210      	movs	r2, #16
 800b1d0:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2236      	movs	r2, #54	; 0x36
 800b1d8:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2237      	movs	r2, #55	; 0x37
 800b1e0:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2238      	movs	r2, #56	; 0x38
 800b1e8:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800b1f2:	f8a3 21ea 	strh.w	r2, [r3, #490]	; 0x1ea
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2204      	movs	r2, #4
 800b1fa:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	224e      	movs	r2, #78	; 0x4e
 800b202:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 800b20c:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800b216:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800b220:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	222c      	movs	r2, #44	; 0x2c
 800b228:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b232:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b23c:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b246:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2250      	movs	r2, #80	; 0x50
 800b24e:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2206      	movs	r2, #6
 800b256:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	224f      	movs	r2, #79	; 0x4f
 800b25e:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2259      	movs	r2, #89	; 0x59
 800b266:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	225a      	movs	r2, #90	; 0x5a
 800b26e:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	225b      	movs	r2, #91	; 0x5b
 800b276:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	225c      	movs	r2, #92	; 0x5c
 800b27e:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	225d      	movs	r2, #93	; 0x5d
 800b286:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	225e      	movs	r2, #94	; 0x5e
 800b28e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f203 3371 	addw	r3, r3, #881	; 0x371
 800b2a0:	2232      	movs	r2, #50	; 0x32
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f9db 	bl	800b660 <memset>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	605a      	str	r2, [r3, #4]
 800b2be:	609a      	str	r2, [r3, #8]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	605a      	str	r2, [r3, #4]
 800b2cc:	609a      	str	r2, [r3, #8]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	f8c3 2007 	str.w	r2, [r3, #7]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f203 33cf 	addw	r3, r3, #975	; 0x3cf
 800b2e4:	f44f 621c 	mov.w	r2, #2496	; 0x9c0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 f9b8 	bl	800b660 <memset>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f603 538f 	addw	r3, r3, #3471	; 0xd8f
 800b2f6:	2240      	movs	r2, #64	; 0x40
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 f9b0 	bl	800b660 <memset>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2202      	movs	r2, #2
 800b304:	f883 2dcf 	strb.w	r2, [r3, #3535]	; 0xdcf
    {
        scanBuffer = &spiBuffer[1];
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f203 32a9 	addw	r2, r3, #937	; 0x3a9
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4

        // Enable 74HC165 clock
        HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800b314:	2200      	movs	r2, #0
 800b316:	2108      	movs	r1, #8
 800b318:	4803      	ldr	r0, [pc, #12]	; (800b328 <_ZN10HWKeyboardC1EP19__SPI_HandleTypeDef+0x8c8>)
 800b31a:	f7f6 ff25 	bl	8002168 <HAL_GPIO_WritePin>
    }
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40010c00 	.word	0x40010c00

0800b32c <Main>:
HWKeyboard keyboard(&hspi1);


/* Main Entry ----------------------------------------------------------------*/
void Main()
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
    EEPROM eeprom;
 800b332:	4b33      	ldr	r3, [pc, #204]	; (800b400 <Main+0xd4>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	603b      	str	r3, [r7, #0]
    eeprom.Pull(0, config);
 800b338:	463b      	mov	r3, r7
 800b33a:	4a32      	ldr	r2, [pc, #200]	; (800b404 <Main+0xd8>)
 800b33c:	2100      	movs	r1, #0
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f8a2 	bl	800b488 <_ZN6EEPROM4PullI16KeyboardConfig_tEERT_iS3_>
    if (config.configStatus != CONFIG_OK)
 800b344:	4b2f      	ldr	r3, [pc, #188]	; (800b404 <Main+0xd8>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d01c      	beq.n	800b386 <Main+0x5a>
    {
        // Use default settings
        config = KeyboardConfig_t{
 800b34c:	4b2d      	ldr	r3, [pc, #180]	; (800b404 <Main+0xd8>)
 800b34e:	4618      	mov	r0, r3
 800b350:	2390      	movs	r3, #144	; 0x90
 800b352:	461a      	mov	r2, r3
 800b354:	2100      	movs	r1, #0
 800b356:	f000 f983 	bl	800b660 <memset>
 800b35a:	4b2a      	ldr	r3, [pc, #168]	; (800b404 <Main+0xd8>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	701a      	strb	r2, [r3, #0]
 800b360:	4928      	ldr	r1, [pc, #160]	; (800b404 <Main+0xd8>)
 800b362:	f04f 027b 	mov.w	r2, #123	; 0x7b
 800b366:	f04f 0300 	mov.w	r3, #0
 800b36a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            .configStatus = CONFIG_OK,
            .serialNum=123,
            .keyMap={}
        };
        memset(config.keyMap, -1, 128);
 800b36e:	2280      	movs	r2, #128	; 0x80
 800b370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b374:	4824      	ldr	r0, [pc, #144]	; (800b408 <Main+0xdc>)
 800b376:	f000 f973 	bl	800b660 <memset>
        eeprom.Push(0, config);
 800b37a:	463b      	mov	r3, r7
 800b37c:	4a21      	ldr	r2, [pc, #132]	; (800b404 <Main+0xd8>)
 800b37e:	2100      	movs	r1, #0
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f8af 	bl	800b4e4 <_ZN6EEPROM4PushI16KeyboardConfig_tEERKT_iS4_>
    }

    // Keyboard Report Start
    HAL_TIM_Base_Start_IT(&htim4);
 800b386:	4821      	ldr	r0, [pc, #132]	; (800b40c <Main+0xe0>)
 800b388:	f7f9 fcda 	bl	8004d40 <HAL_TIM_Base_Start_IT>
    {
        /*---- This is a demo RGB effect ----*/
        static uint32_t t = 1;
        static bool fadeDir = true;

        fadeDir ? t++ : t--;
 800b38c:	4b20      	ldr	r3, [pc, #128]	; (800b410 <Main+0xe4>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <Main+0x74>
 800b394:	4b1f      	ldr	r3, [pc, #124]	; (800b414 <Main+0xe8>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	4a1e      	ldr	r2, [pc, #120]	; (800b414 <Main+0xe8>)
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	e004      	b.n	800b3aa <Main+0x7e>
 800b3a0:	4b1c      	ldr	r3, [pc, #112]	; (800b414 <Main+0xe8>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	4a1b      	ldr	r2, [pc, #108]	; (800b414 <Main+0xe8>)
 800b3a8:	6013      	str	r3, [r2, #0]
        if (t > 250) fadeDir = false;
 800b3aa:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <Main+0xe8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2bfa      	cmp	r3, #250	; 0xfa
 800b3b0:	d903      	bls.n	800b3ba <Main+0x8e>
 800b3b2:	4b17      	ldr	r3, [pc, #92]	; (800b410 <Main+0xe4>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	e006      	b.n	800b3c8 <Main+0x9c>
        else if (t < 1) fadeDir = true;
 800b3ba:	4b16      	ldr	r3, [pc, #88]	; (800b414 <Main+0xe8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d102      	bne.n	800b3c8 <Main+0x9c>
 800b3c2:	4b13      	ldr	r3, [pc, #76]	; (800b410 <Main+0xe4>)
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	701a      	strb	r2, [r3, #0]

        for (uint8_t i = 0; i < HWKeyboard::LED_NUMBER; i++)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	71fb      	strb	r3, [r7, #7]
 800b3cc:	79fb      	ldrb	r3, [r7, #7]
 800b3ce:	2b67      	cmp	r3, #103	; 0x67
 800b3d0:	d811      	bhi.n	800b3f6 <Main+0xca>
            keyboard.SetRgbBuffer(i, HWKeyboard::Color_t{(uint8_t) t, 50, 0});
 800b3d2:	4b10      	ldr	r3, [pc, #64]	; (800b414 <Main+0xe8>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	713b      	strb	r3, [r7, #4]
 800b3da:	2332      	movs	r3, #50	; 0x32
 800b3dc:	717b      	strb	r3, [r7, #5]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	71bb      	strb	r3, [r7, #6]
 800b3e2:	79fb      	ldrb	r3, [r7, #7]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	480b      	ldr	r0, [pc, #44]	; (800b418 <Main+0xec>)
 800b3ea:	f7fd fba7 	bl	8008b3c <_ZN10HWKeyboard12SetRgbBufferEhNS_7Color_tE>
        for (uint8_t i = 0; i < HWKeyboard::LED_NUMBER; i++)
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	71fb      	strb	r3, [r7, #7]
 800b3f4:	e7ea      	b.n	800b3cc <Main+0xa0>
        /*-----------------------------------*/

        // Send RGB buffers to LEDs
        keyboard.SyncLights();
 800b3f6:	4808      	ldr	r0, [pc, #32]	; (800b418 <Main+0xec>)
 800b3f8:	f7fd fc0c 	bl	8008c14 <_ZN10HWKeyboard10SyncLightsEv>
    }
 800b3fc:	e7c6      	b.n	800b38c <Main+0x60>
 800b3fe:	bf00      	nop
 800b400:	0800e0ec 	.word	0x0800e0ec
 800b404:	20001158 	.word	0x20001158
 800b408:	20001168 	.word	0x20001168
 800b40c:	20000498 	.word	0x20000498
 800b410:	2000016c 	.word	0x2000016c
 800b414:	20000168 	.word	0x20000168
 800b418:	200011e8 	.word	0x200011e8

0800b41c <OnTimerCallback>:
}

/* Event Callbacks -----------------------------------------------------------*/
extern "C" void OnTimerCallback() // 1000Hz callback
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
    keyboard.ScanKeyStates();  // Around 40us use 4MHz SPI clk
 800b420:	480f      	ldr	r0, [pc, #60]	; (800b460 <OnTimerCallback+0x44>)
 800b422:	f7fd f9bf 	bl	80087a4 <_ZN10HWKeyboard13ScanKeyStatesEv>
    keyboard.ApplyDebounceFilter(100);
 800b426:	2164      	movs	r1, #100	; 0x64
 800b428:	480d      	ldr	r0, [pc, #52]	; (800b460 <OnTimerCallback+0x44>)
 800b42a:	f7fd fa33 	bl	8008894 <_ZN10HWKeyboard19ApplyDebounceFilterEm>
    keyboard.Remap(keyboard.FnPressed() ? 2 : 1);  // When Fn pressed use layer-2
 800b42e:	480c      	ldr	r0, [pc, #48]	; (800b460 <OnTimerCallback+0x44>)
 800b430:	f7fd fb71 	bl	8008b16 <_ZN10HWKeyboard9FnPressedEv>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <OnTimerCallback+0x22>
 800b43a:	2302      	movs	r3, #2
 800b43c:	e000      	b.n	800b440 <OnTimerCallback+0x24>
 800b43e:	2301      	movs	r3, #1
 800b440:	4619      	mov	r1, r3
 800b442:	4807      	ldr	r0, [pc, #28]	; (800b460 <OnTimerCallback+0x44>)
 800b444:	f7fd fa66 	bl	8008914 <_ZN10HWKeyboard5RemapEh>

    // Report HID key states
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 800b448:	2101      	movs	r1, #1
 800b44a:	4805      	ldr	r0, [pc, #20]	; (800b460 <OnTimerCallback+0x44>)
 800b44c:	f7fd fc14 	bl	8008c78 <_ZN10HWKeyboard18GetHidReportBufferEh>
 800b450:	4603      	mov	r3, r0
 800b452:	2211      	movs	r2, #17
 800b454:	4619      	mov	r1, r3
 800b456:	4803      	ldr	r0, [pc, #12]	; (800b464 <OnTimerCallback+0x48>)
 800b458:	f7fd fda4 	bl	8008fa4 <USBD_CUSTOM_HID_SendReport>
                               keyboard.GetHidReportBuffer(1),
                               HWKeyboard::KEY_REPORT_SIZE);
}
 800b45c:	bf00      	nop
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	200011e8 	.word	0x200011e8
 800b464:	20000950 	.word	0x20000950

0800b468 <HAL_SPI_TxCpltCallback>:


extern "C"
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
    keyboard.isRgbTxBusy = false;
 800b470:	4b04      	ldr	r3, [pc, #16]	; (800b484 <HAL_SPI_TxCpltCallback+0x1c>)
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bc80      	pop	{r7}
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	200011e8 	.word	0x200011e8

0800b488 <_ZN6EEPROM4PullI16KeyboardConfig_tEERT_iS3_>:
    T &Pull(int _offset, T &_t)
 800b488:	b590      	push	{r4, r7, lr}
 800b48a:	b089      	sub	sp, #36	; 0x24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
        if (!isInitialized)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	785b      	ldrb	r3, [r3, #1]
 800b498:	f083 0301 	eor.w	r3, r3, #1
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <_ZN6EEPROM4PullI16KeyboardConfig_tEERT_iS3_+0x20>
            init();
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f7ff face 	bl	800aa44 <_ZN6EEPROM4initEv>
        uint16_t offset = _offset;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	83fb      	strh	r3, [r7, #30]
        auto* _pointer = (uint8_t*) &_t;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	61bb      	str	r3, [r7, #24]
        for (uint16_t count = sizeof(T); count; --count, ++offset)
 800b4b0:	2390      	movs	r3, #144	; 0x90
 800b4b2:	82fb      	strh	r3, [r7, #22]
 800b4b4:	8afb      	ldrh	r3, [r7, #22]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00f      	beq.n	800b4da <_ZN6EEPROM4PullI16KeyboardConfig_tEERT_iS3_+0x52>
            *_pointer++ = EEPROMReadBufferedByte(offset);
 800b4ba:	8bfa      	ldrh	r2, [r7, #30]
 800b4bc:	69bc      	ldr	r4, [r7, #24]
 800b4be:	1c63      	adds	r3, r4, #1
 800b4c0:	61bb      	str	r3, [r7, #24]
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	f7fd f816 	bl	80084f4 <EEPROMReadBufferedByte>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	7023      	strb	r3, [r4, #0]
        for (uint16_t count = sizeof(T); count; --count, ++offset)
 800b4cc:	8afb      	ldrh	r3, [r7, #22]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	82fb      	strh	r3, [r7, #22]
 800b4d2:	8bfb      	ldrh	r3, [r7, #30]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	83fb      	strh	r3, [r7, #30]
 800b4d8:	e7ec      	b.n	800b4b4 <_ZN6EEPROM4PullI16KeyboardConfig_tEERT_iS3_+0x2c>
        return _t;
 800b4da:	687b      	ldr	r3, [r7, #4]
    }
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3724      	adds	r7, #36	; 0x24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd90      	pop	{r4, r7, pc}

0800b4e4 <_ZN6EEPROM4PushI16KeyboardConfig_tEERKT_iS4_>:
    const T &Push(int _idx, const T &_t)
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b088      	sub	sp, #32
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
        if (!isInitialized) init();
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	785b      	ldrb	r3, [r3, #1]
 800b4f4:	f083 0301 	eor.w	r3, r3, #1
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d002      	beq.n	800b504 <_ZN6EEPROM4PushI16KeyboardConfig_tEERKT_iS4_+0x20>
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff faa0 	bl	800aa44 <_ZN6EEPROM4initEv>
        uint16_t offset = _idx;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	83fb      	strh	r3, [r7, #30]
        const auto* _pointer = (const uint8_t*) &_t;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	61bb      	str	r3, [r7, #24]
        for (uint16_t count = sizeof(T); count; --count, ++offset)
 800b50c:	2390      	movs	r3, #144	; 0x90
 800b50e:	82fb      	strh	r3, [r7, #22]
 800b510:	8afb      	ldrh	r3, [r7, #22]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00e      	beq.n	800b534 <_ZN6EEPROM4PushI16KeyboardConfig_tEERKT_iS4_+0x50>
            EEPROMWriteBufferedByte(offset, *_pointer++);
 800b516:	8bf8      	ldrh	r0, [r7, #30]
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	61ba      	str	r2, [r7, #24]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	4619      	mov	r1, r3
 800b522:	f7fc fff7 	bl	8008514 <EEPROMWriteBufferedByte>
        for (uint16_t count = sizeof(T); count; --count, ++offset)
 800b526:	8afb      	ldrh	r3, [r7, #22]
 800b528:	3b01      	subs	r3, #1
 800b52a:	82fb      	strh	r3, [r7, #22]
 800b52c:	8bfb      	ldrh	r3, [r7, #30]
 800b52e:	3301      	adds	r3, #1
 800b530:	83fb      	strh	r3, [r7, #30]
 800b532:	e7ed      	b.n	800b510 <_ZN6EEPROM4PushI16KeyboardConfig_tEERKT_iS4_+0x2c>
        if (commitASAP)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	78db      	ldrb	r3, [r3, #3]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d008      	beq.n	800b54e <_ZN6EEPROM4PushI16KeyboardConfig_tEERKT_iS4_+0x6a>
            EEPROMBufferFlush();
 800b53c:	f7fd f80e 	bl	800855c <EEPROMBufferFlush>
            dirtyBuffer = false;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	709a      	strb	r2, [r3, #2]
            isValid = true;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
 800b54c:	e002      	b.n	800b554 <_ZN6EEPROM4PushI16KeyboardConfig_tEERKT_iS4_+0x70>
            dirtyBuffer = true;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2201      	movs	r2, #1
 800b552:	709a      	strb	r2, [r3, #2]
        return _t;
 800b554:	687b      	ldr	r3, [r7, #4]
    }
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <_Z41__static_initialization_and_destruction_0ii>:

extern "C"
void HID_RxCpltCallback(uint8_t* _data)
{

}
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d108      	bne.n	800b582 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b576:	4293      	cmp	r3, r2
 800b578:	d103      	bne.n	800b582 <_Z41__static_initialization_and_destruction_0ii+0x22>
HWKeyboard keyboard(&hspi1);
 800b57a:	4904      	ldr	r1, [pc, #16]	; (800b58c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800b57c:	4804      	ldr	r0, [pc, #16]	; (800b590 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800b57e:	f7ff fa6f 	bl	800aa60 <_ZN10HWKeyboardC1EP19__SPI_HandleTypeDef>
}
 800b582:	bf00      	nop
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	2000035c 	.word	0x2000035c
 800b590:	200011e8 	.word	0x200011e8

0800b594 <_GLOBAL__sub_I_config>:
 800b594:	b580      	push	{r7, lr}
 800b596:	af00      	add	r7, sp, #0
 800b598:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b59c:	2001      	movs	r0, #1
 800b59e:	f7ff ffdf 	bl	800b560 <_Z41__static_initialization_and_destruction_0ii>
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b5a4:	480c      	ldr	r0, [pc, #48]	; (800b5d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b5a6:	490d      	ldr	r1, [pc, #52]	; (800b5dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b5a8:	4a0d      	ldr	r2, [pc, #52]	; (800b5e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b5aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b5ac:	e002      	b.n	800b5b4 <LoopCopyDataInit>

0800b5ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b5ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b5b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b5b2:	3304      	adds	r3, #4

0800b5b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b5b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b5b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b5b8:	d3f9      	bcc.n	800b5ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b5ba:	4a0a      	ldr	r2, [pc, #40]	; (800b5e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b5bc:	4c0a      	ldr	r4, [pc, #40]	; (800b5e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b5be:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b5c0:	e001      	b.n	800b5c6 <LoopFillZerobss>

0800b5c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b5c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b5c4:	3204      	adds	r2, #4

0800b5c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b5c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b5c8:	d3fb      	bcc.n	800b5c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b5ca:	f7f5 fd85 	bl	80010d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b5ce:	f000 f815 	bl	800b5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b5d2:	f7f5 fad5 	bl	8000b80 <main>
  bx lr
 800b5d6:	4770      	bx	lr
  ldr r0, =_sdata
 800b5d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b5dc:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 800b5e0:	0800e4f0 	.word	0x0800e4f0
  ldr r2, =_sbss
 800b5e4:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 800b5e8:	20001fc8 	.word	0x20001fc8

0800b5ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b5ec:	e7fe      	b.n	800b5ec <ADC1_2_IRQHandler>
	...

0800b5f0 <__errno>:
 800b5f0:	4b01      	ldr	r3, [pc, #4]	; (800b5f8 <__errno+0x8>)
 800b5f2:	6818      	ldr	r0, [r3, #0]
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	20000170 	.word	0x20000170

0800b5fc <__libc_init_array>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	2600      	movs	r6, #0
 800b600:	4d0c      	ldr	r5, [pc, #48]	; (800b634 <__libc_init_array+0x38>)
 800b602:	4c0d      	ldr	r4, [pc, #52]	; (800b638 <__libc_init_array+0x3c>)
 800b604:	1b64      	subs	r4, r4, r5
 800b606:	10a4      	asrs	r4, r4, #2
 800b608:	42a6      	cmp	r6, r4
 800b60a:	d109      	bne.n	800b620 <__libc_init_array+0x24>
 800b60c:	f002 fd2e 	bl	800e06c <_init>
 800b610:	2600      	movs	r6, #0
 800b612:	4d0a      	ldr	r5, [pc, #40]	; (800b63c <__libc_init_array+0x40>)
 800b614:	4c0a      	ldr	r4, [pc, #40]	; (800b640 <__libc_init_array+0x44>)
 800b616:	1b64      	subs	r4, r4, r5
 800b618:	10a4      	asrs	r4, r4, #2
 800b61a:	42a6      	cmp	r6, r4
 800b61c:	d105      	bne.n	800b62a <__libc_init_array+0x2e>
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	f855 3b04 	ldr.w	r3, [r5], #4
 800b624:	4798      	blx	r3
 800b626:	3601      	adds	r6, #1
 800b628:	e7ee      	b.n	800b608 <__libc_init_array+0xc>
 800b62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b62e:	4798      	blx	r3
 800b630:	3601      	adds	r6, #1
 800b632:	e7f2      	b.n	800b61a <__libc_init_array+0x1e>
 800b634:	0800e4e4 	.word	0x0800e4e4
 800b638:	0800e4e4 	.word	0x0800e4e4
 800b63c:	0800e4e4 	.word	0x0800e4e4
 800b640:	0800e4ec 	.word	0x0800e4ec

0800b644 <memcpy>:
 800b644:	440a      	add	r2, r1
 800b646:	4291      	cmp	r1, r2
 800b648:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b64c:	d100      	bne.n	800b650 <memcpy+0xc>
 800b64e:	4770      	bx	lr
 800b650:	b510      	push	{r4, lr}
 800b652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b656:	4291      	cmp	r1, r2
 800b658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b65c:	d1f9      	bne.n	800b652 <memcpy+0xe>
 800b65e:	bd10      	pop	{r4, pc}

0800b660 <memset>:
 800b660:	4603      	mov	r3, r0
 800b662:	4402      	add	r2, r0
 800b664:	4293      	cmp	r3, r2
 800b666:	d100      	bne.n	800b66a <memset+0xa>
 800b668:	4770      	bx	lr
 800b66a:	f803 1b01 	strb.w	r1, [r3], #1
 800b66e:	e7f9      	b.n	800b664 <memset+0x4>

0800b670 <__cvt>:
 800b670:	2b00      	cmp	r3, #0
 800b672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b676:	461f      	mov	r7, r3
 800b678:	bfbb      	ittet	lt
 800b67a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b67e:	461f      	movlt	r7, r3
 800b680:	2300      	movge	r3, #0
 800b682:	232d      	movlt	r3, #45	; 0x2d
 800b684:	b088      	sub	sp, #32
 800b686:	4614      	mov	r4, r2
 800b688:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b68a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b68c:	7013      	strb	r3, [r2, #0]
 800b68e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b690:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b694:	f023 0820 	bic.w	r8, r3, #32
 800b698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b69c:	d005      	beq.n	800b6aa <__cvt+0x3a>
 800b69e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b6a2:	d100      	bne.n	800b6a6 <__cvt+0x36>
 800b6a4:	3501      	adds	r5, #1
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	e000      	b.n	800b6ac <__cvt+0x3c>
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	aa07      	add	r2, sp, #28
 800b6ae:	9204      	str	r2, [sp, #16]
 800b6b0:	aa06      	add	r2, sp, #24
 800b6b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b6b6:	e9cd 3500 	strd	r3, r5, [sp]
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	463b      	mov	r3, r7
 800b6be:	f000 fcc3 	bl	800c048 <_dtoa_r>
 800b6c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	d102      	bne.n	800b6d0 <__cvt+0x60>
 800b6ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6cc:	07db      	lsls	r3, r3, #31
 800b6ce:	d522      	bpl.n	800b716 <__cvt+0xa6>
 800b6d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6d4:	eb06 0905 	add.w	r9, r6, r5
 800b6d8:	d110      	bne.n	800b6fc <__cvt+0x8c>
 800b6da:	7833      	ldrb	r3, [r6, #0]
 800b6dc:	2b30      	cmp	r3, #48	; 0x30
 800b6de:	d10a      	bne.n	800b6f6 <__cvt+0x86>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	f7f5 f95e 	bl	80009a8 <__aeabi_dcmpeq>
 800b6ec:	b918      	cbnz	r0, 800b6f6 <__cvt+0x86>
 800b6ee:	f1c5 0501 	rsb	r5, r5, #1
 800b6f2:	f8ca 5000 	str.w	r5, [sl]
 800b6f6:	f8da 3000 	ldr.w	r3, [sl]
 800b6fa:	4499      	add	r9, r3
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2300      	movs	r3, #0
 800b700:	4620      	mov	r0, r4
 800b702:	4639      	mov	r1, r7
 800b704:	f7f5 f950 	bl	80009a8 <__aeabi_dcmpeq>
 800b708:	b108      	cbz	r0, 800b70e <__cvt+0x9e>
 800b70a:	f8cd 901c 	str.w	r9, [sp, #28]
 800b70e:	2230      	movs	r2, #48	; 0x30
 800b710:	9b07      	ldr	r3, [sp, #28]
 800b712:	454b      	cmp	r3, r9
 800b714:	d307      	bcc.n	800b726 <__cvt+0xb6>
 800b716:	4630      	mov	r0, r6
 800b718:	9b07      	ldr	r3, [sp, #28]
 800b71a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b71c:	1b9b      	subs	r3, r3, r6
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	b008      	add	sp, #32
 800b722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b726:	1c59      	adds	r1, r3, #1
 800b728:	9107      	str	r1, [sp, #28]
 800b72a:	701a      	strb	r2, [r3, #0]
 800b72c:	e7f0      	b.n	800b710 <__cvt+0xa0>

0800b72e <__exponent>:
 800b72e:	4603      	mov	r3, r0
 800b730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b732:	2900      	cmp	r1, #0
 800b734:	f803 2b02 	strb.w	r2, [r3], #2
 800b738:	bfb6      	itet	lt
 800b73a:	222d      	movlt	r2, #45	; 0x2d
 800b73c:	222b      	movge	r2, #43	; 0x2b
 800b73e:	4249      	neglt	r1, r1
 800b740:	2909      	cmp	r1, #9
 800b742:	7042      	strb	r2, [r0, #1]
 800b744:	dd2b      	ble.n	800b79e <__exponent+0x70>
 800b746:	f10d 0407 	add.w	r4, sp, #7
 800b74a:	46a4      	mov	ip, r4
 800b74c:	270a      	movs	r7, #10
 800b74e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b752:	460a      	mov	r2, r1
 800b754:	46a6      	mov	lr, r4
 800b756:	fb07 1516 	mls	r5, r7, r6, r1
 800b75a:	2a63      	cmp	r2, #99	; 0x63
 800b75c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b760:	4631      	mov	r1, r6
 800b762:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b766:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b76a:	dcf0      	bgt.n	800b74e <__exponent+0x20>
 800b76c:	3130      	adds	r1, #48	; 0x30
 800b76e:	f1ae 0502 	sub.w	r5, lr, #2
 800b772:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b776:	4629      	mov	r1, r5
 800b778:	1c44      	adds	r4, r0, #1
 800b77a:	4561      	cmp	r1, ip
 800b77c:	d30a      	bcc.n	800b794 <__exponent+0x66>
 800b77e:	f10d 0209 	add.w	r2, sp, #9
 800b782:	eba2 020e 	sub.w	r2, r2, lr
 800b786:	4565      	cmp	r5, ip
 800b788:	bf88      	it	hi
 800b78a:	2200      	movhi	r2, #0
 800b78c:	4413      	add	r3, r2
 800b78e:	1a18      	subs	r0, r3, r0
 800b790:	b003      	add	sp, #12
 800b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b794:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b798:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b79c:	e7ed      	b.n	800b77a <__exponent+0x4c>
 800b79e:	2330      	movs	r3, #48	; 0x30
 800b7a0:	3130      	adds	r1, #48	; 0x30
 800b7a2:	7083      	strb	r3, [r0, #2]
 800b7a4:	70c1      	strb	r1, [r0, #3]
 800b7a6:	1d03      	adds	r3, r0, #4
 800b7a8:	e7f1      	b.n	800b78e <__exponent+0x60>
	...

0800b7ac <_printf_float>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	b091      	sub	sp, #68	; 0x44
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	461f      	mov	r7, r3
 800b7bc:	4605      	mov	r5, r0
 800b7be:	f001 fbe5 	bl	800cf8c <_localeconv_r>
 800b7c2:	6803      	ldr	r3, [r0, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c8:	f7f4 fcc2 	bl	8000150 <strlen>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	930e      	str	r3, [sp, #56]	; 0x38
 800b7d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d4:	900a      	str	r0, [sp, #40]	; 0x28
 800b7d6:	3307      	adds	r3, #7
 800b7d8:	f023 0307 	bic.w	r3, r3, #7
 800b7dc:	f103 0208 	add.w	r2, r3, #8
 800b7e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b7e4:	f8d4 b000 	ldr.w	fp, [r4]
 800b7e8:	f8c8 2000 	str.w	r2, [r8]
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b7f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b7f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b7fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b802:	4640      	mov	r0, r8
 800b804:	4b9c      	ldr	r3, [pc, #624]	; (800ba78 <_printf_float+0x2cc>)
 800b806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b808:	f7f5 f900 	bl	8000a0c <__aeabi_dcmpun>
 800b80c:	bb70      	cbnz	r0, 800b86c <_printf_float+0xc0>
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b812:	4640      	mov	r0, r8
 800b814:	4b98      	ldr	r3, [pc, #608]	; (800ba78 <_printf_float+0x2cc>)
 800b816:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b818:	f7f5 f8da 	bl	80009d0 <__aeabi_dcmple>
 800b81c:	bb30      	cbnz	r0, 800b86c <_printf_float+0xc0>
 800b81e:	2200      	movs	r2, #0
 800b820:	2300      	movs	r3, #0
 800b822:	4640      	mov	r0, r8
 800b824:	4651      	mov	r1, sl
 800b826:	f7f5 f8c9 	bl	80009bc <__aeabi_dcmplt>
 800b82a:	b110      	cbz	r0, 800b832 <_printf_float+0x86>
 800b82c:	232d      	movs	r3, #45	; 0x2d
 800b82e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b832:	4b92      	ldr	r3, [pc, #584]	; (800ba7c <_printf_float+0x2d0>)
 800b834:	4892      	ldr	r0, [pc, #584]	; (800ba80 <_printf_float+0x2d4>)
 800b836:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b83a:	bf94      	ite	ls
 800b83c:	4698      	movls	r8, r3
 800b83e:	4680      	movhi	r8, r0
 800b840:	2303      	movs	r3, #3
 800b842:	f04f 0a00 	mov.w	sl, #0
 800b846:	6123      	str	r3, [r4, #16]
 800b848:	f02b 0304 	bic.w	r3, fp, #4
 800b84c:	6023      	str	r3, [r4, #0]
 800b84e:	4633      	mov	r3, r6
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
 800b854:	9700      	str	r7, [sp, #0]
 800b856:	aa0f      	add	r2, sp, #60	; 0x3c
 800b858:	f000 f9d4 	bl	800bc04 <_printf_common>
 800b85c:	3001      	adds	r0, #1
 800b85e:	f040 8090 	bne.w	800b982 <_printf_float+0x1d6>
 800b862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b866:	b011      	add	sp, #68	; 0x44
 800b868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86c:	4642      	mov	r2, r8
 800b86e:	4653      	mov	r3, sl
 800b870:	4640      	mov	r0, r8
 800b872:	4651      	mov	r1, sl
 800b874:	f7f5 f8ca 	bl	8000a0c <__aeabi_dcmpun>
 800b878:	b148      	cbz	r0, 800b88e <_printf_float+0xe2>
 800b87a:	f1ba 0f00 	cmp.w	sl, #0
 800b87e:	bfb8      	it	lt
 800b880:	232d      	movlt	r3, #45	; 0x2d
 800b882:	4880      	ldr	r0, [pc, #512]	; (800ba84 <_printf_float+0x2d8>)
 800b884:	bfb8      	it	lt
 800b886:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b88a:	4b7f      	ldr	r3, [pc, #508]	; (800ba88 <_printf_float+0x2dc>)
 800b88c:	e7d3      	b.n	800b836 <_printf_float+0x8a>
 800b88e:	6863      	ldr	r3, [r4, #4]
 800b890:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	d142      	bne.n	800b91e <_printf_float+0x172>
 800b898:	2306      	movs	r3, #6
 800b89a:	6063      	str	r3, [r4, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	9206      	str	r2, [sp, #24]
 800b8a0:	aa0e      	add	r2, sp, #56	; 0x38
 800b8a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b8a6:	aa0d      	add	r2, sp, #52	; 0x34
 800b8a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b8ac:	9203      	str	r2, [sp, #12]
 800b8ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b8b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b8b6:	6023      	str	r3, [r4, #0]
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	4642      	mov	r2, r8
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	4628      	mov	r0, r5
 800b8c0:	4653      	mov	r3, sl
 800b8c2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b8c4:	f7ff fed4 	bl	800b670 <__cvt>
 800b8c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8ca:	4680      	mov	r8, r0
 800b8cc:	2947      	cmp	r1, #71	; 0x47
 800b8ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8d0:	d108      	bne.n	800b8e4 <_printf_float+0x138>
 800b8d2:	1cc8      	adds	r0, r1, #3
 800b8d4:	db02      	blt.n	800b8dc <_printf_float+0x130>
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	dd40      	ble.n	800b95e <_printf_float+0x1b2>
 800b8dc:	f1a9 0902 	sub.w	r9, r9, #2
 800b8e0:	fa5f f989 	uxtb.w	r9, r9
 800b8e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b8e8:	d81f      	bhi.n	800b92a <_printf_float+0x17e>
 800b8ea:	464a      	mov	r2, r9
 800b8ec:	3901      	subs	r1, #1
 800b8ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b8f4:	f7ff ff1b 	bl	800b72e <__exponent>
 800b8f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8fa:	4682      	mov	sl, r0
 800b8fc:	1813      	adds	r3, r2, r0
 800b8fe:	2a01      	cmp	r2, #1
 800b900:	6123      	str	r3, [r4, #16]
 800b902:	dc02      	bgt.n	800b90a <_printf_float+0x15e>
 800b904:	6822      	ldr	r2, [r4, #0]
 800b906:	07d2      	lsls	r2, r2, #31
 800b908:	d501      	bpl.n	800b90e <_printf_float+0x162>
 800b90a:	3301      	adds	r3, #1
 800b90c:	6123      	str	r3, [r4, #16]
 800b90e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b912:	2b00      	cmp	r3, #0
 800b914:	d09b      	beq.n	800b84e <_printf_float+0xa2>
 800b916:	232d      	movs	r3, #45	; 0x2d
 800b918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91c:	e797      	b.n	800b84e <_printf_float+0xa2>
 800b91e:	2947      	cmp	r1, #71	; 0x47
 800b920:	d1bc      	bne.n	800b89c <_printf_float+0xf0>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1ba      	bne.n	800b89c <_printf_float+0xf0>
 800b926:	2301      	movs	r3, #1
 800b928:	e7b7      	b.n	800b89a <_printf_float+0xee>
 800b92a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b92e:	d118      	bne.n	800b962 <_printf_float+0x1b6>
 800b930:	2900      	cmp	r1, #0
 800b932:	6863      	ldr	r3, [r4, #4]
 800b934:	dd0b      	ble.n	800b94e <_printf_float+0x1a2>
 800b936:	6121      	str	r1, [r4, #16]
 800b938:	b913      	cbnz	r3, 800b940 <_printf_float+0x194>
 800b93a:	6822      	ldr	r2, [r4, #0]
 800b93c:	07d0      	lsls	r0, r2, #31
 800b93e:	d502      	bpl.n	800b946 <_printf_float+0x19a>
 800b940:	3301      	adds	r3, #1
 800b942:	440b      	add	r3, r1
 800b944:	6123      	str	r3, [r4, #16]
 800b946:	f04f 0a00 	mov.w	sl, #0
 800b94a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b94c:	e7df      	b.n	800b90e <_printf_float+0x162>
 800b94e:	b913      	cbnz	r3, 800b956 <_printf_float+0x1aa>
 800b950:	6822      	ldr	r2, [r4, #0]
 800b952:	07d2      	lsls	r2, r2, #31
 800b954:	d501      	bpl.n	800b95a <_printf_float+0x1ae>
 800b956:	3302      	adds	r3, #2
 800b958:	e7f4      	b.n	800b944 <_printf_float+0x198>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e7f2      	b.n	800b944 <_printf_float+0x198>
 800b95e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b964:	4299      	cmp	r1, r3
 800b966:	db05      	blt.n	800b974 <_printf_float+0x1c8>
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	6121      	str	r1, [r4, #16]
 800b96c:	07d8      	lsls	r0, r3, #31
 800b96e:	d5ea      	bpl.n	800b946 <_printf_float+0x19a>
 800b970:	1c4b      	adds	r3, r1, #1
 800b972:	e7e7      	b.n	800b944 <_printf_float+0x198>
 800b974:	2900      	cmp	r1, #0
 800b976:	bfcc      	ite	gt
 800b978:	2201      	movgt	r2, #1
 800b97a:	f1c1 0202 	rsble	r2, r1, #2
 800b97e:	4413      	add	r3, r2
 800b980:	e7e0      	b.n	800b944 <_printf_float+0x198>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	055a      	lsls	r2, r3, #21
 800b986:	d407      	bmi.n	800b998 <_printf_float+0x1ec>
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	4642      	mov	r2, r8
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	d12b      	bne.n	800b9ee <_printf_float+0x242>
 800b996:	e764      	b.n	800b862 <_printf_float+0xb6>
 800b998:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b99c:	f240 80dd 	bls.w	800bb5a <_printf_float+0x3ae>
 800b9a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f7f4 fffe 	bl	80009a8 <__aeabi_dcmpeq>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d033      	beq.n	800ba18 <_printf_float+0x26c>
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	4a35      	ldr	r2, [pc, #212]	; (800ba8c <_printf_float+0x2e0>)
 800b9b8:	47b8      	blx	r7
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	f43f af51 	beq.w	800b862 <_printf_float+0xb6>
 800b9c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	db02      	blt.n	800b9ce <_printf_float+0x222>
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	07d8      	lsls	r0, r3, #31
 800b9cc:	d50f      	bpl.n	800b9ee <_printf_float+0x242>
 800b9ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b8      	blx	r7
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f43f af42 	beq.w	800b862 <_printf_float+0xb6>
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	f104 091a 	add.w	r9, r4, #26
 800b9e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	4543      	cmp	r3, r8
 800b9ec:	dc09      	bgt.n	800ba02 <_printf_float+0x256>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	079b      	lsls	r3, r3, #30
 800b9f2:	f100 8102 	bmi.w	800bbfa <_printf_float+0x44e>
 800b9f6:	68e0      	ldr	r0, [r4, #12]
 800b9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9fa:	4298      	cmp	r0, r3
 800b9fc:	bfb8      	it	lt
 800b9fe:	4618      	movlt	r0, r3
 800ba00:	e731      	b.n	800b866 <_printf_float+0xba>
 800ba02:	2301      	movs	r3, #1
 800ba04:	464a      	mov	r2, r9
 800ba06:	4631      	mov	r1, r6
 800ba08:	4628      	mov	r0, r5
 800ba0a:	47b8      	blx	r7
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	f43f af28 	beq.w	800b862 <_printf_float+0xb6>
 800ba12:	f108 0801 	add.w	r8, r8, #1
 800ba16:	e7e6      	b.n	800b9e6 <_printf_float+0x23a>
 800ba18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	dc38      	bgt.n	800ba90 <_printf_float+0x2e4>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	4631      	mov	r1, r6
 800ba22:	4628      	mov	r0, r5
 800ba24:	4a19      	ldr	r2, [pc, #100]	; (800ba8c <_printf_float+0x2e0>)
 800ba26:	47b8      	blx	r7
 800ba28:	3001      	adds	r0, #1
 800ba2a:	f43f af1a 	beq.w	800b862 <_printf_float+0xb6>
 800ba2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba32:	4313      	orrs	r3, r2
 800ba34:	d102      	bne.n	800ba3c <_printf_float+0x290>
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	07d9      	lsls	r1, r3, #31
 800ba3a:	d5d8      	bpl.n	800b9ee <_printf_float+0x242>
 800ba3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba40:	4631      	mov	r1, r6
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b8      	blx	r7
 800ba46:	3001      	adds	r0, #1
 800ba48:	f43f af0b 	beq.w	800b862 <_printf_float+0xb6>
 800ba4c:	f04f 0900 	mov.w	r9, #0
 800ba50:	f104 0a1a 	add.w	sl, r4, #26
 800ba54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba56:	425b      	negs	r3, r3
 800ba58:	454b      	cmp	r3, r9
 800ba5a:	dc01      	bgt.n	800ba60 <_printf_float+0x2b4>
 800ba5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba5e:	e794      	b.n	800b98a <_printf_float+0x1de>
 800ba60:	2301      	movs	r3, #1
 800ba62:	4652      	mov	r2, sl
 800ba64:	4631      	mov	r1, r6
 800ba66:	4628      	mov	r0, r5
 800ba68:	47b8      	blx	r7
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	f43f aef9 	beq.w	800b862 <_printf_float+0xb6>
 800ba70:	f109 0901 	add.w	r9, r9, #1
 800ba74:	e7ee      	b.n	800ba54 <_printf_float+0x2a8>
 800ba76:	bf00      	nop
 800ba78:	7fefffff 	.word	0x7fefffff
 800ba7c:	0800e10c 	.word	0x0800e10c
 800ba80:	0800e110 	.word	0x0800e110
 800ba84:	0800e118 	.word	0x0800e118
 800ba88:	0800e114 	.word	0x0800e114
 800ba8c:	0800e11c 	.word	0x0800e11c
 800ba90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba94:	429a      	cmp	r2, r3
 800ba96:	bfa8      	it	ge
 800ba98:	461a      	movge	r2, r3
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	4691      	mov	r9, r2
 800ba9e:	dc37      	bgt.n	800bb10 <_printf_float+0x364>
 800baa0:	f04f 0b00 	mov.w	fp, #0
 800baa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baa8:	f104 021a 	add.w	r2, r4, #26
 800baac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bab0:	ebaa 0309 	sub.w	r3, sl, r9
 800bab4:	455b      	cmp	r3, fp
 800bab6:	dc33      	bgt.n	800bb20 <_printf_float+0x374>
 800bab8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800babc:	429a      	cmp	r2, r3
 800babe:	db3b      	blt.n	800bb38 <_printf_float+0x38c>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	07da      	lsls	r2, r3, #31
 800bac4:	d438      	bmi.n	800bb38 <_printf_float+0x38c>
 800bac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bac8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800baca:	eba3 020a 	sub.w	r2, r3, sl
 800bace:	eba3 0901 	sub.w	r9, r3, r1
 800bad2:	4591      	cmp	r9, r2
 800bad4:	bfa8      	it	ge
 800bad6:	4691      	movge	r9, r2
 800bad8:	f1b9 0f00 	cmp.w	r9, #0
 800badc:	dc34      	bgt.n	800bb48 <_printf_float+0x39c>
 800bade:	f04f 0800 	mov.w	r8, #0
 800bae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bae6:	f104 0a1a 	add.w	sl, r4, #26
 800baea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800baee:	1a9b      	subs	r3, r3, r2
 800baf0:	eba3 0309 	sub.w	r3, r3, r9
 800baf4:	4543      	cmp	r3, r8
 800baf6:	f77f af7a 	ble.w	800b9ee <_printf_float+0x242>
 800bafa:	2301      	movs	r3, #1
 800bafc:	4652      	mov	r2, sl
 800bafe:	4631      	mov	r1, r6
 800bb00:	4628      	mov	r0, r5
 800bb02:	47b8      	blx	r7
 800bb04:	3001      	adds	r0, #1
 800bb06:	f43f aeac 	beq.w	800b862 <_printf_float+0xb6>
 800bb0a:	f108 0801 	add.w	r8, r8, #1
 800bb0e:	e7ec      	b.n	800baea <_printf_float+0x33e>
 800bb10:	4613      	mov	r3, r2
 800bb12:	4631      	mov	r1, r6
 800bb14:	4642      	mov	r2, r8
 800bb16:	4628      	mov	r0, r5
 800bb18:	47b8      	blx	r7
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d1c0      	bne.n	800baa0 <_printf_float+0x2f4>
 800bb1e:	e6a0      	b.n	800b862 <_printf_float+0xb6>
 800bb20:	2301      	movs	r3, #1
 800bb22:	4631      	mov	r1, r6
 800bb24:	4628      	mov	r0, r5
 800bb26:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb28:	47b8      	blx	r7
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	f43f ae99 	beq.w	800b862 <_printf_float+0xb6>
 800bb30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb32:	f10b 0b01 	add.w	fp, fp, #1
 800bb36:	e7b9      	b.n	800baac <_printf_float+0x300>
 800bb38:	4631      	mov	r1, r6
 800bb3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb3e:	4628      	mov	r0, r5
 800bb40:	47b8      	blx	r7
 800bb42:	3001      	adds	r0, #1
 800bb44:	d1bf      	bne.n	800bac6 <_printf_float+0x31a>
 800bb46:	e68c      	b.n	800b862 <_printf_float+0xb6>
 800bb48:	464b      	mov	r3, r9
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	eb08 020a 	add.w	r2, r8, sl
 800bb52:	47b8      	blx	r7
 800bb54:	3001      	adds	r0, #1
 800bb56:	d1c2      	bne.n	800bade <_printf_float+0x332>
 800bb58:	e683      	b.n	800b862 <_printf_float+0xb6>
 800bb5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb5c:	2a01      	cmp	r2, #1
 800bb5e:	dc01      	bgt.n	800bb64 <_printf_float+0x3b8>
 800bb60:	07db      	lsls	r3, r3, #31
 800bb62:	d537      	bpl.n	800bbd4 <_printf_float+0x428>
 800bb64:	2301      	movs	r3, #1
 800bb66:	4642      	mov	r2, r8
 800bb68:	4631      	mov	r1, r6
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	47b8      	blx	r7
 800bb6e:	3001      	adds	r0, #1
 800bb70:	f43f ae77 	beq.w	800b862 <_printf_float+0xb6>
 800bb74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f ae6f 	beq.w	800b862 <_printf_float+0xb6>
 800bb84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f7f4 ff0c 	bl	80009a8 <__aeabi_dcmpeq>
 800bb90:	b9d8      	cbnz	r0, 800bbca <_printf_float+0x41e>
 800bb92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb94:	f108 0201 	add.w	r2, r8, #1
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	47b8      	blx	r7
 800bba0:	3001      	adds	r0, #1
 800bba2:	d10e      	bne.n	800bbc2 <_printf_float+0x416>
 800bba4:	e65d      	b.n	800b862 <_printf_float+0xb6>
 800bba6:	2301      	movs	r3, #1
 800bba8:	464a      	mov	r2, r9
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4628      	mov	r0, r5
 800bbae:	47b8      	blx	r7
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	f43f ae56 	beq.w	800b862 <_printf_float+0xb6>
 800bbb6:	f108 0801 	add.w	r8, r8, #1
 800bbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	4543      	cmp	r3, r8
 800bbc0:	dcf1      	bgt.n	800bba6 <_printf_float+0x3fa>
 800bbc2:	4653      	mov	r3, sl
 800bbc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbc8:	e6e0      	b.n	800b98c <_printf_float+0x1e0>
 800bbca:	f04f 0800 	mov.w	r8, #0
 800bbce:	f104 091a 	add.w	r9, r4, #26
 800bbd2:	e7f2      	b.n	800bbba <_printf_float+0x40e>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	4642      	mov	r2, r8
 800bbd8:	e7df      	b.n	800bb9a <_printf_float+0x3ee>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	464a      	mov	r2, r9
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b8      	blx	r7
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	f43f ae3c 	beq.w	800b862 <_printf_float+0xb6>
 800bbea:	f108 0801 	add.w	r8, r8, #1
 800bbee:	68e3      	ldr	r3, [r4, #12]
 800bbf0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bbf2:	1a5b      	subs	r3, r3, r1
 800bbf4:	4543      	cmp	r3, r8
 800bbf6:	dcf0      	bgt.n	800bbda <_printf_float+0x42e>
 800bbf8:	e6fd      	b.n	800b9f6 <_printf_float+0x24a>
 800bbfa:	f04f 0800 	mov.w	r8, #0
 800bbfe:	f104 0919 	add.w	r9, r4, #25
 800bc02:	e7f4      	b.n	800bbee <_printf_float+0x442>

0800bc04 <_printf_common>:
 800bc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	4616      	mov	r6, r2
 800bc0a:	4699      	mov	r9, r3
 800bc0c:	688a      	ldr	r2, [r1, #8]
 800bc0e:	690b      	ldr	r3, [r1, #16]
 800bc10:	4607      	mov	r7, r0
 800bc12:	4293      	cmp	r3, r2
 800bc14:	bfb8      	it	lt
 800bc16:	4613      	movlt	r3, r2
 800bc18:	6033      	str	r3, [r6, #0]
 800bc1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc1e:	460c      	mov	r4, r1
 800bc20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc24:	b10a      	cbz	r2, 800bc2a <_printf_common+0x26>
 800bc26:	3301      	adds	r3, #1
 800bc28:	6033      	str	r3, [r6, #0]
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	0699      	lsls	r1, r3, #26
 800bc2e:	bf42      	ittt	mi
 800bc30:	6833      	ldrmi	r3, [r6, #0]
 800bc32:	3302      	addmi	r3, #2
 800bc34:	6033      	strmi	r3, [r6, #0]
 800bc36:	6825      	ldr	r5, [r4, #0]
 800bc38:	f015 0506 	ands.w	r5, r5, #6
 800bc3c:	d106      	bne.n	800bc4c <_printf_common+0x48>
 800bc3e:	f104 0a19 	add.w	sl, r4, #25
 800bc42:	68e3      	ldr	r3, [r4, #12]
 800bc44:	6832      	ldr	r2, [r6, #0]
 800bc46:	1a9b      	subs	r3, r3, r2
 800bc48:	42ab      	cmp	r3, r5
 800bc4a:	dc28      	bgt.n	800bc9e <_printf_common+0x9a>
 800bc4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc50:	1e13      	subs	r3, r2, #0
 800bc52:	6822      	ldr	r2, [r4, #0]
 800bc54:	bf18      	it	ne
 800bc56:	2301      	movne	r3, #1
 800bc58:	0692      	lsls	r2, r2, #26
 800bc5a:	d42d      	bmi.n	800bcb8 <_printf_common+0xb4>
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	4638      	mov	r0, r7
 800bc60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc64:	47c0      	blx	r8
 800bc66:	3001      	adds	r0, #1
 800bc68:	d020      	beq.n	800bcac <_printf_common+0xa8>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	68e5      	ldr	r5, [r4, #12]
 800bc6e:	f003 0306 	and.w	r3, r3, #6
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	bf18      	it	ne
 800bc76:	2500      	movne	r5, #0
 800bc78:	6832      	ldr	r2, [r6, #0]
 800bc7a:	f04f 0600 	mov.w	r6, #0
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	bf08      	it	eq
 800bc82:	1aad      	subeq	r5, r5, r2
 800bc84:	6922      	ldr	r2, [r4, #16]
 800bc86:	bf08      	it	eq
 800bc88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	bfc4      	itt	gt
 800bc90:	1a9b      	subgt	r3, r3, r2
 800bc92:	18ed      	addgt	r5, r5, r3
 800bc94:	341a      	adds	r4, #26
 800bc96:	42b5      	cmp	r5, r6
 800bc98:	d11a      	bne.n	800bcd0 <_printf_common+0xcc>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	e008      	b.n	800bcb0 <_printf_common+0xac>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	4652      	mov	r2, sl
 800bca2:	4649      	mov	r1, r9
 800bca4:	4638      	mov	r0, r7
 800bca6:	47c0      	blx	r8
 800bca8:	3001      	adds	r0, #1
 800bcaa:	d103      	bne.n	800bcb4 <_printf_common+0xb0>
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb4:	3501      	adds	r5, #1
 800bcb6:	e7c4      	b.n	800bc42 <_printf_common+0x3e>
 800bcb8:	2030      	movs	r0, #48	; 0x30
 800bcba:	18e1      	adds	r1, r4, r3
 800bcbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcc6:	4422      	add	r2, r4
 800bcc8:	3302      	adds	r3, #2
 800bcca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcce:	e7c5      	b.n	800bc5c <_printf_common+0x58>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	4622      	mov	r2, r4
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	47c0      	blx	r8
 800bcda:	3001      	adds	r0, #1
 800bcdc:	d0e6      	beq.n	800bcac <_printf_common+0xa8>
 800bcde:	3601      	adds	r6, #1
 800bce0:	e7d9      	b.n	800bc96 <_printf_common+0x92>
	...

0800bce4 <_printf_i>:
 800bce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bce8:	7e0f      	ldrb	r7, [r1, #24]
 800bcea:	4691      	mov	r9, r2
 800bcec:	2f78      	cmp	r7, #120	; 0x78
 800bcee:	4680      	mov	r8, r0
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	469a      	mov	sl, r3
 800bcf4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcfa:	d807      	bhi.n	800bd0c <_printf_i+0x28>
 800bcfc:	2f62      	cmp	r7, #98	; 0x62
 800bcfe:	d80a      	bhi.n	800bd16 <_printf_i+0x32>
 800bd00:	2f00      	cmp	r7, #0
 800bd02:	f000 80d9 	beq.w	800beb8 <_printf_i+0x1d4>
 800bd06:	2f58      	cmp	r7, #88	; 0x58
 800bd08:	f000 80a4 	beq.w	800be54 <_printf_i+0x170>
 800bd0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd14:	e03a      	b.n	800bd8c <_printf_i+0xa8>
 800bd16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd1a:	2b15      	cmp	r3, #21
 800bd1c:	d8f6      	bhi.n	800bd0c <_printf_i+0x28>
 800bd1e:	a101      	add	r1, pc, #4	; (adr r1, 800bd24 <_printf_i+0x40>)
 800bd20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd24:	0800bd7d 	.word	0x0800bd7d
 800bd28:	0800bd91 	.word	0x0800bd91
 800bd2c:	0800bd0d 	.word	0x0800bd0d
 800bd30:	0800bd0d 	.word	0x0800bd0d
 800bd34:	0800bd0d 	.word	0x0800bd0d
 800bd38:	0800bd0d 	.word	0x0800bd0d
 800bd3c:	0800bd91 	.word	0x0800bd91
 800bd40:	0800bd0d 	.word	0x0800bd0d
 800bd44:	0800bd0d 	.word	0x0800bd0d
 800bd48:	0800bd0d 	.word	0x0800bd0d
 800bd4c:	0800bd0d 	.word	0x0800bd0d
 800bd50:	0800be9f 	.word	0x0800be9f
 800bd54:	0800bdc1 	.word	0x0800bdc1
 800bd58:	0800be81 	.word	0x0800be81
 800bd5c:	0800bd0d 	.word	0x0800bd0d
 800bd60:	0800bd0d 	.word	0x0800bd0d
 800bd64:	0800bec1 	.word	0x0800bec1
 800bd68:	0800bd0d 	.word	0x0800bd0d
 800bd6c:	0800bdc1 	.word	0x0800bdc1
 800bd70:	0800bd0d 	.word	0x0800bd0d
 800bd74:	0800bd0d 	.word	0x0800bd0d
 800bd78:	0800be89 	.word	0x0800be89
 800bd7c:	682b      	ldr	r3, [r5, #0]
 800bd7e:	1d1a      	adds	r2, r3, #4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	602a      	str	r2, [r5, #0]
 800bd84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e0a4      	b.n	800beda <_printf_i+0x1f6>
 800bd90:	6820      	ldr	r0, [r4, #0]
 800bd92:	6829      	ldr	r1, [r5, #0]
 800bd94:	0606      	lsls	r6, r0, #24
 800bd96:	f101 0304 	add.w	r3, r1, #4
 800bd9a:	d50a      	bpl.n	800bdb2 <_printf_i+0xce>
 800bd9c:	680e      	ldr	r6, [r1, #0]
 800bd9e:	602b      	str	r3, [r5, #0]
 800bda0:	2e00      	cmp	r6, #0
 800bda2:	da03      	bge.n	800bdac <_printf_i+0xc8>
 800bda4:	232d      	movs	r3, #45	; 0x2d
 800bda6:	4276      	negs	r6, r6
 800bda8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdac:	230a      	movs	r3, #10
 800bdae:	485e      	ldr	r0, [pc, #376]	; (800bf28 <_printf_i+0x244>)
 800bdb0:	e019      	b.n	800bde6 <_printf_i+0x102>
 800bdb2:	680e      	ldr	r6, [r1, #0]
 800bdb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdb8:	602b      	str	r3, [r5, #0]
 800bdba:	bf18      	it	ne
 800bdbc:	b236      	sxthne	r6, r6
 800bdbe:	e7ef      	b.n	800bda0 <_printf_i+0xbc>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	6820      	ldr	r0, [r4, #0]
 800bdc4:	1d19      	adds	r1, r3, #4
 800bdc6:	6029      	str	r1, [r5, #0]
 800bdc8:	0601      	lsls	r1, r0, #24
 800bdca:	d501      	bpl.n	800bdd0 <_printf_i+0xec>
 800bdcc:	681e      	ldr	r6, [r3, #0]
 800bdce:	e002      	b.n	800bdd6 <_printf_i+0xf2>
 800bdd0:	0646      	lsls	r6, r0, #25
 800bdd2:	d5fb      	bpl.n	800bdcc <_printf_i+0xe8>
 800bdd4:	881e      	ldrh	r6, [r3, #0]
 800bdd6:	2f6f      	cmp	r7, #111	; 0x6f
 800bdd8:	bf0c      	ite	eq
 800bdda:	2308      	moveq	r3, #8
 800bddc:	230a      	movne	r3, #10
 800bdde:	4852      	ldr	r0, [pc, #328]	; (800bf28 <_printf_i+0x244>)
 800bde0:	2100      	movs	r1, #0
 800bde2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bde6:	6865      	ldr	r5, [r4, #4]
 800bde8:	2d00      	cmp	r5, #0
 800bdea:	bfa8      	it	ge
 800bdec:	6821      	ldrge	r1, [r4, #0]
 800bdee:	60a5      	str	r5, [r4, #8]
 800bdf0:	bfa4      	itt	ge
 800bdf2:	f021 0104 	bicge.w	r1, r1, #4
 800bdf6:	6021      	strge	r1, [r4, #0]
 800bdf8:	b90e      	cbnz	r6, 800bdfe <_printf_i+0x11a>
 800bdfa:	2d00      	cmp	r5, #0
 800bdfc:	d04d      	beq.n	800be9a <_printf_i+0x1b6>
 800bdfe:	4615      	mov	r5, r2
 800be00:	fbb6 f1f3 	udiv	r1, r6, r3
 800be04:	fb03 6711 	mls	r7, r3, r1, r6
 800be08:	5dc7      	ldrb	r7, [r0, r7]
 800be0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be0e:	4637      	mov	r7, r6
 800be10:	42bb      	cmp	r3, r7
 800be12:	460e      	mov	r6, r1
 800be14:	d9f4      	bls.n	800be00 <_printf_i+0x11c>
 800be16:	2b08      	cmp	r3, #8
 800be18:	d10b      	bne.n	800be32 <_printf_i+0x14e>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	07de      	lsls	r6, r3, #31
 800be1e:	d508      	bpl.n	800be32 <_printf_i+0x14e>
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	6861      	ldr	r1, [r4, #4]
 800be24:	4299      	cmp	r1, r3
 800be26:	bfde      	ittt	le
 800be28:	2330      	movle	r3, #48	; 0x30
 800be2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be2e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800be32:	1b52      	subs	r2, r2, r5
 800be34:	6122      	str	r2, [r4, #16]
 800be36:	464b      	mov	r3, r9
 800be38:	4621      	mov	r1, r4
 800be3a:	4640      	mov	r0, r8
 800be3c:	f8cd a000 	str.w	sl, [sp]
 800be40:	aa03      	add	r2, sp, #12
 800be42:	f7ff fedf 	bl	800bc04 <_printf_common>
 800be46:	3001      	adds	r0, #1
 800be48:	d14c      	bne.n	800bee4 <_printf_i+0x200>
 800be4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be4e:	b004      	add	sp, #16
 800be50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be54:	4834      	ldr	r0, [pc, #208]	; (800bf28 <_printf_i+0x244>)
 800be56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be5a:	6829      	ldr	r1, [r5, #0]
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	f851 6b04 	ldr.w	r6, [r1], #4
 800be62:	6029      	str	r1, [r5, #0]
 800be64:	061d      	lsls	r5, r3, #24
 800be66:	d514      	bpl.n	800be92 <_printf_i+0x1ae>
 800be68:	07df      	lsls	r7, r3, #31
 800be6a:	bf44      	itt	mi
 800be6c:	f043 0320 	orrmi.w	r3, r3, #32
 800be70:	6023      	strmi	r3, [r4, #0]
 800be72:	b91e      	cbnz	r6, 800be7c <_printf_i+0x198>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	f023 0320 	bic.w	r3, r3, #32
 800be7a:	6023      	str	r3, [r4, #0]
 800be7c:	2310      	movs	r3, #16
 800be7e:	e7af      	b.n	800bde0 <_printf_i+0xfc>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	f043 0320 	orr.w	r3, r3, #32
 800be86:	6023      	str	r3, [r4, #0]
 800be88:	2378      	movs	r3, #120	; 0x78
 800be8a:	4828      	ldr	r0, [pc, #160]	; (800bf2c <_printf_i+0x248>)
 800be8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be90:	e7e3      	b.n	800be5a <_printf_i+0x176>
 800be92:	0659      	lsls	r1, r3, #25
 800be94:	bf48      	it	mi
 800be96:	b2b6      	uxthmi	r6, r6
 800be98:	e7e6      	b.n	800be68 <_printf_i+0x184>
 800be9a:	4615      	mov	r5, r2
 800be9c:	e7bb      	b.n	800be16 <_printf_i+0x132>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	6826      	ldr	r6, [r4, #0]
 800bea2:	1d18      	adds	r0, r3, #4
 800bea4:	6961      	ldr	r1, [r4, #20]
 800bea6:	6028      	str	r0, [r5, #0]
 800bea8:	0635      	lsls	r5, r6, #24
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	d501      	bpl.n	800beb2 <_printf_i+0x1ce>
 800beae:	6019      	str	r1, [r3, #0]
 800beb0:	e002      	b.n	800beb8 <_printf_i+0x1d4>
 800beb2:	0670      	lsls	r0, r6, #25
 800beb4:	d5fb      	bpl.n	800beae <_printf_i+0x1ca>
 800beb6:	8019      	strh	r1, [r3, #0]
 800beb8:	2300      	movs	r3, #0
 800beba:	4615      	mov	r5, r2
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	e7ba      	b.n	800be36 <_printf_i+0x152>
 800bec0:	682b      	ldr	r3, [r5, #0]
 800bec2:	2100      	movs	r1, #0
 800bec4:	1d1a      	adds	r2, r3, #4
 800bec6:	602a      	str	r2, [r5, #0]
 800bec8:	681d      	ldr	r5, [r3, #0]
 800beca:	6862      	ldr	r2, [r4, #4]
 800becc:	4628      	mov	r0, r5
 800bece:	f001 f8d1 	bl	800d074 <memchr>
 800bed2:	b108      	cbz	r0, 800bed8 <_printf_i+0x1f4>
 800bed4:	1b40      	subs	r0, r0, r5
 800bed6:	6060      	str	r0, [r4, #4]
 800bed8:	6863      	ldr	r3, [r4, #4]
 800beda:	6123      	str	r3, [r4, #16]
 800bedc:	2300      	movs	r3, #0
 800bede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bee2:	e7a8      	b.n	800be36 <_printf_i+0x152>
 800bee4:	462a      	mov	r2, r5
 800bee6:	4649      	mov	r1, r9
 800bee8:	4640      	mov	r0, r8
 800beea:	6923      	ldr	r3, [r4, #16]
 800beec:	47d0      	blx	sl
 800beee:	3001      	adds	r0, #1
 800bef0:	d0ab      	beq.n	800be4a <_printf_i+0x166>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	079b      	lsls	r3, r3, #30
 800bef6:	d413      	bmi.n	800bf20 <_printf_i+0x23c>
 800bef8:	68e0      	ldr	r0, [r4, #12]
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	4298      	cmp	r0, r3
 800befe:	bfb8      	it	lt
 800bf00:	4618      	movlt	r0, r3
 800bf02:	e7a4      	b.n	800be4e <_printf_i+0x16a>
 800bf04:	2301      	movs	r3, #1
 800bf06:	4632      	mov	r2, r6
 800bf08:	4649      	mov	r1, r9
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	47d0      	blx	sl
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d09b      	beq.n	800be4a <_printf_i+0x166>
 800bf12:	3501      	adds	r5, #1
 800bf14:	68e3      	ldr	r3, [r4, #12]
 800bf16:	9903      	ldr	r1, [sp, #12]
 800bf18:	1a5b      	subs	r3, r3, r1
 800bf1a:	42ab      	cmp	r3, r5
 800bf1c:	dcf2      	bgt.n	800bf04 <_printf_i+0x220>
 800bf1e:	e7eb      	b.n	800bef8 <_printf_i+0x214>
 800bf20:	2500      	movs	r5, #0
 800bf22:	f104 0619 	add.w	r6, r4, #25
 800bf26:	e7f5      	b.n	800bf14 <_printf_i+0x230>
 800bf28:	0800e11e 	.word	0x0800e11e
 800bf2c:	0800e12f 	.word	0x0800e12f

0800bf30 <quorem>:
 800bf30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	6903      	ldr	r3, [r0, #16]
 800bf36:	690c      	ldr	r4, [r1, #16]
 800bf38:	4607      	mov	r7, r0
 800bf3a:	42a3      	cmp	r3, r4
 800bf3c:	f2c0 8082 	blt.w	800c044 <quorem+0x114>
 800bf40:	3c01      	subs	r4, #1
 800bf42:	f100 0514 	add.w	r5, r0, #20
 800bf46:	f101 0814 	add.w	r8, r1, #20
 800bf4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf4e:	9301      	str	r3, [sp, #4]
 800bf50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf68:	d331      	bcc.n	800bfce <quorem+0x9e>
 800bf6a:	f04f 0e00 	mov.w	lr, #0
 800bf6e:	4640      	mov	r0, r8
 800bf70:	46ac      	mov	ip, r5
 800bf72:	46f2      	mov	sl, lr
 800bf74:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf78:	b293      	uxth	r3, r2
 800bf7a:	fb06 e303 	mla	r3, r6, r3, lr
 800bf7e:	0c12      	lsrs	r2, r2, #16
 800bf80:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	fb06 e202 	mla	r2, r6, r2, lr
 800bf8a:	ebaa 0303 	sub.w	r3, sl, r3
 800bf8e:	f8dc a000 	ldr.w	sl, [ip]
 800bf92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf96:	fa1f fa8a 	uxth.w	sl, sl
 800bf9a:	4453      	add	r3, sl
 800bf9c:	f8dc a000 	ldr.w	sl, [ip]
 800bfa0:	b292      	uxth	r2, r2
 800bfa2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bfa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfb0:	4581      	cmp	r9, r0
 800bfb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bfb6:	f84c 3b04 	str.w	r3, [ip], #4
 800bfba:	d2db      	bcs.n	800bf74 <quorem+0x44>
 800bfbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bfc0:	b92b      	cbnz	r3, 800bfce <quorem+0x9e>
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	3b04      	subs	r3, #4
 800bfc6:	429d      	cmp	r5, r3
 800bfc8:	461a      	mov	r2, r3
 800bfca:	d32f      	bcc.n	800c02c <quorem+0xfc>
 800bfcc:	613c      	str	r4, [r7, #16]
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f001 fadc 	bl	800d58c <__mcmp>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	db25      	blt.n	800c024 <quorem+0xf4>
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f04f 0c00 	mov.w	ip, #0
 800bfde:	3601      	adds	r6, #1
 800bfe0:	f858 1b04 	ldr.w	r1, [r8], #4
 800bfe4:	f8d0 e000 	ldr.w	lr, [r0]
 800bfe8:	b28b      	uxth	r3, r1
 800bfea:	ebac 0303 	sub.w	r3, ip, r3
 800bfee:	fa1f f28e 	uxth.w	r2, lr
 800bff2:	4413      	add	r3, r2
 800bff4:	0c0a      	lsrs	r2, r1, #16
 800bff6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bffe:	b29b      	uxth	r3, r3
 800c000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c004:	45c1      	cmp	r9, r8
 800c006:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c00a:	f840 3b04 	str.w	r3, [r0], #4
 800c00e:	d2e7      	bcs.n	800bfe0 <quorem+0xb0>
 800c010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c018:	b922      	cbnz	r2, 800c024 <quorem+0xf4>
 800c01a:	3b04      	subs	r3, #4
 800c01c:	429d      	cmp	r5, r3
 800c01e:	461a      	mov	r2, r3
 800c020:	d30a      	bcc.n	800c038 <quorem+0x108>
 800c022:	613c      	str	r4, [r7, #16]
 800c024:	4630      	mov	r0, r6
 800c026:	b003      	add	sp, #12
 800c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02c:	6812      	ldr	r2, [r2, #0]
 800c02e:	3b04      	subs	r3, #4
 800c030:	2a00      	cmp	r2, #0
 800c032:	d1cb      	bne.n	800bfcc <quorem+0x9c>
 800c034:	3c01      	subs	r4, #1
 800c036:	e7c6      	b.n	800bfc6 <quorem+0x96>
 800c038:	6812      	ldr	r2, [r2, #0]
 800c03a:	3b04      	subs	r3, #4
 800c03c:	2a00      	cmp	r2, #0
 800c03e:	d1f0      	bne.n	800c022 <quorem+0xf2>
 800c040:	3c01      	subs	r4, #1
 800c042:	e7eb      	b.n	800c01c <quorem+0xec>
 800c044:	2000      	movs	r0, #0
 800c046:	e7ee      	b.n	800c026 <quorem+0xf6>

0800c048 <_dtoa_r>:
 800c048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	4616      	mov	r6, r2
 800c04e:	461f      	mov	r7, r3
 800c050:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c052:	b099      	sub	sp, #100	; 0x64
 800c054:	4605      	mov	r5, r0
 800c056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c05a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c05e:	b974      	cbnz	r4, 800c07e <_dtoa_r+0x36>
 800c060:	2010      	movs	r0, #16
 800c062:	f000 ffff 	bl	800d064 <malloc>
 800c066:	4602      	mov	r2, r0
 800c068:	6268      	str	r0, [r5, #36]	; 0x24
 800c06a:	b920      	cbnz	r0, 800c076 <_dtoa_r+0x2e>
 800c06c:	21ea      	movs	r1, #234	; 0xea
 800c06e:	4ba8      	ldr	r3, [pc, #672]	; (800c310 <_dtoa_r+0x2c8>)
 800c070:	48a8      	ldr	r0, [pc, #672]	; (800c314 <_dtoa_r+0x2cc>)
 800c072:	f001 fce5 	bl	800da40 <__assert_func>
 800c076:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c07a:	6004      	str	r4, [r0, #0]
 800c07c:	60c4      	str	r4, [r0, #12]
 800c07e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c080:	6819      	ldr	r1, [r3, #0]
 800c082:	b151      	cbz	r1, 800c09a <_dtoa_r+0x52>
 800c084:	685a      	ldr	r2, [r3, #4]
 800c086:	2301      	movs	r3, #1
 800c088:	4093      	lsls	r3, r2
 800c08a:	604a      	str	r2, [r1, #4]
 800c08c:	608b      	str	r3, [r1, #8]
 800c08e:	4628      	mov	r0, r5
 800c090:	f001 f83e 	bl	800d110 <_Bfree>
 800c094:	2200      	movs	r2, #0
 800c096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	1e3b      	subs	r3, r7, #0
 800c09c:	bfaf      	iteee	ge
 800c09e:	2300      	movge	r3, #0
 800c0a0:	2201      	movlt	r2, #1
 800c0a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c0a6:	9305      	strlt	r3, [sp, #20]
 800c0a8:	bfa8      	it	ge
 800c0aa:	f8c8 3000 	strge.w	r3, [r8]
 800c0ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c0b2:	4b99      	ldr	r3, [pc, #612]	; (800c318 <_dtoa_r+0x2d0>)
 800c0b4:	bfb8      	it	lt
 800c0b6:	f8c8 2000 	strlt.w	r2, [r8]
 800c0ba:	ea33 0309 	bics.w	r3, r3, r9
 800c0be:	d119      	bne.n	800c0f4 <_dtoa_r+0xac>
 800c0c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c0c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0cc:	4333      	orrs	r3, r6
 800c0ce:	f000 857f 	beq.w	800cbd0 <_dtoa_r+0xb88>
 800c0d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c0d4:	b953      	cbnz	r3, 800c0ec <_dtoa_r+0xa4>
 800c0d6:	4b91      	ldr	r3, [pc, #580]	; (800c31c <_dtoa_r+0x2d4>)
 800c0d8:	e022      	b.n	800c120 <_dtoa_r+0xd8>
 800c0da:	4b91      	ldr	r3, [pc, #580]	; (800c320 <_dtoa_r+0x2d8>)
 800c0dc:	9303      	str	r3, [sp, #12]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	9803      	ldr	r0, [sp, #12]
 800c0e6:	b019      	add	sp, #100	; 0x64
 800c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ec:	4b8b      	ldr	r3, [pc, #556]	; (800c31c <_dtoa_r+0x2d4>)
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	3303      	adds	r3, #3
 800c0f2:	e7f5      	b.n	800c0e0 <_dtoa_r+0x98>
 800c0f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c0f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c100:	2200      	movs	r2, #0
 800c102:	2300      	movs	r3, #0
 800c104:	f7f4 fc50 	bl	80009a8 <__aeabi_dcmpeq>
 800c108:	4680      	mov	r8, r0
 800c10a:	b158      	cbz	r0, 800c124 <_dtoa_r+0xdc>
 800c10c:	2301      	movs	r3, #1
 800c10e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c110:	6013      	str	r3, [r2, #0]
 800c112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8558 	beq.w	800cbca <_dtoa_r+0xb82>
 800c11a:	4882      	ldr	r0, [pc, #520]	; (800c324 <_dtoa_r+0x2dc>)
 800c11c:	6018      	str	r0, [r3, #0]
 800c11e:	1e43      	subs	r3, r0, #1
 800c120:	9303      	str	r3, [sp, #12]
 800c122:	e7df      	b.n	800c0e4 <_dtoa_r+0x9c>
 800c124:	ab16      	add	r3, sp, #88	; 0x58
 800c126:	9301      	str	r3, [sp, #4]
 800c128:	ab17      	add	r3, sp, #92	; 0x5c
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	4628      	mov	r0, r5
 800c12e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c132:	f001 fad3 	bl	800d6dc <__d2b>
 800c136:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c13a:	4683      	mov	fp, r0
 800c13c:	2c00      	cmp	r4, #0
 800c13e:	d07f      	beq.n	800c240 <_dtoa_r+0x1f8>
 800c140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c146:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c14a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c14e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c152:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c156:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c15a:	2200      	movs	r2, #0
 800c15c:	4b72      	ldr	r3, [pc, #456]	; (800c328 <_dtoa_r+0x2e0>)
 800c15e:	f7f4 f803 	bl	8000168 <__aeabi_dsub>
 800c162:	a365      	add	r3, pc, #404	; (adr r3, 800c2f8 <_dtoa_r+0x2b0>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	f7f4 f9b6 	bl	80004d8 <__aeabi_dmul>
 800c16c:	a364      	add	r3, pc, #400	; (adr r3, 800c300 <_dtoa_r+0x2b8>)
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	f7f3 fffb 	bl	800016c <__adddf3>
 800c176:	4606      	mov	r6, r0
 800c178:	4620      	mov	r0, r4
 800c17a:	460f      	mov	r7, r1
 800c17c:	f7f4 f942 	bl	8000404 <__aeabi_i2d>
 800c180:	a361      	add	r3, pc, #388	; (adr r3, 800c308 <_dtoa_r+0x2c0>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	f7f4 f9a7 	bl	80004d8 <__aeabi_dmul>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	4630      	mov	r0, r6
 800c190:	4639      	mov	r1, r7
 800c192:	f7f3 ffeb 	bl	800016c <__adddf3>
 800c196:	4606      	mov	r6, r0
 800c198:	460f      	mov	r7, r1
 800c19a:	f7f4 fc4d 	bl	8000a38 <__aeabi_d2iz>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	4682      	mov	sl, r0
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 fc08 	bl	80009bc <__aeabi_dcmplt>
 800c1ac:	b148      	cbz	r0, 800c1c2 <_dtoa_r+0x17a>
 800c1ae:	4650      	mov	r0, sl
 800c1b0:	f7f4 f928 	bl	8000404 <__aeabi_i2d>
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	f7f4 fbf6 	bl	80009a8 <__aeabi_dcmpeq>
 800c1bc:	b908      	cbnz	r0, 800c1c2 <_dtoa_r+0x17a>
 800c1be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c1c2:	f1ba 0f16 	cmp.w	sl, #22
 800c1c6:	d858      	bhi.n	800c27a <_dtoa_r+0x232>
 800c1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1cc:	4b57      	ldr	r3, [pc, #348]	; (800c32c <_dtoa_r+0x2e4>)
 800c1ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	f7f4 fbf1 	bl	80009bc <__aeabi_dcmplt>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d04f      	beq.n	800c27e <_dtoa_r+0x236>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c1e8:	1b1c      	subs	r4, r3, r4
 800c1ea:	1e63      	subs	r3, r4, #1
 800c1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ee:	bf49      	itett	mi
 800c1f0:	f1c4 0301 	rsbmi	r3, r4, #1
 800c1f4:	2300      	movpl	r3, #0
 800c1f6:	9306      	strmi	r3, [sp, #24]
 800c1f8:	2300      	movmi	r3, #0
 800c1fa:	bf54      	ite	pl
 800c1fc:	9306      	strpl	r3, [sp, #24]
 800c1fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c200:	f1ba 0f00 	cmp.w	sl, #0
 800c204:	db3d      	blt.n	800c282 <_dtoa_r+0x23a>
 800c206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c208:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c20c:	4453      	add	r3, sl
 800c20e:	9309      	str	r3, [sp, #36]	; 0x24
 800c210:	2300      	movs	r3, #0
 800c212:	930a      	str	r3, [sp, #40]	; 0x28
 800c214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c216:	2b09      	cmp	r3, #9
 800c218:	f200 808c 	bhi.w	800c334 <_dtoa_r+0x2ec>
 800c21c:	2b05      	cmp	r3, #5
 800c21e:	bfc4      	itt	gt
 800c220:	3b04      	subgt	r3, #4
 800c222:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c226:	bfc8      	it	gt
 800c228:	2400      	movgt	r4, #0
 800c22a:	f1a3 0302 	sub.w	r3, r3, #2
 800c22e:	bfd8      	it	le
 800c230:	2401      	movle	r4, #1
 800c232:	2b03      	cmp	r3, #3
 800c234:	f200 808a 	bhi.w	800c34c <_dtoa_r+0x304>
 800c238:	e8df f003 	tbb	[pc, r3]
 800c23c:	5b4d4f2d 	.word	0x5b4d4f2d
 800c240:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c244:	441c      	add	r4, r3
 800c246:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c24a:	2b20      	cmp	r3, #32
 800c24c:	bfc3      	ittte	gt
 800c24e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c252:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c256:	fa09 f303 	lslgt.w	r3, r9, r3
 800c25a:	f1c3 0320 	rsble	r3, r3, #32
 800c25e:	bfc6      	itte	gt
 800c260:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c264:	4318      	orrgt	r0, r3
 800c266:	fa06 f003 	lslle.w	r0, r6, r3
 800c26a:	f7f4 f8bb 	bl	80003e4 <__aeabi_ui2d>
 800c26e:	2301      	movs	r3, #1
 800c270:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c274:	3c01      	subs	r4, #1
 800c276:	9313      	str	r3, [sp, #76]	; 0x4c
 800c278:	e76f      	b.n	800c15a <_dtoa_r+0x112>
 800c27a:	2301      	movs	r3, #1
 800c27c:	e7b2      	b.n	800c1e4 <_dtoa_r+0x19c>
 800c27e:	900f      	str	r0, [sp, #60]	; 0x3c
 800c280:	e7b1      	b.n	800c1e6 <_dtoa_r+0x19e>
 800c282:	9b06      	ldr	r3, [sp, #24]
 800c284:	eba3 030a 	sub.w	r3, r3, sl
 800c288:	9306      	str	r3, [sp, #24]
 800c28a:	f1ca 0300 	rsb	r3, sl, #0
 800c28e:	930a      	str	r3, [sp, #40]	; 0x28
 800c290:	2300      	movs	r3, #0
 800c292:	930e      	str	r3, [sp, #56]	; 0x38
 800c294:	e7be      	b.n	800c214 <_dtoa_r+0x1cc>
 800c296:	2300      	movs	r3, #0
 800c298:	930b      	str	r3, [sp, #44]	; 0x2c
 800c29a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	dc58      	bgt.n	800c352 <_dtoa_r+0x30a>
 800c2a0:	f04f 0901 	mov.w	r9, #1
 800c2a4:	464b      	mov	r3, r9
 800c2a6:	f8cd 9020 	str.w	r9, [sp, #32]
 800c2aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c2b2:	6042      	str	r2, [r0, #4]
 800c2b4:	2204      	movs	r2, #4
 800c2b6:	f102 0614 	add.w	r6, r2, #20
 800c2ba:	429e      	cmp	r6, r3
 800c2bc:	6841      	ldr	r1, [r0, #4]
 800c2be:	d94e      	bls.n	800c35e <_dtoa_r+0x316>
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f000 fee5 	bl	800d090 <_Balloc>
 800c2c6:	9003      	str	r0, [sp, #12]
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d14c      	bne.n	800c366 <_dtoa_r+0x31e>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c2d2:	4b17      	ldr	r3, [pc, #92]	; (800c330 <_dtoa_r+0x2e8>)
 800c2d4:	e6cc      	b.n	800c070 <_dtoa_r+0x28>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e7de      	b.n	800c298 <_dtoa_r+0x250>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c2e0:	eb0a 0903 	add.w	r9, sl, r3
 800c2e4:	f109 0301 	add.w	r3, r9, #1
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	9308      	str	r3, [sp, #32]
 800c2ec:	bfb8      	it	lt
 800c2ee:	2301      	movlt	r3, #1
 800c2f0:	e7dd      	b.n	800c2ae <_dtoa_r+0x266>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e7f2      	b.n	800c2dc <_dtoa_r+0x294>
 800c2f6:	bf00      	nop
 800c2f8:	636f4361 	.word	0x636f4361
 800c2fc:	3fd287a7 	.word	0x3fd287a7
 800c300:	8b60c8b3 	.word	0x8b60c8b3
 800c304:	3fc68a28 	.word	0x3fc68a28
 800c308:	509f79fb 	.word	0x509f79fb
 800c30c:	3fd34413 	.word	0x3fd34413
 800c310:	0800e14d 	.word	0x0800e14d
 800c314:	0800e164 	.word	0x0800e164
 800c318:	7ff00000 	.word	0x7ff00000
 800c31c:	0800e149 	.word	0x0800e149
 800c320:	0800e140 	.word	0x0800e140
 800c324:	0800e11d 	.word	0x0800e11d
 800c328:	3ff80000 	.word	0x3ff80000
 800c32c:	0800e2b8 	.word	0x0800e2b8
 800c330:	0800e1bf 	.word	0x0800e1bf
 800c334:	2401      	movs	r4, #1
 800c336:	2300      	movs	r3, #0
 800c338:	940b      	str	r4, [sp, #44]	; 0x2c
 800c33a:	9322      	str	r3, [sp, #136]	; 0x88
 800c33c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c340:	2200      	movs	r2, #0
 800c342:	2312      	movs	r3, #18
 800c344:	f8cd 9020 	str.w	r9, [sp, #32]
 800c348:	9223      	str	r2, [sp, #140]	; 0x8c
 800c34a:	e7b0      	b.n	800c2ae <_dtoa_r+0x266>
 800c34c:	2301      	movs	r3, #1
 800c34e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c350:	e7f4      	b.n	800c33c <_dtoa_r+0x2f4>
 800c352:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800c356:	464b      	mov	r3, r9
 800c358:	f8cd 9020 	str.w	r9, [sp, #32]
 800c35c:	e7a7      	b.n	800c2ae <_dtoa_r+0x266>
 800c35e:	3101      	adds	r1, #1
 800c360:	6041      	str	r1, [r0, #4]
 800c362:	0052      	lsls	r2, r2, #1
 800c364:	e7a7      	b.n	800c2b6 <_dtoa_r+0x26e>
 800c366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c368:	9a03      	ldr	r2, [sp, #12]
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	9b08      	ldr	r3, [sp, #32]
 800c36e:	2b0e      	cmp	r3, #14
 800c370:	f200 80a8 	bhi.w	800c4c4 <_dtoa_r+0x47c>
 800c374:	2c00      	cmp	r4, #0
 800c376:	f000 80a5 	beq.w	800c4c4 <_dtoa_r+0x47c>
 800c37a:	f1ba 0f00 	cmp.w	sl, #0
 800c37e:	dd34      	ble.n	800c3ea <_dtoa_r+0x3a2>
 800c380:	4a9a      	ldr	r2, [pc, #616]	; (800c5ec <_dtoa_r+0x5a4>)
 800c382:	f00a 030f 	and.w	r3, sl, #15
 800c386:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c38a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c38e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c396:	ea4f 142a 	mov.w	r4, sl, asr #4
 800c39a:	d016      	beq.n	800c3ca <_dtoa_r+0x382>
 800c39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c3a0:	4b93      	ldr	r3, [pc, #588]	; (800c5f0 <_dtoa_r+0x5a8>)
 800c3a2:	2703      	movs	r7, #3
 800c3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3a8:	f7f4 f9c0 	bl	800072c <__aeabi_ddiv>
 800c3ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3b0:	f004 040f 	and.w	r4, r4, #15
 800c3b4:	4e8e      	ldr	r6, [pc, #568]	; (800c5f0 <_dtoa_r+0x5a8>)
 800c3b6:	b954      	cbnz	r4, 800c3ce <_dtoa_r+0x386>
 800c3b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c0:	f7f4 f9b4 	bl	800072c <__aeabi_ddiv>
 800c3c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3c8:	e029      	b.n	800c41e <_dtoa_r+0x3d6>
 800c3ca:	2702      	movs	r7, #2
 800c3cc:	e7f2      	b.n	800c3b4 <_dtoa_r+0x36c>
 800c3ce:	07e1      	lsls	r1, r4, #31
 800c3d0:	d508      	bpl.n	800c3e4 <_dtoa_r+0x39c>
 800c3d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c3d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3da:	f7f4 f87d 	bl	80004d8 <__aeabi_dmul>
 800c3de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c3e2:	3701      	adds	r7, #1
 800c3e4:	1064      	asrs	r4, r4, #1
 800c3e6:	3608      	adds	r6, #8
 800c3e8:	e7e5      	b.n	800c3b6 <_dtoa_r+0x36e>
 800c3ea:	f000 80a5 	beq.w	800c538 <_dtoa_r+0x4f0>
 800c3ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c3f2:	f1ca 0400 	rsb	r4, sl, #0
 800c3f6:	4b7d      	ldr	r3, [pc, #500]	; (800c5ec <_dtoa_r+0x5a4>)
 800c3f8:	f004 020f 	and.w	r2, r4, #15
 800c3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f4 f868 	bl	80004d8 <__aeabi_dmul>
 800c408:	2702      	movs	r7, #2
 800c40a:	2300      	movs	r3, #0
 800c40c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c410:	4e77      	ldr	r6, [pc, #476]	; (800c5f0 <_dtoa_r+0x5a8>)
 800c412:	1124      	asrs	r4, r4, #4
 800c414:	2c00      	cmp	r4, #0
 800c416:	f040 8084 	bne.w	800c522 <_dtoa_r+0x4da>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1d2      	bne.n	800c3c4 <_dtoa_r+0x37c>
 800c41e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 808b 	beq.w	800c53c <_dtoa_r+0x4f4>
 800c426:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c42a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c42e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c432:	2200      	movs	r2, #0
 800c434:	4b6f      	ldr	r3, [pc, #444]	; (800c5f4 <_dtoa_r+0x5ac>)
 800c436:	f7f4 fac1 	bl	80009bc <__aeabi_dcmplt>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d07e      	beq.n	800c53c <_dtoa_r+0x4f4>
 800c43e:	9b08      	ldr	r3, [sp, #32]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d07b      	beq.n	800c53c <_dtoa_r+0x4f4>
 800c444:	f1b9 0f00 	cmp.w	r9, #0
 800c448:	dd38      	ble.n	800c4bc <_dtoa_r+0x474>
 800c44a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c44e:	2200      	movs	r2, #0
 800c450:	4b69      	ldr	r3, [pc, #420]	; (800c5f8 <_dtoa_r+0x5b0>)
 800c452:	f7f4 f841 	bl	80004d8 <__aeabi_dmul>
 800c456:	464c      	mov	r4, r9
 800c458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c45c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800c460:	3701      	adds	r7, #1
 800c462:	4638      	mov	r0, r7
 800c464:	f7f3 ffce 	bl	8000404 <__aeabi_i2d>
 800c468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c46c:	f7f4 f834 	bl	80004d8 <__aeabi_dmul>
 800c470:	2200      	movs	r2, #0
 800c472:	4b62      	ldr	r3, [pc, #392]	; (800c5fc <_dtoa_r+0x5b4>)
 800c474:	f7f3 fe7a 	bl	800016c <__adddf3>
 800c478:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c47c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c480:	9611      	str	r6, [sp, #68]	; 0x44
 800c482:	2c00      	cmp	r4, #0
 800c484:	d15d      	bne.n	800c542 <_dtoa_r+0x4fa>
 800c486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c48a:	2200      	movs	r2, #0
 800c48c:	4b5c      	ldr	r3, [pc, #368]	; (800c600 <_dtoa_r+0x5b8>)
 800c48e:	f7f3 fe6b 	bl	8000168 <__aeabi_dsub>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c49a:	4633      	mov	r3, r6
 800c49c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c49e:	f7f4 faab 	bl	80009f8 <__aeabi_dcmpgt>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	f040 829c 	bne.w	800c9e0 <_dtoa_r+0x998>
 800c4a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c4b2:	f7f4 fa83 	bl	80009bc <__aeabi_dcmplt>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f040 8290 	bne.w	800c9dc <_dtoa_r+0x994>
 800c4bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c4c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f2c0 8152 	blt.w	800c770 <_dtoa_r+0x728>
 800c4cc:	f1ba 0f0e 	cmp.w	sl, #14
 800c4d0:	f300 814e 	bgt.w	800c770 <_dtoa_r+0x728>
 800c4d4:	4b45      	ldr	r3, [pc, #276]	; (800c5ec <_dtoa_r+0x5a4>)
 800c4d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c4da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c4de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c4e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f280 80db 	bge.w	800c6a0 <_dtoa_r+0x658>
 800c4ea:	9b08      	ldr	r3, [sp, #32]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f300 80d7 	bgt.w	800c6a0 <_dtoa_r+0x658>
 800c4f2:	f040 8272 	bne.w	800c9da <_dtoa_r+0x992>
 800c4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4b40      	ldr	r3, [pc, #256]	; (800c600 <_dtoa_r+0x5b8>)
 800c4fe:	f7f3 ffeb 	bl	80004d8 <__aeabi_dmul>
 800c502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c506:	f7f4 fa6d 	bl	80009e4 <__aeabi_dcmpge>
 800c50a:	9c08      	ldr	r4, [sp, #32]
 800c50c:	4626      	mov	r6, r4
 800c50e:	2800      	cmp	r0, #0
 800c510:	f040 8248 	bne.w	800c9a4 <_dtoa_r+0x95c>
 800c514:	2331      	movs	r3, #49	; 0x31
 800c516:	9f03      	ldr	r7, [sp, #12]
 800c518:	f10a 0a01 	add.w	sl, sl, #1
 800c51c:	f807 3b01 	strb.w	r3, [r7], #1
 800c520:	e244      	b.n	800c9ac <_dtoa_r+0x964>
 800c522:	07e2      	lsls	r2, r4, #31
 800c524:	d505      	bpl.n	800c532 <_dtoa_r+0x4ea>
 800c526:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c52a:	f7f3 ffd5 	bl	80004d8 <__aeabi_dmul>
 800c52e:	2301      	movs	r3, #1
 800c530:	3701      	adds	r7, #1
 800c532:	1064      	asrs	r4, r4, #1
 800c534:	3608      	adds	r6, #8
 800c536:	e76d      	b.n	800c414 <_dtoa_r+0x3cc>
 800c538:	2702      	movs	r7, #2
 800c53a:	e770      	b.n	800c41e <_dtoa_r+0x3d6>
 800c53c:	46d0      	mov	r8, sl
 800c53e:	9c08      	ldr	r4, [sp, #32]
 800c540:	e78f      	b.n	800c462 <_dtoa_r+0x41a>
 800c542:	9903      	ldr	r1, [sp, #12]
 800c544:	4b29      	ldr	r3, [pc, #164]	; (800c5ec <_dtoa_r+0x5a4>)
 800c546:	4421      	add	r1, r4
 800c548:	9112      	str	r1, [sp, #72]	; 0x48
 800c54a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c54c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c550:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c554:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c558:	2900      	cmp	r1, #0
 800c55a:	d055      	beq.n	800c608 <_dtoa_r+0x5c0>
 800c55c:	2000      	movs	r0, #0
 800c55e:	4929      	ldr	r1, [pc, #164]	; (800c604 <_dtoa_r+0x5bc>)
 800c560:	f7f4 f8e4 	bl	800072c <__aeabi_ddiv>
 800c564:	463b      	mov	r3, r7
 800c566:	4632      	mov	r2, r6
 800c568:	f7f3 fdfe 	bl	8000168 <__aeabi_dsub>
 800c56c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c570:	9f03      	ldr	r7, [sp, #12]
 800c572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c576:	f7f4 fa5f 	bl	8000a38 <__aeabi_d2iz>
 800c57a:	4604      	mov	r4, r0
 800c57c:	f7f3 ff42 	bl	8000404 <__aeabi_i2d>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c588:	f7f3 fdee 	bl	8000168 <__aeabi_dsub>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	3430      	adds	r4, #48	; 0x30
 800c592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c59a:	f807 4b01 	strb.w	r4, [r7], #1
 800c59e:	f7f4 fa0d 	bl	80009bc <__aeabi_dcmplt>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d174      	bne.n	800c690 <_dtoa_r+0x648>
 800c5a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	4911      	ldr	r1, [pc, #68]	; (800c5f4 <_dtoa_r+0x5ac>)
 800c5ae:	f7f3 fddb 	bl	8000168 <__aeabi_dsub>
 800c5b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c5b6:	f7f4 fa01 	bl	80009bc <__aeabi_dcmplt>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	f040 80b7 	bne.w	800c72e <_dtoa_r+0x6e6>
 800c5c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5c2:	429f      	cmp	r7, r3
 800c5c4:	f43f af7a 	beq.w	800c4bc <_dtoa_r+0x474>
 800c5c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4b0a      	ldr	r3, [pc, #40]	; (800c5f8 <_dtoa_r+0x5b0>)
 800c5d0:	f7f3 ff82 	bl	80004d8 <__aeabi_dmul>
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c5da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5de:	4b06      	ldr	r3, [pc, #24]	; (800c5f8 <_dtoa_r+0x5b0>)
 800c5e0:	f7f3 ff7a 	bl	80004d8 <__aeabi_dmul>
 800c5e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5e8:	e7c3      	b.n	800c572 <_dtoa_r+0x52a>
 800c5ea:	bf00      	nop
 800c5ec:	0800e2b8 	.word	0x0800e2b8
 800c5f0:	0800e290 	.word	0x0800e290
 800c5f4:	3ff00000 	.word	0x3ff00000
 800c5f8:	40240000 	.word	0x40240000
 800c5fc:	401c0000 	.word	0x401c0000
 800c600:	40140000 	.word	0x40140000
 800c604:	3fe00000 	.word	0x3fe00000
 800c608:	4630      	mov	r0, r6
 800c60a:	4639      	mov	r1, r7
 800c60c:	f7f3 ff64 	bl	80004d8 <__aeabi_dmul>
 800c610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c612:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c616:	9c03      	ldr	r4, [sp, #12]
 800c618:	9314      	str	r3, [sp, #80]	; 0x50
 800c61a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c61e:	f7f4 fa0b 	bl	8000a38 <__aeabi_d2iz>
 800c622:	9015      	str	r0, [sp, #84]	; 0x54
 800c624:	f7f3 feee 	bl	8000404 <__aeabi_i2d>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c630:	f7f3 fd9a 	bl	8000168 <__aeabi_dsub>
 800c634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c636:	4606      	mov	r6, r0
 800c638:	3330      	adds	r3, #48	; 0x30
 800c63a:	f804 3b01 	strb.w	r3, [r4], #1
 800c63e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c640:	460f      	mov	r7, r1
 800c642:	429c      	cmp	r4, r3
 800c644:	f04f 0200 	mov.w	r2, #0
 800c648:	d124      	bne.n	800c694 <_dtoa_r+0x64c>
 800c64a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c64e:	4bb0      	ldr	r3, [pc, #704]	; (800c910 <_dtoa_r+0x8c8>)
 800c650:	f7f3 fd8c 	bl	800016c <__adddf3>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	4630      	mov	r0, r6
 800c65a:	4639      	mov	r1, r7
 800c65c:	f7f4 f9cc 	bl	80009f8 <__aeabi_dcmpgt>
 800c660:	2800      	cmp	r0, #0
 800c662:	d163      	bne.n	800c72c <_dtoa_r+0x6e4>
 800c664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c668:	2000      	movs	r0, #0
 800c66a:	49a9      	ldr	r1, [pc, #676]	; (800c910 <_dtoa_r+0x8c8>)
 800c66c:	f7f3 fd7c 	bl	8000168 <__aeabi_dsub>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4630      	mov	r0, r6
 800c676:	4639      	mov	r1, r7
 800c678:	f7f4 f9a0 	bl	80009bc <__aeabi_dcmplt>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	f43f af1d 	beq.w	800c4bc <_dtoa_r+0x474>
 800c682:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c684:	1e7b      	subs	r3, r7, #1
 800c686:	9314      	str	r3, [sp, #80]	; 0x50
 800c688:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c68c:	2b30      	cmp	r3, #48	; 0x30
 800c68e:	d0f8      	beq.n	800c682 <_dtoa_r+0x63a>
 800c690:	46c2      	mov	sl, r8
 800c692:	e03b      	b.n	800c70c <_dtoa_r+0x6c4>
 800c694:	4b9f      	ldr	r3, [pc, #636]	; (800c914 <_dtoa_r+0x8cc>)
 800c696:	f7f3 ff1f 	bl	80004d8 <__aeabi_dmul>
 800c69a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c69e:	e7bc      	b.n	800c61a <_dtoa_r+0x5d2>
 800c6a0:	9f03      	ldr	r7, [sp, #12]
 800c6a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c6a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f4 f83d 	bl	800072c <__aeabi_ddiv>
 800c6b2:	f7f4 f9c1 	bl	8000a38 <__aeabi_d2iz>
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	f7f3 fea4 	bl	8000404 <__aeabi_i2d>
 800c6bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6c0:	f7f3 ff0a 	bl	80004d8 <__aeabi_dmul>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	4649      	mov	r1, r9
 800c6cc:	f7f3 fd4c 	bl	8000168 <__aeabi_dsub>
 800c6d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c6d4:	f807 6b01 	strb.w	r6, [r7], #1
 800c6d8:	9e03      	ldr	r6, [sp, #12]
 800c6da:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c6de:	1bbe      	subs	r6, r7, r6
 800c6e0:	45b4      	cmp	ip, r6
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	d136      	bne.n	800c756 <_dtoa_r+0x70e>
 800c6e8:	f7f3 fd40 	bl	800016c <__adddf3>
 800c6ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	4689      	mov	r9, r1
 800c6f4:	f7f4 f980 	bl	80009f8 <__aeabi_dcmpgt>
 800c6f8:	bb58      	cbnz	r0, 800c752 <_dtoa_r+0x70a>
 800c6fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f4 f951 	bl	80009a8 <__aeabi_dcmpeq>
 800c706:	b108      	cbz	r0, 800c70c <_dtoa_r+0x6c4>
 800c708:	07e1      	lsls	r1, r4, #31
 800c70a:	d422      	bmi.n	800c752 <_dtoa_r+0x70a>
 800c70c:	4628      	mov	r0, r5
 800c70e:	4659      	mov	r1, fp
 800c710:	f000 fcfe 	bl	800d110 <_Bfree>
 800c714:	2300      	movs	r3, #0
 800c716:	703b      	strb	r3, [r7, #0]
 800c718:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c71a:	f10a 0001 	add.w	r0, sl, #1
 800c71e:	6018      	str	r0, [r3, #0]
 800c720:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c722:	2b00      	cmp	r3, #0
 800c724:	f43f acde 	beq.w	800c0e4 <_dtoa_r+0x9c>
 800c728:	601f      	str	r7, [r3, #0]
 800c72a:	e4db      	b.n	800c0e4 <_dtoa_r+0x9c>
 800c72c:	4627      	mov	r7, r4
 800c72e:	463b      	mov	r3, r7
 800c730:	461f      	mov	r7, r3
 800c732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c736:	2a39      	cmp	r2, #57	; 0x39
 800c738:	d107      	bne.n	800c74a <_dtoa_r+0x702>
 800c73a:	9a03      	ldr	r2, [sp, #12]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d1f7      	bne.n	800c730 <_dtoa_r+0x6e8>
 800c740:	2230      	movs	r2, #48	; 0x30
 800c742:	9903      	ldr	r1, [sp, #12]
 800c744:	f108 0801 	add.w	r8, r8, #1
 800c748:	700a      	strb	r2, [r1, #0]
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	3201      	adds	r2, #1
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	e79e      	b.n	800c690 <_dtoa_r+0x648>
 800c752:	46d0      	mov	r8, sl
 800c754:	e7eb      	b.n	800c72e <_dtoa_r+0x6e6>
 800c756:	2200      	movs	r2, #0
 800c758:	4b6e      	ldr	r3, [pc, #440]	; (800c914 <_dtoa_r+0x8cc>)
 800c75a:	f7f3 febd 	bl	80004d8 <__aeabi_dmul>
 800c75e:	2200      	movs	r2, #0
 800c760:	2300      	movs	r3, #0
 800c762:	4680      	mov	r8, r0
 800c764:	4689      	mov	r9, r1
 800c766:	f7f4 f91f 	bl	80009a8 <__aeabi_dcmpeq>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d09b      	beq.n	800c6a6 <_dtoa_r+0x65e>
 800c76e:	e7cd      	b.n	800c70c <_dtoa_r+0x6c4>
 800c770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c772:	2a00      	cmp	r2, #0
 800c774:	f000 80d0 	beq.w	800c918 <_dtoa_r+0x8d0>
 800c778:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c77a:	2a01      	cmp	r2, #1
 800c77c:	f300 80ae 	bgt.w	800c8dc <_dtoa_r+0x894>
 800c780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c782:	2a00      	cmp	r2, #0
 800c784:	f000 80a6 	beq.w	800c8d4 <_dtoa_r+0x88c>
 800c788:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c78c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c78e:	9f06      	ldr	r7, [sp, #24]
 800c790:	9a06      	ldr	r2, [sp, #24]
 800c792:	2101      	movs	r1, #1
 800c794:	441a      	add	r2, r3
 800c796:	9206      	str	r2, [sp, #24]
 800c798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c79a:	4628      	mov	r0, r5
 800c79c:	441a      	add	r2, r3
 800c79e:	9209      	str	r2, [sp, #36]	; 0x24
 800c7a0:	f000 fd6c 	bl	800d27c <__i2b>
 800c7a4:	4606      	mov	r6, r0
 800c7a6:	2f00      	cmp	r7, #0
 800c7a8:	dd0c      	ble.n	800c7c4 <_dtoa_r+0x77c>
 800c7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	dd09      	ble.n	800c7c4 <_dtoa_r+0x77c>
 800c7b0:	42bb      	cmp	r3, r7
 800c7b2:	bfa8      	it	ge
 800c7b4:	463b      	movge	r3, r7
 800c7b6:	9a06      	ldr	r2, [sp, #24]
 800c7b8:	1aff      	subs	r7, r7, r3
 800c7ba:	1ad2      	subs	r2, r2, r3
 800c7bc:	9206      	str	r2, [sp, #24]
 800c7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c6:	b1f3      	cbz	r3, 800c806 <_dtoa_r+0x7be>
 800c7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 80a8 	beq.w	800c920 <_dtoa_r+0x8d8>
 800c7d0:	2c00      	cmp	r4, #0
 800c7d2:	dd10      	ble.n	800c7f6 <_dtoa_r+0x7ae>
 800c7d4:	4631      	mov	r1, r6
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	4628      	mov	r0, r5
 800c7da:	f000 fe0d 	bl	800d3f8 <__pow5mult>
 800c7de:	465a      	mov	r2, fp
 800c7e0:	4601      	mov	r1, r0
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f000 fd5f 	bl	800d2a8 <__multiply>
 800c7ea:	4680      	mov	r8, r0
 800c7ec:	4659      	mov	r1, fp
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	f000 fc8e 	bl	800d110 <_Bfree>
 800c7f4:	46c3      	mov	fp, r8
 800c7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f8:	1b1a      	subs	r2, r3, r4
 800c7fa:	d004      	beq.n	800c806 <_dtoa_r+0x7be>
 800c7fc:	4659      	mov	r1, fp
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 fdfa 	bl	800d3f8 <__pow5mult>
 800c804:	4683      	mov	fp, r0
 800c806:	2101      	movs	r1, #1
 800c808:	4628      	mov	r0, r5
 800c80a:	f000 fd37 	bl	800d27c <__i2b>
 800c80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c810:	4604      	mov	r4, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	f340 8086 	ble.w	800c924 <_dtoa_r+0x8dc>
 800c818:	461a      	mov	r2, r3
 800c81a:	4601      	mov	r1, r0
 800c81c:	4628      	mov	r0, r5
 800c81e:	f000 fdeb 	bl	800d3f8 <__pow5mult>
 800c822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c824:	4604      	mov	r4, r0
 800c826:	2b01      	cmp	r3, #1
 800c828:	dd7f      	ble.n	800c92a <_dtoa_r+0x8e2>
 800c82a:	f04f 0800 	mov.w	r8, #0
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c834:	6918      	ldr	r0, [r3, #16]
 800c836:	f000 fcd3 	bl	800d1e0 <__hi0bits>
 800c83a:	f1c0 0020 	rsb	r0, r0, #32
 800c83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c840:	4418      	add	r0, r3
 800c842:	f010 001f 	ands.w	r0, r0, #31
 800c846:	f000 8092 	beq.w	800c96e <_dtoa_r+0x926>
 800c84a:	f1c0 0320 	rsb	r3, r0, #32
 800c84e:	2b04      	cmp	r3, #4
 800c850:	f340 808a 	ble.w	800c968 <_dtoa_r+0x920>
 800c854:	f1c0 001c 	rsb	r0, r0, #28
 800c858:	9b06      	ldr	r3, [sp, #24]
 800c85a:	4407      	add	r7, r0
 800c85c:	4403      	add	r3, r0
 800c85e:	9306      	str	r3, [sp, #24]
 800c860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c862:	4403      	add	r3, r0
 800c864:	9309      	str	r3, [sp, #36]	; 0x24
 800c866:	9b06      	ldr	r3, [sp, #24]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dd05      	ble.n	800c878 <_dtoa_r+0x830>
 800c86c:	4659      	mov	r1, fp
 800c86e:	461a      	mov	r2, r3
 800c870:	4628      	mov	r0, r5
 800c872:	f000 fe1b 	bl	800d4ac <__lshift>
 800c876:	4683      	mov	fp, r0
 800c878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dd05      	ble.n	800c88a <_dtoa_r+0x842>
 800c87e:	4621      	mov	r1, r4
 800c880:	461a      	mov	r2, r3
 800c882:	4628      	mov	r0, r5
 800c884:	f000 fe12 	bl	800d4ac <__lshift>
 800c888:	4604      	mov	r4, r0
 800c88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d070      	beq.n	800c972 <_dtoa_r+0x92a>
 800c890:	4621      	mov	r1, r4
 800c892:	4658      	mov	r0, fp
 800c894:	f000 fe7a 	bl	800d58c <__mcmp>
 800c898:	2800      	cmp	r0, #0
 800c89a:	da6a      	bge.n	800c972 <_dtoa_r+0x92a>
 800c89c:	2300      	movs	r3, #0
 800c89e:	4659      	mov	r1, fp
 800c8a0:	220a      	movs	r2, #10
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	f000 fc56 	bl	800d154 <__multadd>
 800c8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8aa:	4683      	mov	fp, r0
 800c8ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 8194 	beq.w	800cbde <_dtoa_r+0xb96>
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	220a      	movs	r2, #10
 800c8bc:	4628      	mov	r0, r5
 800c8be:	f000 fc49 	bl	800d154 <__multadd>
 800c8c2:	f1b9 0f00 	cmp.w	r9, #0
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	f300 8093 	bgt.w	800c9f2 <_dtoa_r+0x9aa>
 800c8cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	dc57      	bgt.n	800c982 <_dtoa_r+0x93a>
 800c8d2:	e08e      	b.n	800c9f2 <_dtoa_r+0x9aa>
 800c8d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c8d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8da:	e757      	b.n	800c78c <_dtoa_r+0x744>
 800c8dc:	9b08      	ldr	r3, [sp, #32]
 800c8de:	1e5c      	subs	r4, r3, #1
 800c8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e2:	42a3      	cmp	r3, r4
 800c8e4:	bfb7      	itett	lt
 800c8e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c8e8:	1b1c      	subge	r4, r3, r4
 800c8ea:	1ae2      	sublt	r2, r4, r3
 800c8ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c8ee:	bfbe      	ittt	lt
 800c8f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c8f2:	189b      	addlt	r3, r3, r2
 800c8f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c8f6:	9b08      	ldr	r3, [sp, #32]
 800c8f8:	bfb8      	it	lt
 800c8fa:	2400      	movlt	r4, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	bfbb      	ittet	lt
 800c900:	9b06      	ldrlt	r3, [sp, #24]
 800c902:	9a08      	ldrlt	r2, [sp, #32]
 800c904:	9f06      	ldrge	r7, [sp, #24]
 800c906:	1a9f      	sublt	r7, r3, r2
 800c908:	bfac      	ite	ge
 800c90a:	9b08      	ldrge	r3, [sp, #32]
 800c90c:	2300      	movlt	r3, #0
 800c90e:	e73f      	b.n	800c790 <_dtoa_r+0x748>
 800c910:	3fe00000 	.word	0x3fe00000
 800c914:	40240000 	.word	0x40240000
 800c918:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c91a:	9f06      	ldr	r7, [sp, #24]
 800c91c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c91e:	e742      	b.n	800c7a6 <_dtoa_r+0x75e>
 800c920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c922:	e76b      	b.n	800c7fc <_dtoa_r+0x7b4>
 800c924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c926:	2b01      	cmp	r3, #1
 800c928:	dc19      	bgt.n	800c95e <_dtoa_r+0x916>
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	b9bb      	cbnz	r3, 800c95e <_dtoa_r+0x916>
 800c92e:	9b05      	ldr	r3, [sp, #20]
 800c930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c934:	b99b      	cbnz	r3, 800c95e <_dtoa_r+0x916>
 800c936:	9b05      	ldr	r3, [sp, #20]
 800c938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c93c:	0d1b      	lsrs	r3, r3, #20
 800c93e:	051b      	lsls	r3, r3, #20
 800c940:	b183      	cbz	r3, 800c964 <_dtoa_r+0x91c>
 800c942:	f04f 0801 	mov.w	r8, #1
 800c946:	9b06      	ldr	r3, [sp, #24]
 800c948:	3301      	adds	r3, #1
 800c94a:	9306      	str	r3, [sp, #24]
 800c94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c94e:	3301      	adds	r3, #1
 800c950:	9309      	str	r3, [sp, #36]	; 0x24
 800c952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c954:	2b00      	cmp	r3, #0
 800c956:	f47f af6a 	bne.w	800c82e <_dtoa_r+0x7e6>
 800c95a:	2001      	movs	r0, #1
 800c95c:	e76f      	b.n	800c83e <_dtoa_r+0x7f6>
 800c95e:	f04f 0800 	mov.w	r8, #0
 800c962:	e7f6      	b.n	800c952 <_dtoa_r+0x90a>
 800c964:	4698      	mov	r8, r3
 800c966:	e7f4      	b.n	800c952 <_dtoa_r+0x90a>
 800c968:	f43f af7d 	beq.w	800c866 <_dtoa_r+0x81e>
 800c96c:	4618      	mov	r0, r3
 800c96e:	301c      	adds	r0, #28
 800c970:	e772      	b.n	800c858 <_dtoa_r+0x810>
 800c972:	9b08      	ldr	r3, [sp, #32]
 800c974:	2b00      	cmp	r3, #0
 800c976:	dc36      	bgt.n	800c9e6 <_dtoa_r+0x99e>
 800c978:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	dd33      	ble.n	800c9e6 <_dtoa_r+0x99e>
 800c97e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c982:	f1b9 0f00 	cmp.w	r9, #0
 800c986:	d10d      	bne.n	800c9a4 <_dtoa_r+0x95c>
 800c988:	4621      	mov	r1, r4
 800c98a:	464b      	mov	r3, r9
 800c98c:	2205      	movs	r2, #5
 800c98e:	4628      	mov	r0, r5
 800c990:	f000 fbe0 	bl	800d154 <__multadd>
 800c994:	4601      	mov	r1, r0
 800c996:	4604      	mov	r4, r0
 800c998:	4658      	mov	r0, fp
 800c99a:	f000 fdf7 	bl	800d58c <__mcmp>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f73f adb8 	bgt.w	800c514 <_dtoa_r+0x4cc>
 800c9a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c9a6:	9f03      	ldr	r7, [sp, #12]
 800c9a8:	ea6f 0a03 	mvn.w	sl, r3
 800c9ac:	f04f 0800 	mov.w	r8, #0
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 fbac 	bl	800d110 <_Bfree>
 800c9b8:	2e00      	cmp	r6, #0
 800c9ba:	f43f aea7 	beq.w	800c70c <_dtoa_r+0x6c4>
 800c9be:	f1b8 0f00 	cmp.w	r8, #0
 800c9c2:	d005      	beq.n	800c9d0 <_dtoa_r+0x988>
 800c9c4:	45b0      	cmp	r8, r6
 800c9c6:	d003      	beq.n	800c9d0 <_dtoa_r+0x988>
 800c9c8:	4641      	mov	r1, r8
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f000 fba0 	bl	800d110 <_Bfree>
 800c9d0:	4631      	mov	r1, r6
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	f000 fb9c 	bl	800d110 <_Bfree>
 800c9d8:	e698      	b.n	800c70c <_dtoa_r+0x6c4>
 800c9da:	2400      	movs	r4, #0
 800c9dc:	4626      	mov	r6, r4
 800c9de:	e7e1      	b.n	800c9a4 <_dtoa_r+0x95c>
 800c9e0:	46c2      	mov	sl, r8
 800c9e2:	4626      	mov	r6, r4
 800c9e4:	e596      	b.n	800c514 <_dtoa_r+0x4cc>
 800c9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 80fd 	beq.w	800cbec <_dtoa_r+0xba4>
 800c9f2:	2f00      	cmp	r7, #0
 800c9f4:	dd05      	ble.n	800ca02 <_dtoa_r+0x9ba>
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	463a      	mov	r2, r7
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f000 fd56 	bl	800d4ac <__lshift>
 800ca00:	4606      	mov	r6, r0
 800ca02:	f1b8 0f00 	cmp.w	r8, #0
 800ca06:	d05c      	beq.n	800cac2 <_dtoa_r+0xa7a>
 800ca08:	4628      	mov	r0, r5
 800ca0a:	6871      	ldr	r1, [r6, #4]
 800ca0c:	f000 fb40 	bl	800d090 <_Balloc>
 800ca10:	4607      	mov	r7, r0
 800ca12:	b928      	cbnz	r0, 800ca20 <_dtoa_r+0x9d8>
 800ca14:	4602      	mov	r2, r0
 800ca16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca1a:	4b7f      	ldr	r3, [pc, #508]	; (800cc18 <_dtoa_r+0xbd0>)
 800ca1c:	f7ff bb28 	b.w	800c070 <_dtoa_r+0x28>
 800ca20:	6932      	ldr	r2, [r6, #16]
 800ca22:	f106 010c 	add.w	r1, r6, #12
 800ca26:	3202      	adds	r2, #2
 800ca28:	0092      	lsls	r2, r2, #2
 800ca2a:	300c      	adds	r0, #12
 800ca2c:	f7fe fe0a 	bl	800b644 <memcpy>
 800ca30:	2201      	movs	r2, #1
 800ca32:	4639      	mov	r1, r7
 800ca34:	4628      	mov	r0, r5
 800ca36:	f000 fd39 	bl	800d4ac <__lshift>
 800ca3a:	46b0      	mov	r8, r6
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	9b03      	ldr	r3, [sp, #12]
 800ca40:	3301      	adds	r3, #1
 800ca42:	9308      	str	r3, [sp, #32]
 800ca44:	9b03      	ldr	r3, [sp, #12]
 800ca46:	444b      	add	r3, r9
 800ca48:	930a      	str	r3, [sp, #40]	; 0x28
 800ca4a:	9b04      	ldr	r3, [sp, #16]
 800ca4c:	f003 0301 	and.w	r3, r3, #1
 800ca50:	9309      	str	r3, [sp, #36]	; 0x24
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	4621      	mov	r1, r4
 800ca56:	3b01      	subs	r3, #1
 800ca58:	4658      	mov	r0, fp
 800ca5a:	9304      	str	r3, [sp, #16]
 800ca5c:	f7ff fa68 	bl	800bf30 <quorem>
 800ca60:	4603      	mov	r3, r0
 800ca62:	4641      	mov	r1, r8
 800ca64:	3330      	adds	r3, #48	; 0x30
 800ca66:	9006      	str	r0, [sp, #24]
 800ca68:	4658      	mov	r0, fp
 800ca6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca6c:	f000 fd8e 	bl	800d58c <__mcmp>
 800ca70:	4632      	mov	r2, r6
 800ca72:	4681      	mov	r9, r0
 800ca74:	4621      	mov	r1, r4
 800ca76:	4628      	mov	r0, r5
 800ca78:	f000 fda4 	bl	800d5c4 <__mdiff>
 800ca7c:	68c2      	ldr	r2, [r0, #12]
 800ca7e:	4607      	mov	r7, r0
 800ca80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca82:	bb02      	cbnz	r2, 800cac6 <_dtoa_r+0xa7e>
 800ca84:	4601      	mov	r1, r0
 800ca86:	4658      	mov	r0, fp
 800ca88:	f000 fd80 	bl	800d58c <__mcmp>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca90:	4639      	mov	r1, r7
 800ca92:	4628      	mov	r0, r5
 800ca94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ca98:	f000 fb3a 	bl	800d110 <_Bfree>
 800ca9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caa0:	9f08      	ldr	r7, [sp, #32]
 800caa2:	ea43 0102 	orr.w	r1, r3, r2
 800caa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa8:	430b      	orrs	r3, r1
 800caaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caac:	d10d      	bne.n	800caca <_dtoa_r+0xa82>
 800caae:	2b39      	cmp	r3, #57	; 0x39
 800cab0:	d029      	beq.n	800cb06 <_dtoa_r+0xabe>
 800cab2:	f1b9 0f00 	cmp.w	r9, #0
 800cab6:	dd01      	ble.n	800cabc <_dtoa_r+0xa74>
 800cab8:	9b06      	ldr	r3, [sp, #24]
 800caba:	3331      	adds	r3, #49	; 0x31
 800cabc:	9a04      	ldr	r2, [sp, #16]
 800cabe:	7013      	strb	r3, [r2, #0]
 800cac0:	e776      	b.n	800c9b0 <_dtoa_r+0x968>
 800cac2:	4630      	mov	r0, r6
 800cac4:	e7b9      	b.n	800ca3a <_dtoa_r+0x9f2>
 800cac6:	2201      	movs	r2, #1
 800cac8:	e7e2      	b.n	800ca90 <_dtoa_r+0xa48>
 800caca:	f1b9 0f00 	cmp.w	r9, #0
 800cace:	db06      	blt.n	800cade <_dtoa_r+0xa96>
 800cad0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800cad2:	ea41 0909 	orr.w	r9, r1, r9
 800cad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cad8:	ea59 0101 	orrs.w	r1, r9, r1
 800cadc:	d120      	bne.n	800cb20 <_dtoa_r+0xad8>
 800cade:	2a00      	cmp	r2, #0
 800cae0:	ddec      	ble.n	800cabc <_dtoa_r+0xa74>
 800cae2:	4659      	mov	r1, fp
 800cae4:	2201      	movs	r2, #1
 800cae6:	4628      	mov	r0, r5
 800cae8:	9308      	str	r3, [sp, #32]
 800caea:	f000 fcdf 	bl	800d4ac <__lshift>
 800caee:	4621      	mov	r1, r4
 800caf0:	4683      	mov	fp, r0
 800caf2:	f000 fd4b 	bl	800d58c <__mcmp>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	9b08      	ldr	r3, [sp, #32]
 800cafa:	dc02      	bgt.n	800cb02 <_dtoa_r+0xaba>
 800cafc:	d1de      	bne.n	800cabc <_dtoa_r+0xa74>
 800cafe:	07da      	lsls	r2, r3, #31
 800cb00:	d5dc      	bpl.n	800cabc <_dtoa_r+0xa74>
 800cb02:	2b39      	cmp	r3, #57	; 0x39
 800cb04:	d1d8      	bne.n	800cab8 <_dtoa_r+0xa70>
 800cb06:	2339      	movs	r3, #57	; 0x39
 800cb08:	9a04      	ldr	r2, [sp, #16]
 800cb0a:	7013      	strb	r3, [r2, #0]
 800cb0c:	463b      	mov	r3, r7
 800cb0e:	461f      	mov	r7, r3
 800cb10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	2a39      	cmp	r2, #57	; 0x39
 800cb18:	d050      	beq.n	800cbbc <_dtoa_r+0xb74>
 800cb1a:	3201      	adds	r2, #1
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	e747      	b.n	800c9b0 <_dtoa_r+0x968>
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	dd03      	ble.n	800cb2c <_dtoa_r+0xae4>
 800cb24:	2b39      	cmp	r3, #57	; 0x39
 800cb26:	d0ee      	beq.n	800cb06 <_dtoa_r+0xabe>
 800cb28:	3301      	adds	r3, #1
 800cb2a:	e7c7      	b.n	800cabc <_dtoa_r+0xa74>
 800cb2c:	9a08      	ldr	r2, [sp, #32]
 800cb2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb30:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cb34:	428a      	cmp	r2, r1
 800cb36:	d02a      	beq.n	800cb8e <_dtoa_r+0xb46>
 800cb38:	4659      	mov	r1, fp
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	220a      	movs	r2, #10
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f000 fb08 	bl	800d154 <__multadd>
 800cb44:	45b0      	cmp	r8, r6
 800cb46:	4683      	mov	fp, r0
 800cb48:	f04f 0300 	mov.w	r3, #0
 800cb4c:	f04f 020a 	mov.w	r2, #10
 800cb50:	4641      	mov	r1, r8
 800cb52:	4628      	mov	r0, r5
 800cb54:	d107      	bne.n	800cb66 <_dtoa_r+0xb1e>
 800cb56:	f000 fafd 	bl	800d154 <__multadd>
 800cb5a:	4680      	mov	r8, r0
 800cb5c:	4606      	mov	r6, r0
 800cb5e:	9b08      	ldr	r3, [sp, #32]
 800cb60:	3301      	adds	r3, #1
 800cb62:	9308      	str	r3, [sp, #32]
 800cb64:	e775      	b.n	800ca52 <_dtoa_r+0xa0a>
 800cb66:	f000 faf5 	bl	800d154 <__multadd>
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4680      	mov	r8, r0
 800cb6e:	2300      	movs	r3, #0
 800cb70:	220a      	movs	r2, #10
 800cb72:	4628      	mov	r0, r5
 800cb74:	f000 faee 	bl	800d154 <__multadd>
 800cb78:	4606      	mov	r6, r0
 800cb7a:	e7f0      	b.n	800cb5e <_dtoa_r+0xb16>
 800cb7c:	f1b9 0f00 	cmp.w	r9, #0
 800cb80:	bfcc      	ite	gt
 800cb82:	464f      	movgt	r7, r9
 800cb84:	2701      	movle	r7, #1
 800cb86:	f04f 0800 	mov.w	r8, #0
 800cb8a:	9a03      	ldr	r2, [sp, #12]
 800cb8c:	4417      	add	r7, r2
 800cb8e:	4659      	mov	r1, fp
 800cb90:	2201      	movs	r2, #1
 800cb92:	4628      	mov	r0, r5
 800cb94:	9308      	str	r3, [sp, #32]
 800cb96:	f000 fc89 	bl	800d4ac <__lshift>
 800cb9a:	4621      	mov	r1, r4
 800cb9c:	4683      	mov	fp, r0
 800cb9e:	f000 fcf5 	bl	800d58c <__mcmp>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	dcb2      	bgt.n	800cb0c <_dtoa_r+0xac4>
 800cba6:	d102      	bne.n	800cbae <_dtoa_r+0xb66>
 800cba8:	9b08      	ldr	r3, [sp, #32]
 800cbaa:	07db      	lsls	r3, r3, #31
 800cbac:	d4ae      	bmi.n	800cb0c <_dtoa_r+0xac4>
 800cbae:	463b      	mov	r3, r7
 800cbb0:	461f      	mov	r7, r3
 800cbb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbb6:	2a30      	cmp	r2, #48	; 0x30
 800cbb8:	d0fa      	beq.n	800cbb0 <_dtoa_r+0xb68>
 800cbba:	e6f9      	b.n	800c9b0 <_dtoa_r+0x968>
 800cbbc:	9a03      	ldr	r2, [sp, #12]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d1a5      	bne.n	800cb0e <_dtoa_r+0xac6>
 800cbc2:	2331      	movs	r3, #49	; 0x31
 800cbc4:	f10a 0a01 	add.w	sl, sl, #1
 800cbc8:	e779      	b.n	800cabe <_dtoa_r+0xa76>
 800cbca:	4b14      	ldr	r3, [pc, #80]	; (800cc1c <_dtoa_r+0xbd4>)
 800cbcc:	f7ff baa8 	b.w	800c120 <_dtoa_r+0xd8>
 800cbd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f47f aa81 	bne.w	800c0da <_dtoa_r+0x92>
 800cbd8:	4b11      	ldr	r3, [pc, #68]	; (800cc20 <_dtoa_r+0xbd8>)
 800cbda:	f7ff baa1 	b.w	800c120 <_dtoa_r+0xd8>
 800cbde:	f1b9 0f00 	cmp.w	r9, #0
 800cbe2:	dc03      	bgt.n	800cbec <_dtoa_r+0xba4>
 800cbe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	f73f aecb 	bgt.w	800c982 <_dtoa_r+0x93a>
 800cbec:	9f03      	ldr	r7, [sp, #12]
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4658      	mov	r0, fp
 800cbf2:	f7ff f99d 	bl	800bf30 <quorem>
 800cbf6:	9a03      	ldr	r2, [sp, #12]
 800cbf8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cbfc:	f807 3b01 	strb.w	r3, [r7], #1
 800cc00:	1aba      	subs	r2, r7, r2
 800cc02:	4591      	cmp	r9, r2
 800cc04:	ddba      	ble.n	800cb7c <_dtoa_r+0xb34>
 800cc06:	4659      	mov	r1, fp
 800cc08:	2300      	movs	r3, #0
 800cc0a:	220a      	movs	r2, #10
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f000 faa1 	bl	800d154 <__multadd>
 800cc12:	4683      	mov	fp, r0
 800cc14:	e7eb      	b.n	800cbee <_dtoa_r+0xba6>
 800cc16:	bf00      	nop
 800cc18:	0800e1bf 	.word	0x0800e1bf
 800cc1c:	0800e11c 	.word	0x0800e11c
 800cc20:	0800e140 	.word	0x0800e140

0800cc24 <__sflush_r>:
 800cc24:	898a      	ldrh	r2, [r1, #12]
 800cc26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc28:	4605      	mov	r5, r0
 800cc2a:	0710      	lsls	r0, r2, #28
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	d457      	bmi.n	800cce0 <__sflush_r+0xbc>
 800cc30:	684b      	ldr	r3, [r1, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	dc04      	bgt.n	800cc40 <__sflush_r+0x1c>
 800cc36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dc01      	bgt.n	800cc40 <__sflush_r+0x1c>
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc42:	2e00      	cmp	r6, #0
 800cc44:	d0fa      	beq.n	800cc3c <__sflush_r+0x18>
 800cc46:	2300      	movs	r3, #0
 800cc48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc4c:	682f      	ldr	r7, [r5, #0]
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	d032      	beq.n	800ccb8 <__sflush_r+0x94>
 800cc52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	075a      	lsls	r2, r3, #29
 800cc58:	d505      	bpl.n	800cc66 <__sflush_r+0x42>
 800cc5a:	6863      	ldr	r3, [r4, #4]
 800cc5c:	1ac0      	subs	r0, r0, r3
 800cc5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc60:	b10b      	cbz	r3, 800cc66 <__sflush_r+0x42>
 800cc62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc64:	1ac0      	subs	r0, r0, r3
 800cc66:	2300      	movs	r3, #0
 800cc68:	4602      	mov	r2, r0
 800cc6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	6a21      	ldr	r1, [r4, #32]
 800cc70:	47b0      	blx	r6
 800cc72:	1c43      	adds	r3, r0, #1
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	d106      	bne.n	800cc86 <__sflush_r+0x62>
 800cc78:	6829      	ldr	r1, [r5, #0]
 800cc7a:	291d      	cmp	r1, #29
 800cc7c:	d82c      	bhi.n	800ccd8 <__sflush_r+0xb4>
 800cc7e:	4a29      	ldr	r2, [pc, #164]	; (800cd24 <__sflush_r+0x100>)
 800cc80:	40ca      	lsrs	r2, r1
 800cc82:	07d6      	lsls	r6, r2, #31
 800cc84:	d528      	bpl.n	800ccd8 <__sflush_r+0xb4>
 800cc86:	2200      	movs	r2, #0
 800cc88:	6062      	str	r2, [r4, #4]
 800cc8a:	6922      	ldr	r2, [r4, #16]
 800cc8c:	04d9      	lsls	r1, r3, #19
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	d504      	bpl.n	800cc9c <__sflush_r+0x78>
 800cc92:	1c42      	adds	r2, r0, #1
 800cc94:	d101      	bne.n	800cc9a <__sflush_r+0x76>
 800cc96:	682b      	ldr	r3, [r5, #0]
 800cc98:	b903      	cbnz	r3, 800cc9c <__sflush_r+0x78>
 800cc9a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc9e:	602f      	str	r7, [r5, #0]
 800cca0:	2900      	cmp	r1, #0
 800cca2:	d0cb      	beq.n	800cc3c <__sflush_r+0x18>
 800cca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cca8:	4299      	cmp	r1, r3
 800ccaa:	d002      	beq.n	800ccb2 <__sflush_r+0x8e>
 800ccac:	4628      	mov	r0, r5
 800ccae:	f000 fd85 	bl	800d7bc <_free_r>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ccb6:	e7c2      	b.n	800cc3e <__sflush_r+0x1a>
 800ccb8:	6a21      	ldr	r1, [r4, #32]
 800ccba:	2301      	movs	r3, #1
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	47b0      	blx	r6
 800ccc0:	1c41      	adds	r1, r0, #1
 800ccc2:	d1c7      	bne.n	800cc54 <__sflush_r+0x30>
 800ccc4:	682b      	ldr	r3, [r5, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d0c4      	beq.n	800cc54 <__sflush_r+0x30>
 800ccca:	2b1d      	cmp	r3, #29
 800cccc:	d001      	beq.n	800ccd2 <__sflush_r+0xae>
 800ccce:	2b16      	cmp	r3, #22
 800ccd0:	d101      	bne.n	800ccd6 <__sflush_r+0xb2>
 800ccd2:	602f      	str	r7, [r5, #0]
 800ccd4:	e7b2      	b.n	800cc3c <__sflush_r+0x18>
 800ccd6:	89a3      	ldrh	r3, [r4, #12]
 800ccd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	e7ae      	b.n	800cc3e <__sflush_r+0x1a>
 800cce0:	690f      	ldr	r7, [r1, #16]
 800cce2:	2f00      	cmp	r7, #0
 800cce4:	d0aa      	beq.n	800cc3c <__sflush_r+0x18>
 800cce6:	0793      	lsls	r3, r2, #30
 800cce8:	bf18      	it	ne
 800ccea:	2300      	movne	r3, #0
 800ccec:	680e      	ldr	r6, [r1, #0]
 800ccee:	bf08      	it	eq
 800ccf0:	694b      	ldreq	r3, [r1, #20]
 800ccf2:	1bf6      	subs	r6, r6, r7
 800ccf4:	600f      	str	r7, [r1, #0]
 800ccf6:	608b      	str	r3, [r1, #8]
 800ccf8:	2e00      	cmp	r6, #0
 800ccfa:	dd9f      	ble.n	800cc3c <__sflush_r+0x18>
 800ccfc:	4633      	mov	r3, r6
 800ccfe:	463a      	mov	r2, r7
 800cd00:	4628      	mov	r0, r5
 800cd02:	6a21      	ldr	r1, [r4, #32]
 800cd04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cd08:	47e0      	blx	ip
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	dc06      	bgt.n	800cd1c <__sflush_r+0xf8>
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd18:	81a3      	strh	r3, [r4, #12]
 800cd1a:	e790      	b.n	800cc3e <__sflush_r+0x1a>
 800cd1c:	4407      	add	r7, r0
 800cd1e:	1a36      	subs	r6, r6, r0
 800cd20:	e7ea      	b.n	800ccf8 <__sflush_r+0xd4>
 800cd22:	bf00      	nop
 800cd24:	20400001 	.word	0x20400001

0800cd28 <_fflush_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	690b      	ldr	r3, [r1, #16]
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	460c      	mov	r4, r1
 800cd30:	b913      	cbnz	r3, 800cd38 <_fflush_r+0x10>
 800cd32:	2500      	movs	r5, #0
 800cd34:	4628      	mov	r0, r5
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	b118      	cbz	r0, 800cd42 <_fflush_r+0x1a>
 800cd3a:	6983      	ldr	r3, [r0, #24]
 800cd3c:	b90b      	cbnz	r3, 800cd42 <_fflush_r+0x1a>
 800cd3e:	f000 f887 	bl	800ce50 <__sinit>
 800cd42:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <_fflush_r+0x6c>)
 800cd44:	429c      	cmp	r4, r3
 800cd46:	d11b      	bne.n	800cd80 <_fflush_r+0x58>
 800cd48:	686c      	ldr	r4, [r5, #4]
 800cd4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d0ef      	beq.n	800cd32 <_fflush_r+0xa>
 800cd52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd54:	07d0      	lsls	r0, r2, #31
 800cd56:	d404      	bmi.n	800cd62 <_fflush_r+0x3a>
 800cd58:	0599      	lsls	r1, r3, #22
 800cd5a:	d402      	bmi.n	800cd62 <_fflush_r+0x3a>
 800cd5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd5e:	f000 f91a 	bl	800cf96 <__retarget_lock_acquire_recursive>
 800cd62:	4628      	mov	r0, r5
 800cd64:	4621      	mov	r1, r4
 800cd66:	f7ff ff5d 	bl	800cc24 <__sflush_r>
 800cd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	07da      	lsls	r2, r3, #31
 800cd70:	d4e0      	bmi.n	800cd34 <_fflush_r+0xc>
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	059b      	lsls	r3, r3, #22
 800cd76:	d4dd      	bmi.n	800cd34 <_fflush_r+0xc>
 800cd78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd7a:	f000 f90d 	bl	800cf98 <__retarget_lock_release_recursive>
 800cd7e:	e7d9      	b.n	800cd34 <_fflush_r+0xc>
 800cd80:	4b05      	ldr	r3, [pc, #20]	; (800cd98 <_fflush_r+0x70>)
 800cd82:	429c      	cmp	r4, r3
 800cd84:	d101      	bne.n	800cd8a <_fflush_r+0x62>
 800cd86:	68ac      	ldr	r4, [r5, #8]
 800cd88:	e7df      	b.n	800cd4a <_fflush_r+0x22>
 800cd8a:	4b04      	ldr	r3, [pc, #16]	; (800cd9c <_fflush_r+0x74>)
 800cd8c:	429c      	cmp	r4, r3
 800cd8e:	bf08      	it	eq
 800cd90:	68ec      	ldreq	r4, [r5, #12]
 800cd92:	e7da      	b.n	800cd4a <_fflush_r+0x22>
 800cd94:	0800e1f0 	.word	0x0800e1f0
 800cd98:	0800e210 	.word	0x0800e210
 800cd9c:	0800e1d0 	.word	0x0800e1d0

0800cda0 <std>:
 800cda0:	2300      	movs	r3, #0
 800cda2:	b510      	push	{r4, lr}
 800cda4:	4604      	mov	r4, r0
 800cda6:	e9c0 3300 	strd	r3, r3, [r0]
 800cdaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdae:	6083      	str	r3, [r0, #8]
 800cdb0:	8181      	strh	r1, [r0, #12]
 800cdb2:	6643      	str	r3, [r0, #100]	; 0x64
 800cdb4:	81c2      	strh	r2, [r0, #14]
 800cdb6:	6183      	str	r3, [r0, #24]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	2208      	movs	r2, #8
 800cdbc:	305c      	adds	r0, #92	; 0x5c
 800cdbe:	f7fe fc4f 	bl	800b660 <memset>
 800cdc2:	4b05      	ldr	r3, [pc, #20]	; (800cdd8 <std+0x38>)
 800cdc4:	6224      	str	r4, [r4, #32]
 800cdc6:	6263      	str	r3, [r4, #36]	; 0x24
 800cdc8:	4b04      	ldr	r3, [pc, #16]	; (800cddc <std+0x3c>)
 800cdca:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdcc:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <std+0x40>)
 800cdce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdd0:	4b04      	ldr	r3, [pc, #16]	; (800cde4 <std+0x44>)
 800cdd2:	6323      	str	r3, [r4, #48]	; 0x30
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0800d995 	.word	0x0800d995
 800cddc:	0800d9b7 	.word	0x0800d9b7
 800cde0:	0800d9ef 	.word	0x0800d9ef
 800cde4:	0800da13 	.word	0x0800da13

0800cde8 <_cleanup_r>:
 800cde8:	4901      	ldr	r1, [pc, #4]	; (800cdf0 <_cleanup_r+0x8>)
 800cdea:	f000 b8af 	b.w	800cf4c <_fwalk_reent>
 800cdee:	bf00      	nop
 800cdf0:	0800cd29 	.word	0x0800cd29

0800cdf4 <__sfmoreglue>:
 800cdf4:	2268      	movs	r2, #104	; 0x68
 800cdf6:	b570      	push	{r4, r5, r6, lr}
 800cdf8:	1e4d      	subs	r5, r1, #1
 800cdfa:	4355      	muls	r5, r2
 800cdfc:	460e      	mov	r6, r1
 800cdfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce02:	f000 fd43 	bl	800d88c <_malloc_r>
 800ce06:	4604      	mov	r4, r0
 800ce08:	b140      	cbz	r0, 800ce1c <__sfmoreglue+0x28>
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	e9c0 1600 	strd	r1, r6, [r0]
 800ce10:	300c      	adds	r0, #12
 800ce12:	60a0      	str	r0, [r4, #8]
 800ce14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce18:	f7fe fc22 	bl	800b660 <memset>
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}

0800ce20 <__sfp_lock_acquire>:
 800ce20:	4801      	ldr	r0, [pc, #4]	; (800ce28 <__sfp_lock_acquire+0x8>)
 800ce22:	f000 b8b8 	b.w	800cf96 <__retarget_lock_acquire_recursive>
 800ce26:	bf00      	nop
 800ce28:	20001fb9 	.word	0x20001fb9

0800ce2c <__sfp_lock_release>:
 800ce2c:	4801      	ldr	r0, [pc, #4]	; (800ce34 <__sfp_lock_release+0x8>)
 800ce2e:	f000 b8b3 	b.w	800cf98 <__retarget_lock_release_recursive>
 800ce32:	bf00      	nop
 800ce34:	20001fb9 	.word	0x20001fb9

0800ce38 <__sinit_lock_acquire>:
 800ce38:	4801      	ldr	r0, [pc, #4]	; (800ce40 <__sinit_lock_acquire+0x8>)
 800ce3a:	f000 b8ac 	b.w	800cf96 <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	20001fba 	.word	0x20001fba

0800ce44 <__sinit_lock_release>:
 800ce44:	4801      	ldr	r0, [pc, #4]	; (800ce4c <__sinit_lock_release+0x8>)
 800ce46:	f000 b8a7 	b.w	800cf98 <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	20001fba 	.word	0x20001fba

0800ce50 <__sinit>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	4604      	mov	r4, r0
 800ce54:	f7ff fff0 	bl	800ce38 <__sinit_lock_acquire>
 800ce58:	69a3      	ldr	r3, [r4, #24]
 800ce5a:	b11b      	cbz	r3, 800ce64 <__sinit+0x14>
 800ce5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce60:	f7ff bff0 	b.w	800ce44 <__sinit_lock_release>
 800ce64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce68:	6523      	str	r3, [r4, #80]	; 0x50
 800ce6a:	4b13      	ldr	r3, [pc, #76]	; (800ceb8 <__sinit+0x68>)
 800ce6c:	4a13      	ldr	r2, [pc, #76]	; (800cebc <__sinit+0x6c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce72:	42a3      	cmp	r3, r4
 800ce74:	bf08      	it	eq
 800ce76:	2301      	moveq	r3, #1
 800ce78:	4620      	mov	r0, r4
 800ce7a:	bf08      	it	eq
 800ce7c:	61a3      	streq	r3, [r4, #24]
 800ce7e:	f000 f81f 	bl	800cec0 <__sfp>
 800ce82:	6060      	str	r0, [r4, #4]
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 f81b 	bl	800cec0 <__sfp>
 800ce8a:	60a0      	str	r0, [r4, #8]
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 f817 	bl	800cec0 <__sfp>
 800ce92:	2200      	movs	r2, #0
 800ce94:	2104      	movs	r1, #4
 800ce96:	60e0      	str	r0, [r4, #12]
 800ce98:	6860      	ldr	r0, [r4, #4]
 800ce9a:	f7ff ff81 	bl	800cda0 <std>
 800ce9e:	2201      	movs	r2, #1
 800cea0:	2109      	movs	r1, #9
 800cea2:	68a0      	ldr	r0, [r4, #8]
 800cea4:	f7ff ff7c 	bl	800cda0 <std>
 800cea8:	2202      	movs	r2, #2
 800ceaa:	2112      	movs	r1, #18
 800ceac:	68e0      	ldr	r0, [r4, #12]
 800ceae:	f7ff ff77 	bl	800cda0 <std>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	61a3      	str	r3, [r4, #24]
 800ceb6:	e7d1      	b.n	800ce5c <__sinit+0xc>
 800ceb8:	0800e108 	.word	0x0800e108
 800cebc:	0800cde9 	.word	0x0800cde9

0800cec0 <__sfp>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	4607      	mov	r7, r0
 800cec4:	f7ff ffac 	bl	800ce20 <__sfp_lock_acquire>
 800cec8:	4b1e      	ldr	r3, [pc, #120]	; (800cf44 <__sfp+0x84>)
 800ceca:	681e      	ldr	r6, [r3, #0]
 800cecc:	69b3      	ldr	r3, [r6, #24]
 800cece:	b913      	cbnz	r3, 800ced6 <__sfp+0x16>
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff ffbd 	bl	800ce50 <__sinit>
 800ced6:	3648      	adds	r6, #72	; 0x48
 800ced8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cedc:	3b01      	subs	r3, #1
 800cede:	d503      	bpl.n	800cee8 <__sfp+0x28>
 800cee0:	6833      	ldr	r3, [r6, #0]
 800cee2:	b30b      	cbz	r3, 800cf28 <__sfp+0x68>
 800cee4:	6836      	ldr	r6, [r6, #0]
 800cee6:	e7f7      	b.n	800ced8 <__sfp+0x18>
 800cee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ceec:	b9d5      	cbnz	r5, 800cf24 <__sfp+0x64>
 800ceee:	4b16      	ldr	r3, [pc, #88]	; (800cf48 <__sfp+0x88>)
 800cef0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cef4:	60e3      	str	r3, [r4, #12]
 800cef6:	6665      	str	r5, [r4, #100]	; 0x64
 800cef8:	f000 f84c 	bl	800cf94 <__retarget_lock_init_recursive>
 800cefc:	f7ff ff96 	bl	800ce2c <__sfp_lock_release>
 800cf00:	2208      	movs	r2, #8
 800cf02:	4629      	mov	r1, r5
 800cf04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf0c:	6025      	str	r5, [r4, #0]
 800cf0e:	61a5      	str	r5, [r4, #24]
 800cf10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf14:	f7fe fba4 	bl	800b660 <memset>
 800cf18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf20:	4620      	mov	r0, r4
 800cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf24:	3468      	adds	r4, #104	; 0x68
 800cf26:	e7d9      	b.n	800cedc <__sfp+0x1c>
 800cf28:	2104      	movs	r1, #4
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	f7ff ff62 	bl	800cdf4 <__sfmoreglue>
 800cf30:	4604      	mov	r4, r0
 800cf32:	6030      	str	r0, [r6, #0]
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d1d5      	bne.n	800cee4 <__sfp+0x24>
 800cf38:	f7ff ff78 	bl	800ce2c <__sfp_lock_release>
 800cf3c:	230c      	movs	r3, #12
 800cf3e:	603b      	str	r3, [r7, #0]
 800cf40:	e7ee      	b.n	800cf20 <__sfp+0x60>
 800cf42:	bf00      	nop
 800cf44:	0800e108 	.word	0x0800e108
 800cf48:	ffff0001 	.word	0xffff0001

0800cf4c <_fwalk_reent>:
 800cf4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf50:	4606      	mov	r6, r0
 800cf52:	4688      	mov	r8, r1
 800cf54:	2700      	movs	r7, #0
 800cf56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf5e:	f1b9 0901 	subs.w	r9, r9, #1
 800cf62:	d505      	bpl.n	800cf70 <_fwalk_reent+0x24>
 800cf64:	6824      	ldr	r4, [r4, #0]
 800cf66:	2c00      	cmp	r4, #0
 800cf68:	d1f7      	bne.n	800cf5a <_fwalk_reent+0xe>
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf70:	89ab      	ldrh	r3, [r5, #12]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d907      	bls.n	800cf86 <_fwalk_reent+0x3a>
 800cf76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	d003      	beq.n	800cf86 <_fwalk_reent+0x3a>
 800cf7e:	4629      	mov	r1, r5
 800cf80:	4630      	mov	r0, r6
 800cf82:	47c0      	blx	r8
 800cf84:	4307      	orrs	r7, r0
 800cf86:	3568      	adds	r5, #104	; 0x68
 800cf88:	e7e9      	b.n	800cf5e <_fwalk_reent+0x12>
	...

0800cf8c <_localeconv_r>:
 800cf8c:	4800      	ldr	r0, [pc, #0]	; (800cf90 <_localeconv_r+0x4>)
 800cf8e:	4770      	bx	lr
 800cf90:	200002c4 	.word	0x200002c4

0800cf94 <__retarget_lock_init_recursive>:
 800cf94:	4770      	bx	lr

0800cf96 <__retarget_lock_acquire_recursive>:
 800cf96:	4770      	bx	lr

0800cf98 <__retarget_lock_release_recursive>:
 800cf98:	4770      	bx	lr

0800cf9a <__swhatbuf_r>:
 800cf9a:	b570      	push	{r4, r5, r6, lr}
 800cf9c:	460e      	mov	r6, r1
 800cf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa2:	4614      	mov	r4, r2
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	461d      	mov	r5, r3
 800cfa8:	b096      	sub	sp, #88	; 0x58
 800cfaa:	da08      	bge.n	800cfbe <__swhatbuf_r+0x24>
 800cfac:	2200      	movs	r2, #0
 800cfae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfb2:	602a      	str	r2, [r5, #0]
 800cfb4:	061a      	lsls	r2, r3, #24
 800cfb6:	d410      	bmi.n	800cfda <__swhatbuf_r+0x40>
 800cfb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfbc:	e00e      	b.n	800cfdc <__swhatbuf_r+0x42>
 800cfbe:	466a      	mov	r2, sp
 800cfc0:	f000 fd7e 	bl	800dac0 <_fstat_r>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	dbf1      	blt.n	800cfac <__swhatbuf_r+0x12>
 800cfc8:	9a01      	ldr	r2, [sp, #4]
 800cfca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfd2:	425a      	negs	r2, r3
 800cfd4:	415a      	adcs	r2, r3
 800cfd6:	602a      	str	r2, [r5, #0]
 800cfd8:	e7ee      	b.n	800cfb8 <__swhatbuf_r+0x1e>
 800cfda:	2340      	movs	r3, #64	; 0x40
 800cfdc:	2000      	movs	r0, #0
 800cfde:	6023      	str	r3, [r4, #0]
 800cfe0:	b016      	add	sp, #88	; 0x58
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}

0800cfe4 <__smakebuf_r>:
 800cfe4:	898b      	ldrh	r3, [r1, #12]
 800cfe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe8:	079d      	lsls	r5, r3, #30
 800cfea:	4606      	mov	r6, r0
 800cfec:	460c      	mov	r4, r1
 800cfee:	d507      	bpl.n	800d000 <__smakebuf_r+0x1c>
 800cff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	6123      	str	r3, [r4, #16]
 800cff8:	2301      	movs	r3, #1
 800cffa:	6163      	str	r3, [r4, #20]
 800cffc:	b002      	add	sp, #8
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	466a      	mov	r2, sp
 800d002:	ab01      	add	r3, sp, #4
 800d004:	f7ff ffc9 	bl	800cf9a <__swhatbuf_r>
 800d008:	9900      	ldr	r1, [sp, #0]
 800d00a:	4605      	mov	r5, r0
 800d00c:	4630      	mov	r0, r6
 800d00e:	f000 fc3d 	bl	800d88c <_malloc_r>
 800d012:	b948      	cbnz	r0, 800d028 <__smakebuf_r+0x44>
 800d014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d018:	059a      	lsls	r2, r3, #22
 800d01a:	d4ef      	bmi.n	800cffc <__smakebuf_r+0x18>
 800d01c:	f023 0303 	bic.w	r3, r3, #3
 800d020:	f043 0302 	orr.w	r3, r3, #2
 800d024:	81a3      	strh	r3, [r4, #12]
 800d026:	e7e3      	b.n	800cff0 <__smakebuf_r+0xc>
 800d028:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <__smakebuf_r+0x7c>)
 800d02a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	6020      	str	r0, [r4, #0]
 800d030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	9b00      	ldr	r3, [sp, #0]
 800d038:	6120      	str	r0, [r4, #16]
 800d03a:	6163      	str	r3, [r4, #20]
 800d03c:	9b01      	ldr	r3, [sp, #4]
 800d03e:	b15b      	cbz	r3, 800d058 <__smakebuf_r+0x74>
 800d040:	4630      	mov	r0, r6
 800d042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d046:	f000 fd4d 	bl	800dae4 <_isatty_r>
 800d04a:	b128      	cbz	r0, 800d058 <__smakebuf_r+0x74>
 800d04c:	89a3      	ldrh	r3, [r4, #12]
 800d04e:	f023 0303 	bic.w	r3, r3, #3
 800d052:	f043 0301 	orr.w	r3, r3, #1
 800d056:	81a3      	strh	r3, [r4, #12]
 800d058:	89a0      	ldrh	r0, [r4, #12]
 800d05a:	4305      	orrs	r5, r0
 800d05c:	81a5      	strh	r5, [r4, #12]
 800d05e:	e7cd      	b.n	800cffc <__smakebuf_r+0x18>
 800d060:	0800cde9 	.word	0x0800cde9

0800d064 <malloc>:
 800d064:	4b02      	ldr	r3, [pc, #8]	; (800d070 <malloc+0xc>)
 800d066:	4601      	mov	r1, r0
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	f000 bc0f 	b.w	800d88c <_malloc_r>
 800d06e:	bf00      	nop
 800d070:	20000170 	.word	0x20000170

0800d074 <memchr>:
 800d074:	4603      	mov	r3, r0
 800d076:	b510      	push	{r4, lr}
 800d078:	b2c9      	uxtb	r1, r1
 800d07a:	4402      	add	r2, r0
 800d07c:	4293      	cmp	r3, r2
 800d07e:	4618      	mov	r0, r3
 800d080:	d101      	bne.n	800d086 <memchr+0x12>
 800d082:	2000      	movs	r0, #0
 800d084:	e003      	b.n	800d08e <memchr+0x1a>
 800d086:	7804      	ldrb	r4, [r0, #0]
 800d088:	3301      	adds	r3, #1
 800d08a:	428c      	cmp	r4, r1
 800d08c:	d1f6      	bne.n	800d07c <memchr+0x8>
 800d08e:	bd10      	pop	{r4, pc}

0800d090 <_Balloc>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d094:	4604      	mov	r4, r0
 800d096:	460d      	mov	r5, r1
 800d098:	b976      	cbnz	r6, 800d0b8 <_Balloc+0x28>
 800d09a:	2010      	movs	r0, #16
 800d09c:	f7ff ffe2 	bl	800d064 <malloc>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	6260      	str	r0, [r4, #36]	; 0x24
 800d0a4:	b920      	cbnz	r0, 800d0b0 <_Balloc+0x20>
 800d0a6:	2166      	movs	r1, #102	; 0x66
 800d0a8:	4b17      	ldr	r3, [pc, #92]	; (800d108 <_Balloc+0x78>)
 800d0aa:	4818      	ldr	r0, [pc, #96]	; (800d10c <_Balloc+0x7c>)
 800d0ac:	f000 fcc8 	bl	800da40 <__assert_func>
 800d0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0b4:	6006      	str	r6, [r0, #0]
 800d0b6:	60c6      	str	r6, [r0, #12]
 800d0b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d0ba:	68f3      	ldr	r3, [r6, #12]
 800d0bc:	b183      	cbz	r3, 800d0e0 <_Balloc+0x50>
 800d0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0c6:	b9b8      	cbnz	r0, 800d0f8 <_Balloc+0x68>
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d0ce:	1d72      	adds	r2, r6, #5
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	0092      	lsls	r2, r2, #2
 800d0d4:	f000 fb5e 	bl	800d794 <_calloc_r>
 800d0d8:	b160      	cbz	r0, 800d0f4 <_Balloc+0x64>
 800d0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0de:	e00e      	b.n	800d0fe <_Balloc+0x6e>
 800d0e0:	2221      	movs	r2, #33	; 0x21
 800d0e2:	2104      	movs	r1, #4
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f000 fb55 	bl	800d794 <_calloc_r>
 800d0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0ec:	60f0      	str	r0, [r6, #12]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1e4      	bne.n	800d0be <_Balloc+0x2e>
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}
 800d0f8:	6802      	ldr	r2, [r0, #0]
 800d0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0fe:	2300      	movs	r3, #0
 800d100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d104:	e7f7      	b.n	800d0f6 <_Balloc+0x66>
 800d106:	bf00      	nop
 800d108:	0800e14d 	.word	0x0800e14d
 800d10c:	0800e230 	.word	0x0800e230

0800d110 <_Bfree>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d114:	4605      	mov	r5, r0
 800d116:	460c      	mov	r4, r1
 800d118:	b976      	cbnz	r6, 800d138 <_Bfree+0x28>
 800d11a:	2010      	movs	r0, #16
 800d11c:	f7ff ffa2 	bl	800d064 <malloc>
 800d120:	4602      	mov	r2, r0
 800d122:	6268      	str	r0, [r5, #36]	; 0x24
 800d124:	b920      	cbnz	r0, 800d130 <_Bfree+0x20>
 800d126:	218a      	movs	r1, #138	; 0x8a
 800d128:	4b08      	ldr	r3, [pc, #32]	; (800d14c <_Bfree+0x3c>)
 800d12a:	4809      	ldr	r0, [pc, #36]	; (800d150 <_Bfree+0x40>)
 800d12c:	f000 fc88 	bl	800da40 <__assert_func>
 800d130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d134:	6006      	str	r6, [r0, #0]
 800d136:	60c6      	str	r6, [r0, #12]
 800d138:	b13c      	cbz	r4, 800d14a <_Bfree+0x3a>
 800d13a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d13c:	6862      	ldr	r2, [r4, #4]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d144:	6021      	str	r1, [r4, #0]
 800d146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d14a:	bd70      	pop	{r4, r5, r6, pc}
 800d14c:	0800e14d 	.word	0x0800e14d
 800d150:	0800e230 	.word	0x0800e230

0800d154 <__multadd>:
 800d154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d158:	4607      	mov	r7, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	461e      	mov	r6, r3
 800d15e:	2000      	movs	r0, #0
 800d160:	690d      	ldr	r5, [r1, #16]
 800d162:	f101 0c14 	add.w	ip, r1, #20
 800d166:	f8dc 3000 	ldr.w	r3, [ip]
 800d16a:	3001      	adds	r0, #1
 800d16c:	b299      	uxth	r1, r3
 800d16e:	fb02 6101 	mla	r1, r2, r1, r6
 800d172:	0c1e      	lsrs	r6, r3, #16
 800d174:	0c0b      	lsrs	r3, r1, #16
 800d176:	fb02 3306 	mla	r3, r2, r6, r3
 800d17a:	b289      	uxth	r1, r1
 800d17c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d180:	4285      	cmp	r5, r0
 800d182:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d186:	f84c 1b04 	str.w	r1, [ip], #4
 800d18a:	dcec      	bgt.n	800d166 <__multadd+0x12>
 800d18c:	b30e      	cbz	r6, 800d1d2 <__multadd+0x7e>
 800d18e:	68a3      	ldr	r3, [r4, #8]
 800d190:	42ab      	cmp	r3, r5
 800d192:	dc19      	bgt.n	800d1c8 <__multadd+0x74>
 800d194:	6861      	ldr	r1, [r4, #4]
 800d196:	4638      	mov	r0, r7
 800d198:	3101      	adds	r1, #1
 800d19a:	f7ff ff79 	bl	800d090 <_Balloc>
 800d19e:	4680      	mov	r8, r0
 800d1a0:	b928      	cbnz	r0, 800d1ae <__multadd+0x5a>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	21b5      	movs	r1, #181	; 0xb5
 800d1a6:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <__multadd+0x84>)
 800d1a8:	480c      	ldr	r0, [pc, #48]	; (800d1dc <__multadd+0x88>)
 800d1aa:	f000 fc49 	bl	800da40 <__assert_func>
 800d1ae:	6922      	ldr	r2, [r4, #16]
 800d1b0:	f104 010c 	add.w	r1, r4, #12
 800d1b4:	3202      	adds	r2, #2
 800d1b6:	0092      	lsls	r2, r2, #2
 800d1b8:	300c      	adds	r0, #12
 800d1ba:	f7fe fa43 	bl	800b644 <memcpy>
 800d1be:	4621      	mov	r1, r4
 800d1c0:	4638      	mov	r0, r7
 800d1c2:	f7ff ffa5 	bl	800d110 <_Bfree>
 800d1c6:	4644      	mov	r4, r8
 800d1c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1cc:	3501      	adds	r5, #1
 800d1ce:	615e      	str	r6, [r3, #20]
 800d1d0:	6125      	str	r5, [r4, #16]
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d8:	0800e1bf 	.word	0x0800e1bf
 800d1dc:	0800e230 	.word	0x0800e230

0800d1e0 <__hi0bits>:
 800d1e0:	0c02      	lsrs	r2, r0, #16
 800d1e2:	0412      	lsls	r2, r2, #16
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	b9ca      	cbnz	r2, 800d21c <__hi0bits+0x3c>
 800d1e8:	0403      	lsls	r3, r0, #16
 800d1ea:	2010      	movs	r0, #16
 800d1ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d1f0:	bf04      	itt	eq
 800d1f2:	021b      	lsleq	r3, r3, #8
 800d1f4:	3008      	addeq	r0, #8
 800d1f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d1fa:	bf04      	itt	eq
 800d1fc:	011b      	lsleq	r3, r3, #4
 800d1fe:	3004      	addeq	r0, #4
 800d200:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d204:	bf04      	itt	eq
 800d206:	009b      	lsleq	r3, r3, #2
 800d208:	3002      	addeq	r0, #2
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	db05      	blt.n	800d21a <__hi0bits+0x3a>
 800d20e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d212:	f100 0001 	add.w	r0, r0, #1
 800d216:	bf08      	it	eq
 800d218:	2020      	moveq	r0, #32
 800d21a:	4770      	bx	lr
 800d21c:	2000      	movs	r0, #0
 800d21e:	e7e5      	b.n	800d1ec <__hi0bits+0xc>

0800d220 <__lo0bits>:
 800d220:	6803      	ldr	r3, [r0, #0]
 800d222:	4602      	mov	r2, r0
 800d224:	f013 0007 	ands.w	r0, r3, #7
 800d228:	d00b      	beq.n	800d242 <__lo0bits+0x22>
 800d22a:	07d9      	lsls	r1, r3, #31
 800d22c:	d421      	bmi.n	800d272 <__lo0bits+0x52>
 800d22e:	0798      	lsls	r0, r3, #30
 800d230:	bf49      	itett	mi
 800d232:	085b      	lsrmi	r3, r3, #1
 800d234:	089b      	lsrpl	r3, r3, #2
 800d236:	2001      	movmi	r0, #1
 800d238:	6013      	strmi	r3, [r2, #0]
 800d23a:	bf5c      	itt	pl
 800d23c:	2002      	movpl	r0, #2
 800d23e:	6013      	strpl	r3, [r2, #0]
 800d240:	4770      	bx	lr
 800d242:	b299      	uxth	r1, r3
 800d244:	b909      	cbnz	r1, 800d24a <__lo0bits+0x2a>
 800d246:	2010      	movs	r0, #16
 800d248:	0c1b      	lsrs	r3, r3, #16
 800d24a:	b2d9      	uxtb	r1, r3
 800d24c:	b909      	cbnz	r1, 800d252 <__lo0bits+0x32>
 800d24e:	3008      	adds	r0, #8
 800d250:	0a1b      	lsrs	r3, r3, #8
 800d252:	0719      	lsls	r1, r3, #28
 800d254:	bf04      	itt	eq
 800d256:	091b      	lsreq	r3, r3, #4
 800d258:	3004      	addeq	r0, #4
 800d25a:	0799      	lsls	r1, r3, #30
 800d25c:	bf04      	itt	eq
 800d25e:	089b      	lsreq	r3, r3, #2
 800d260:	3002      	addeq	r0, #2
 800d262:	07d9      	lsls	r1, r3, #31
 800d264:	d403      	bmi.n	800d26e <__lo0bits+0x4e>
 800d266:	085b      	lsrs	r3, r3, #1
 800d268:	f100 0001 	add.w	r0, r0, #1
 800d26c:	d003      	beq.n	800d276 <__lo0bits+0x56>
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	4770      	bx	lr
 800d272:	2000      	movs	r0, #0
 800d274:	4770      	bx	lr
 800d276:	2020      	movs	r0, #32
 800d278:	4770      	bx	lr
	...

0800d27c <__i2b>:
 800d27c:	b510      	push	{r4, lr}
 800d27e:	460c      	mov	r4, r1
 800d280:	2101      	movs	r1, #1
 800d282:	f7ff ff05 	bl	800d090 <_Balloc>
 800d286:	4602      	mov	r2, r0
 800d288:	b928      	cbnz	r0, 800d296 <__i2b+0x1a>
 800d28a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d28e:	4b04      	ldr	r3, [pc, #16]	; (800d2a0 <__i2b+0x24>)
 800d290:	4804      	ldr	r0, [pc, #16]	; (800d2a4 <__i2b+0x28>)
 800d292:	f000 fbd5 	bl	800da40 <__assert_func>
 800d296:	2301      	movs	r3, #1
 800d298:	6144      	str	r4, [r0, #20]
 800d29a:	6103      	str	r3, [r0, #16]
 800d29c:	bd10      	pop	{r4, pc}
 800d29e:	bf00      	nop
 800d2a0:	0800e1bf 	.word	0x0800e1bf
 800d2a4:	0800e230 	.word	0x0800e230

0800d2a8 <__multiply>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	4691      	mov	r9, r2
 800d2ae:	690a      	ldr	r2, [r1, #16]
 800d2b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	bfbe      	ittt	lt
 800d2ba:	460b      	movlt	r3, r1
 800d2bc:	464c      	movlt	r4, r9
 800d2be:	4699      	movlt	r9, r3
 800d2c0:	6927      	ldr	r7, [r4, #16]
 800d2c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2c6:	68a3      	ldr	r3, [r4, #8]
 800d2c8:	6861      	ldr	r1, [r4, #4]
 800d2ca:	eb07 060a 	add.w	r6, r7, sl
 800d2ce:	42b3      	cmp	r3, r6
 800d2d0:	b085      	sub	sp, #20
 800d2d2:	bfb8      	it	lt
 800d2d4:	3101      	addlt	r1, #1
 800d2d6:	f7ff fedb 	bl	800d090 <_Balloc>
 800d2da:	b930      	cbnz	r0, 800d2ea <__multiply+0x42>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	f240 115d 	movw	r1, #349	; 0x15d
 800d2e2:	4b43      	ldr	r3, [pc, #268]	; (800d3f0 <__multiply+0x148>)
 800d2e4:	4843      	ldr	r0, [pc, #268]	; (800d3f4 <__multiply+0x14c>)
 800d2e6:	f000 fbab 	bl	800da40 <__assert_func>
 800d2ea:	f100 0514 	add.w	r5, r0, #20
 800d2ee:	462b      	mov	r3, r5
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2f6:	4543      	cmp	r3, r8
 800d2f8:	d321      	bcc.n	800d33e <__multiply+0x96>
 800d2fa:	f104 0314 	add.w	r3, r4, #20
 800d2fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d302:	f109 0314 	add.w	r3, r9, #20
 800d306:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d30a:	9202      	str	r2, [sp, #8]
 800d30c:	1b3a      	subs	r2, r7, r4
 800d30e:	3a15      	subs	r2, #21
 800d310:	f022 0203 	bic.w	r2, r2, #3
 800d314:	3204      	adds	r2, #4
 800d316:	f104 0115 	add.w	r1, r4, #21
 800d31a:	428f      	cmp	r7, r1
 800d31c:	bf38      	it	cc
 800d31e:	2204      	movcc	r2, #4
 800d320:	9201      	str	r2, [sp, #4]
 800d322:	9a02      	ldr	r2, [sp, #8]
 800d324:	9303      	str	r3, [sp, #12]
 800d326:	429a      	cmp	r2, r3
 800d328:	d80c      	bhi.n	800d344 <__multiply+0x9c>
 800d32a:	2e00      	cmp	r6, #0
 800d32c:	dd03      	ble.n	800d336 <__multiply+0x8e>
 800d32e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d332:	2b00      	cmp	r3, #0
 800d334:	d059      	beq.n	800d3ea <__multiply+0x142>
 800d336:	6106      	str	r6, [r0, #16]
 800d338:	b005      	add	sp, #20
 800d33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	f843 2b04 	str.w	r2, [r3], #4
 800d342:	e7d8      	b.n	800d2f6 <__multiply+0x4e>
 800d344:	f8b3 a000 	ldrh.w	sl, [r3]
 800d348:	f1ba 0f00 	cmp.w	sl, #0
 800d34c:	d023      	beq.n	800d396 <__multiply+0xee>
 800d34e:	46a9      	mov	r9, r5
 800d350:	f04f 0c00 	mov.w	ip, #0
 800d354:	f104 0e14 	add.w	lr, r4, #20
 800d358:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d35c:	f8d9 1000 	ldr.w	r1, [r9]
 800d360:	fa1f fb82 	uxth.w	fp, r2
 800d364:	b289      	uxth	r1, r1
 800d366:	fb0a 110b 	mla	r1, sl, fp, r1
 800d36a:	4461      	add	r1, ip
 800d36c:	f8d9 c000 	ldr.w	ip, [r9]
 800d370:	0c12      	lsrs	r2, r2, #16
 800d372:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d376:	fb0a c202 	mla	r2, sl, r2, ip
 800d37a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d37e:	b289      	uxth	r1, r1
 800d380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d384:	4577      	cmp	r7, lr
 800d386:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d38a:	f849 1b04 	str.w	r1, [r9], #4
 800d38e:	d8e3      	bhi.n	800d358 <__multiply+0xb0>
 800d390:	9a01      	ldr	r2, [sp, #4]
 800d392:	f845 c002 	str.w	ip, [r5, r2]
 800d396:	9a03      	ldr	r2, [sp, #12]
 800d398:	3304      	adds	r3, #4
 800d39a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d39e:	f1b9 0f00 	cmp.w	r9, #0
 800d3a2:	d020      	beq.n	800d3e6 <__multiply+0x13e>
 800d3a4:	46ae      	mov	lr, r5
 800d3a6:	f04f 0a00 	mov.w	sl, #0
 800d3aa:	6829      	ldr	r1, [r5, #0]
 800d3ac:	f104 0c14 	add.w	ip, r4, #20
 800d3b0:	f8bc b000 	ldrh.w	fp, [ip]
 800d3b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3b8:	b289      	uxth	r1, r1
 800d3ba:	fb09 220b 	mla	r2, r9, fp, r2
 800d3be:	4492      	add	sl, r2
 800d3c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d3c4:	f84e 1b04 	str.w	r1, [lr], #4
 800d3c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d3cc:	f8be 1000 	ldrh.w	r1, [lr]
 800d3d0:	0c12      	lsrs	r2, r2, #16
 800d3d2:	fb09 1102 	mla	r1, r9, r2, r1
 800d3d6:	4567      	cmp	r7, ip
 800d3d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d3dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3e0:	d8e6      	bhi.n	800d3b0 <__multiply+0x108>
 800d3e2:	9a01      	ldr	r2, [sp, #4]
 800d3e4:	50a9      	str	r1, [r5, r2]
 800d3e6:	3504      	adds	r5, #4
 800d3e8:	e79b      	b.n	800d322 <__multiply+0x7a>
 800d3ea:	3e01      	subs	r6, #1
 800d3ec:	e79d      	b.n	800d32a <__multiply+0x82>
 800d3ee:	bf00      	nop
 800d3f0:	0800e1bf 	.word	0x0800e1bf
 800d3f4:	0800e230 	.word	0x0800e230

0800d3f8 <__pow5mult>:
 800d3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3fc:	4615      	mov	r5, r2
 800d3fe:	f012 0203 	ands.w	r2, r2, #3
 800d402:	4606      	mov	r6, r0
 800d404:	460f      	mov	r7, r1
 800d406:	d007      	beq.n	800d418 <__pow5mult+0x20>
 800d408:	4c25      	ldr	r4, [pc, #148]	; (800d4a0 <__pow5mult+0xa8>)
 800d40a:	3a01      	subs	r2, #1
 800d40c:	2300      	movs	r3, #0
 800d40e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d412:	f7ff fe9f 	bl	800d154 <__multadd>
 800d416:	4607      	mov	r7, r0
 800d418:	10ad      	asrs	r5, r5, #2
 800d41a:	d03d      	beq.n	800d498 <__pow5mult+0xa0>
 800d41c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d41e:	b97c      	cbnz	r4, 800d440 <__pow5mult+0x48>
 800d420:	2010      	movs	r0, #16
 800d422:	f7ff fe1f 	bl	800d064 <malloc>
 800d426:	4602      	mov	r2, r0
 800d428:	6270      	str	r0, [r6, #36]	; 0x24
 800d42a:	b928      	cbnz	r0, 800d438 <__pow5mult+0x40>
 800d42c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d430:	4b1c      	ldr	r3, [pc, #112]	; (800d4a4 <__pow5mult+0xac>)
 800d432:	481d      	ldr	r0, [pc, #116]	; (800d4a8 <__pow5mult+0xb0>)
 800d434:	f000 fb04 	bl	800da40 <__assert_func>
 800d438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d43c:	6004      	str	r4, [r0, #0]
 800d43e:	60c4      	str	r4, [r0, #12]
 800d440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d448:	b94c      	cbnz	r4, 800d45e <__pow5mult+0x66>
 800d44a:	f240 2171 	movw	r1, #625	; 0x271
 800d44e:	4630      	mov	r0, r6
 800d450:	f7ff ff14 	bl	800d27c <__i2b>
 800d454:	2300      	movs	r3, #0
 800d456:	4604      	mov	r4, r0
 800d458:	f8c8 0008 	str.w	r0, [r8, #8]
 800d45c:	6003      	str	r3, [r0, #0]
 800d45e:	f04f 0900 	mov.w	r9, #0
 800d462:	07eb      	lsls	r3, r5, #31
 800d464:	d50a      	bpl.n	800d47c <__pow5mult+0x84>
 800d466:	4639      	mov	r1, r7
 800d468:	4622      	mov	r2, r4
 800d46a:	4630      	mov	r0, r6
 800d46c:	f7ff ff1c 	bl	800d2a8 <__multiply>
 800d470:	4680      	mov	r8, r0
 800d472:	4639      	mov	r1, r7
 800d474:	4630      	mov	r0, r6
 800d476:	f7ff fe4b 	bl	800d110 <_Bfree>
 800d47a:	4647      	mov	r7, r8
 800d47c:	106d      	asrs	r5, r5, #1
 800d47e:	d00b      	beq.n	800d498 <__pow5mult+0xa0>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	b938      	cbnz	r0, 800d494 <__pow5mult+0x9c>
 800d484:	4622      	mov	r2, r4
 800d486:	4621      	mov	r1, r4
 800d488:	4630      	mov	r0, r6
 800d48a:	f7ff ff0d 	bl	800d2a8 <__multiply>
 800d48e:	6020      	str	r0, [r4, #0]
 800d490:	f8c0 9000 	str.w	r9, [r0]
 800d494:	4604      	mov	r4, r0
 800d496:	e7e4      	b.n	800d462 <__pow5mult+0x6a>
 800d498:	4638      	mov	r0, r7
 800d49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d49e:	bf00      	nop
 800d4a0:	0800e380 	.word	0x0800e380
 800d4a4:	0800e14d 	.word	0x0800e14d
 800d4a8:	0800e230 	.word	0x0800e230

0800d4ac <__lshift>:
 800d4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b0:	460c      	mov	r4, r1
 800d4b2:	4607      	mov	r7, r0
 800d4b4:	4691      	mov	r9, r2
 800d4b6:	6923      	ldr	r3, [r4, #16]
 800d4b8:	6849      	ldr	r1, [r1, #4]
 800d4ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4c4:	f108 0601 	add.w	r6, r8, #1
 800d4c8:	42b3      	cmp	r3, r6
 800d4ca:	db0b      	blt.n	800d4e4 <__lshift+0x38>
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	f7ff fddf 	bl	800d090 <_Balloc>
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	b948      	cbnz	r0, 800d4ea <__lshift+0x3e>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d4dc:	4b29      	ldr	r3, [pc, #164]	; (800d584 <__lshift+0xd8>)
 800d4de:	482a      	ldr	r0, [pc, #168]	; (800d588 <__lshift+0xdc>)
 800d4e0:	f000 faae 	bl	800da40 <__assert_func>
 800d4e4:	3101      	adds	r1, #1
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	e7ee      	b.n	800d4c8 <__lshift+0x1c>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	f100 0114 	add.w	r1, r0, #20
 800d4f0:	f100 0210 	add.w	r2, r0, #16
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	4553      	cmp	r3, sl
 800d4f8:	db37      	blt.n	800d56a <__lshift+0xbe>
 800d4fa:	6920      	ldr	r0, [r4, #16]
 800d4fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d500:	f104 0314 	add.w	r3, r4, #20
 800d504:	f019 091f 	ands.w	r9, r9, #31
 800d508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d50c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d510:	d02f      	beq.n	800d572 <__lshift+0xc6>
 800d512:	468a      	mov	sl, r1
 800d514:	f04f 0c00 	mov.w	ip, #0
 800d518:	f1c9 0e20 	rsb	lr, r9, #32
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	fa02 f209 	lsl.w	r2, r2, r9
 800d522:	ea42 020c 	orr.w	r2, r2, ip
 800d526:	f84a 2b04 	str.w	r2, [sl], #4
 800d52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52e:	4298      	cmp	r0, r3
 800d530:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d534:	d8f2      	bhi.n	800d51c <__lshift+0x70>
 800d536:	1b03      	subs	r3, r0, r4
 800d538:	3b15      	subs	r3, #21
 800d53a:	f023 0303 	bic.w	r3, r3, #3
 800d53e:	3304      	adds	r3, #4
 800d540:	f104 0215 	add.w	r2, r4, #21
 800d544:	4290      	cmp	r0, r2
 800d546:	bf38      	it	cc
 800d548:	2304      	movcc	r3, #4
 800d54a:	f841 c003 	str.w	ip, [r1, r3]
 800d54e:	f1bc 0f00 	cmp.w	ip, #0
 800d552:	d001      	beq.n	800d558 <__lshift+0xac>
 800d554:	f108 0602 	add.w	r6, r8, #2
 800d558:	3e01      	subs	r6, #1
 800d55a:	4638      	mov	r0, r7
 800d55c:	4621      	mov	r1, r4
 800d55e:	612e      	str	r6, [r5, #16]
 800d560:	f7ff fdd6 	bl	800d110 <_Bfree>
 800d564:	4628      	mov	r0, r5
 800d566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d56e:	3301      	adds	r3, #1
 800d570:	e7c1      	b.n	800d4f6 <__lshift+0x4a>
 800d572:	3904      	subs	r1, #4
 800d574:	f853 2b04 	ldr.w	r2, [r3], #4
 800d578:	4298      	cmp	r0, r3
 800d57a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d57e:	d8f9      	bhi.n	800d574 <__lshift+0xc8>
 800d580:	e7ea      	b.n	800d558 <__lshift+0xac>
 800d582:	bf00      	nop
 800d584:	0800e1bf 	.word	0x0800e1bf
 800d588:	0800e230 	.word	0x0800e230

0800d58c <__mcmp>:
 800d58c:	4603      	mov	r3, r0
 800d58e:	690a      	ldr	r2, [r1, #16]
 800d590:	6900      	ldr	r0, [r0, #16]
 800d592:	b530      	push	{r4, r5, lr}
 800d594:	1a80      	subs	r0, r0, r2
 800d596:	d10d      	bne.n	800d5b4 <__mcmp+0x28>
 800d598:	3314      	adds	r3, #20
 800d59a:	3114      	adds	r1, #20
 800d59c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d5a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d5a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5ac:	4295      	cmp	r5, r2
 800d5ae:	d002      	beq.n	800d5b6 <__mcmp+0x2a>
 800d5b0:	d304      	bcc.n	800d5bc <__mcmp+0x30>
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	bd30      	pop	{r4, r5, pc}
 800d5b6:	42a3      	cmp	r3, r4
 800d5b8:	d3f4      	bcc.n	800d5a4 <__mcmp+0x18>
 800d5ba:	e7fb      	b.n	800d5b4 <__mcmp+0x28>
 800d5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5c0:	e7f8      	b.n	800d5b4 <__mcmp+0x28>
	...

0800d5c4 <__mdiff>:
 800d5c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	460d      	mov	r5, r1
 800d5ca:	4607      	mov	r7, r0
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	4614      	mov	r4, r2
 800d5d2:	f7ff ffdb 	bl	800d58c <__mcmp>
 800d5d6:	1e06      	subs	r6, r0, #0
 800d5d8:	d111      	bne.n	800d5fe <__mdiff+0x3a>
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4638      	mov	r0, r7
 800d5de:	f7ff fd57 	bl	800d090 <_Balloc>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	b928      	cbnz	r0, 800d5f2 <__mdiff+0x2e>
 800d5e6:	f240 2132 	movw	r1, #562	; 0x232
 800d5ea:	4b3a      	ldr	r3, [pc, #232]	; (800d6d4 <__mdiff+0x110>)
 800d5ec:	483a      	ldr	r0, [pc, #232]	; (800d6d8 <__mdiff+0x114>)
 800d5ee:	f000 fa27 	bl	800da40 <__assert_func>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fe:	bfa4      	itt	ge
 800d600:	4623      	movge	r3, r4
 800d602:	462c      	movge	r4, r5
 800d604:	4638      	mov	r0, r7
 800d606:	6861      	ldr	r1, [r4, #4]
 800d608:	bfa6      	itte	ge
 800d60a:	461d      	movge	r5, r3
 800d60c:	2600      	movge	r6, #0
 800d60e:	2601      	movlt	r6, #1
 800d610:	f7ff fd3e 	bl	800d090 <_Balloc>
 800d614:	4602      	mov	r2, r0
 800d616:	b918      	cbnz	r0, 800d620 <__mdiff+0x5c>
 800d618:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d61c:	4b2d      	ldr	r3, [pc, #180]	; (800d6d4 <__mdiff+0x110>)
 800d61e:	e7e5      	b.n	800d5ec <__mdiff+0x28>
 800d620:	f102 0814 	add.w	r8, r2, #20
 800d624:	46c2      	mov	sl, r8
 800d626:	f04f 0c00 	mov.w	ip, #0
 800d62a:	6927      	ldr	r7, [r4, #16]
 800d62c:	60c6      	str	r6, [r0, #12]
 800d62e:	692e      	ldr	r6, [r5, #16]
 800d630:	f104 0014 	add.w	r0, r4, #20
 800d634:	f105 0914 	add.w	r9, r5, #20
 800d638:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d63c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d640:	3410      	adds	r4, #16
 800d642:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d646:	f859 3b04 	ldr.w	r3, [r9], #4
 800d64a:	fa1f f18b 	uxth.w	r1, fp
 800d64e:	448c      	add	ip, r1
 800d650:	b299      	uxth	r1, r3
 800d652:	0c1b      	lsrs	r3, r3, #16
 800d654:	ebac 0101 	sub.w	r1, ip, r1
 800d658:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d65c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d660:	b289      	uxth	r1, r1
 800d662:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d666:	454e      	cmp	r6, r9
 800d668:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d66c:	f84a 3b04 	str.w	r3, [sl], #4
 800d670:	d8e7      	bhi.n	800d642 <__mdiff+0x7e>
 800d672:	1b73      	subs	r3, r6, r5
 800d674:	3b15      	subs	r3, #21
 800d676:	f023 0303 	bic.w	r3, r3, #3
 800d67a:	3515      	adds	r5, #21
 800d67c:	3304      	adds	r3, #4
 800d67e:	42ae      	cmp	r6, r5
 800d680:	bf38      	it	cc
 800d682:	2304      	movcc	r3, #4
 800d684:	4418      	add	r0, r3
 800d686:	4443      	add	r3, r8
 800d688:	461e      	mov	r6, r3
 800d68a:	4605      	mov	r5, r0
 800d68c:	4575      	cmp	r5, lr
 800d68e:	d30e      	bcc.n	800d6ae <__mdiff+0xea>
 800d690:	f10e 0103 	add.w	r1, lr, #3
 800d694:	1a09      	subs	r1, r1, r0
 800d696:	f021 0103 	bic.w	r1, r1, #3
 800d69a:	3803      	subs	r0, #3
 800d69c:	4586      	cmp	lr, r0
 800d69e:	bf38      	it	cc
 800d6a0:	2100      	movcc	r1, #0
 800d6a2:	4419      	add	r1, r3
 800d6a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d6a8:	b18b      	cbz	r3, 800d6ce <__mdiff+0x10a>
 800d6aa:	6117      	str	r7, [r2, #16]
 800d6ac:	e7a4      	b.n	800d5f8 <__mdiff+0x34>
 800d6ae:	f855 8b04 	ldr.w	r8, [r5], #4
 800d6b2:	fa1f f188 	uxth.w	r1, r8
 800d6b6:	4461      	add	r1, ip
 800d6b8:	140c      	asrs	r4, r1, #16
 800d6ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6be:	b289      	uxth	r1, r1
 800d6c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d6c4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d6c8:	f846 1b04 	str.w	r1, [r6], #4
 800d6cc:	e7de      	b.n	800d68c <__mdiff+0xc8>
 800d6ce:	3f01      	subs	r7, #1
 800d6d0:	e7e8      	b.n	800d6a4 <__mdiff+0xe0>
 800d6d2:	bf00      	nop
 800d6d4:	0800e1bf 	.word	0x0800e1bf
 800d6d8:	0800e230 	.word	0x0800e230

0800d6dc <__d2b>:
 800d6dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d6e0:	2101      	movs	r1, #1
 800d6e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d6e6:	4690      	mov	r8, r2
 800d6e8:	461d      	mov	r5, r3
 800d6ea:	f7ff fcd1 	bl	800d090 <_Balloc>
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	b930      	cbnz	r0, 800d700 <__d2b+0x24>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	f240 310a 	movw	r1, #778	; 0x30a
 800d6f8:	4b24      	ldr	r3, [pc, #144]	; (800d78c <__d2b+0xb0>)
 800d6fa:	4825      	ldr	r0, [pc, #148]	; (800d790 <__d2b+0xb4>)
 800d6fc:	f000 f9a0 	bl	800da40 <__assert_func>
 800d700:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d704:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d708:	bb2d      	cbnz	r5, 800d756 <__d2b+0x7a>
 800d70a:	9301      	str	r3, [sp, #4]
 800d70c:	f1b8 0300 	subs.w	r3, r8, #0
 800d710:	d026      	beq.n	800d760 <__d2b+0x84>
 800d712:	4668      	mov	r0, sp
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	f7ff fd83 	bl	800d220 <__lo0bits>
 800d71a:	9900      	ldr	r1, [sp, #0]
 800d71c:	b1f0      	cbz	r0, 800d75c <__d2b+0x80>
 800d71e:	9a01      	ldr	r2, [sp, #4]
 800d720:	f1c0 0320 	rsb	r3, r0, #32
 800d724:	fa02 f303 	lsl.w	r3, r2, r3
 800d728:	430b      	orrs	r3, r1
 800d72a:	40c2      	lsrs	r2, r0
 800d72c:	6163      	str	r3, [r4, #20]
 800d72e:	9201      	str	r2, [sp, #4]
 800d730:	9b01      	ldr	r3, [sp, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	bf14      	ite	ne
 800d736:	2102      	movne	r1, #2
 800d738:	2101      	moveq	r1, #1
 800d73a:	61a3      	str	r3, [r4, #24]
 800d73c:	6121      	str	r1, [r4, #16]
 800d73e:	b1c5      	cbz	r5, 800d772 <__d2b+0x96>
 800d740:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d744:	4405      	add	r5, r0
 800d746:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d74a:	603d      	str	r5, [r7, #0]
 800d74c:	6030      	str	r0, [r6, #0]
 800d74e:	4620      	mov	r0, r4
 800d750:	b002      	add	sp, #8
 800d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d75a:	e7d6      	b.n	800d70a <__d2b+0x2e>
 800d75c:	6161      	str	r1, [r4, #20]
 800d75e:	e7e7      	b.n	800d730 <__d2b+0x54>
 800d760:	a801      	add	r0, sp, #4
 800d762:	f7ff fd5d 	bl	800d220 <__lo0bits>
 800d766:	2101      	movs	r1, #1
 800d768:	9b01      	ldr	r3, [sp, #4]
 800d76a:	6121      	str	r1, [r4, #16]
 800d76c:	6163      	str	r3, [r4, #20]
 800d76e:	3020      	adds	r0, #32
 800d770:	e7e5      	b.n	800d73e <__d2b+0x62>
 800d772:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d776:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d77a:	6038      	str	r0, [r7, #0]
 800d77c:	6918      	ldr	r0, [r3, #16]
 800d77e:	f7ff fd2f 	bl	800d1e0 <__hi0bits>
 800d782:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d786:	6031      	str	r1, [r6, #0]
 800d788:	e7e1      	b.n	800d74e <__d2b+0x72>
 800d78a:	bf00      	nop
 800d78c:	0800e1bf 	.word	0x0800e1bf
 800d790:	0800e230 	.word	0x0800e230

0800d794 <_calloc_r>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	fba1 5402 	umull	r5, r4, r1, r2
 800d79a:	b934      	cbnz	r4, 800d7aa <_calloc_r+0x16>
 800d79c:	4629      	mov	r1, r5
 800d79e:	f000 f875 	bl	800d88c <_malloc_r>
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	b928      	cbnz	r0, 800d7b2 <_calloc_r+0x1e>
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	bd70      	pop	{r4, r5, r6, pc}
 800d7aa:	220c      	movs	r2, #12
 800d7ac:	2600      	movs	r6, #0
 800d7ae:	6002      	str	r2, [r0, #0]
 800d7b0:	e7f9      	b.n	800d7a6 <_calloc_r+0x12>
 800d7b2:	462a      	mov	r2, r5
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	f7fd ff53 	bl	800b660 <memset>
 800d7ba:	e7f4      	b.n	800d7a6 <_calloc_r+0x12>

0800d7bc <_free_r>:
 800d7bc:	b538      	push	{r3, r4, r5, lr}
 800d7be:	4605      	mov	r5, r0
 800d7c0:	2900      	cmp	r1, #0
 800d7c2:	d040      	beq.n	800d846 <_free_r+0x8a>
 800d7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7c8:	1f0c      	subs	r4, r1, #4
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bfb8      	it	lt
 800d7ce:	18e4      	addlt	r4, r4, r3
 800d7d0:	f000 f9bc 	bl	800db4c <__malloc_lock>
 800d7d4:	4a1c      	ldr	r2, [pc, #112]	; (800d848 <_free_r+0x8c>)
 800d7d6:	6813      	ldr	r3, [r2, #0]
 800d7d8:	b933      	cbnz	r3, 800d7e8 <_free_r+0x2c>
 800d7da:	6063      	str	r3, [r4, #4]
 800d7dc:	6014      	str	r4, [r2, #0]
 800d7de:	4628      	mov	r0, r5
 800d7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7e4:	f000 b9b8 	b.w	800db58 <__malloc_unlock>
 800d7e8:	42a3      	cmp	r3, r4
 800d7ea:	d908      	bls.n	800d7fe <_free_r+0x42>
 800d7ec:	6820      	ldr	r0, [r4, #0]
 800d7ee:	1821      	adds	r1, r4, r0
 800d7f0:	428b      	cmp	r3, r1
 800d7f2:	bf01      	itttt	eq
 800d7f4:	6819      	ldreq	r1, [r3, #0]
 800d7f6:	685b      	ldreq	r3, [r3, #4]
 800d7f8:	1809      	addeq	r1, r1, r0
 800d7fa:	6021      	streq	r1, [r4, #0]
 800d7fc:	e7ed      	b.n	800d7da <_free_r+0x1e>
 800d7fe:	461a      	mov	r2, r3
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	b10b      	cbz	r3, 800d808 <_free_r+0x4c>
 800d804:	42a3      	cmp	r3, r4
 800d806:	d9fa      	bls.n	800d7fe <_free_r+0x42>
 800d808:	6811      	ldr	r1, [r2, #0]
 800d80a:	1850      	adds	r0, r2, r1
 800d80c:	42a0      	cmp	r0, r4
 800d80e:	d10b      	bne.n	800d828 <_free_r+0x6c>
 800d810:	6820      	ldr	r0, [r4, #0]
 800d812:	4401      	add	r1, r0
 800d814:	1850      	adds	r0, r2, r1
 800d816:	4283      	cmp	r3, r0
 800d818:	6011      	str	r1, [r2, #0]
 800d81a:	d1e0      	bne.n	800d7de <_free_r+0x22>
 800d81c:	6818      	ldr	r0, [r3, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	4401      	add	r1, r0
 800d822:	6011      	str	r1, [r2, #0]
 800d824:	6053      	str	r3, [r2, #4]
 800d826:	e7da      	b.n	800d7de <_free_r+0x22>
 800d828:	d902      	bls.n	800d830 <_free_r+0x74>
 800d82a:	230c      	movs	r3, #12
 800d82c:	602b      	str	r3, [r5, #0]
 800d82e:	e7d6      	b.n	800d7de <_free_r+0x22>
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	1821      	adds	r1, r4, r0
 800d834:	428b      	cmp	r3, r1
 800d836:	bf01      	itttt	eq
 800d838:	6819      	ldreq	r1, [r3, #0]
 800d83a:	685b      	ldreq	r3, [r3, #4]
 800d83c:	1809      	addeq	r1, r1, r0
 800d83e:	6021      	streq	r1, [r4, #0]
 800d840:	6063      	str	r3, [r4, #4]
 800d842:	6054      	str	r4, [r2, #4]
 800d844:	e7cb      	b.n	800d7de <_free_r+0x22>
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	20001fbc 	.word	0x20001fbc

0800d84c <sbrk_aligned>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	4e0e      	ldr	r6, [pc, #56]	; (800d888 <sbrk_aligned+0x3c>)
 800d850:	460c      	mov	r4, r1
 800d852:	6831      	ldr	r1, [r6, #0]
 800d854:	4605      	mov	r5, r0
 800d856:	b911      	cbnz	r1, 800d85e <sbrk_aligned+0x12>
 800d858:	f000 f88c 	bl	800d974 <_sbrk_r>
 800d85c:	6030      	str	r0, [r6, #0]
 800d85e:	4621      	mov	r1, r4
 800d860:	4628      	mov	r0, r5
 800d862:	f000 f887 	bl	800d974 <_sbrk_r>
 800d866:	1c43      	adds	r3, r0, #1
 800d868:	d00a      	beq.n	800d880 <sbrk_aligned+0x34>
 800d86a:	1cc4      	adds	r4, r0, #3
 800d86c:	f024 0403 	bic.w	r4, r4, #3
 800d870:	42a0      	cmp	r0, r4
 800d872:	d007      	beq.n	800d884 <sbrk_aligned+0x38>
 800d874:	1a21      	subs	r1, r4, r0
 800d876:	4628      	mov	r0, r5
 800d878:	f000 f87c 	bl	800d974 <_sbrk_r>
 800d87c:	3001      	adds	r0, #1
 800d87e:	d101      	bne.n	800d884 <sbrk_aligned+0x38>
 800d880:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d884:	4620      	mov	r0, r4
 800d886:	bd70      	pop	{r4, r5, r6, pc}
 800d888:	20001fc0 	.word	0x20001fc0

0800d88c <_malloc_r>:
 800d88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d890:	1ccd      	adds	r5, r1, #3
 800d892:	f025 0503 	bic.w	r5, r5, #3
 800d896:	3508      	adds	r5, #8
 800d898:	2d0c      	cmp	r5, #12
 800d89a:	bf38      	it	cc
 800d89c:	250c      	movcc	r5, #12
 800d89e:	2d00      	cmp	r5, #0
 800d8a0:	4607      	mov	r7, r0
 800d8a2:	db01      	blt.n	800d8a8 <_malloc_r+0x1c>
 800d8a4:	42a9      	cmp	r1, r5
 800d8a6:	d905      	bls.n	800d8b4 <_malloc_r+0x28>
 800d8a8:	230c      	movs	r3, #12
 800d8aa:	2600      	movs	r6, #0
 800d8ac:	603b      	str	r3, [r7, #0]
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b4:	4e2e      	ldr	r6, [pc, #184]	; (800d970 <_malloc_r+0xe4>)
 800d8b6:	f000 f949 	bl	800db4c <__malloc_lock>
 800d8ba:	6833      	ldr	r3, [r6, #0]
 800d8bc:	461c      	mov	r4, r3
 800d8be:	bb34      	cbnz	r4, 800d90e <_malloc_r+0x82>
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	f7ff ffc2 	bl	800d84c <sbrk_aligned>
 800d8c8:	1c43      	adds	r3, r0, #1
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	d14d      	bne.n	800d96a <_malloc_r+0xde>
 800d8ce:	6834      	ldr	r4, [r6, #0]
 800d8d0:	4626      	mov	r6, r4
 800d8d2:	2e00      	cmp	r6, #0
 800d8d4:	d140      	bne.n	800d958 <_malloc_r+0xcc>
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	4631      	mov	r1, r6
 800d8da:	4638      	mov	r0, r7
 800d8dc:	eb04 0803 	add.w	r8, r4, r3
 800d8e0:	f000 f848 	bl	800d974 <_sbrk_r>
 800d8e4:	4580      	cmp	r8, r0
 800d8e6:	d13a      	bne.n	800d95e <_malloc_r+0xd2>
 800d8e8:	6821      	ldr	r1, [r4, #0]
 800d8ea:	3503      	adds	r5, #3
 800d8ec:	1a6d      	subs	r5, r5, r1
 800d8ee:	f025 0503 	bic.w	r5, r5, #3
 800d8f2:	3508      	adds	r5, #8
 800d8f4:	2d0c      	cmp	r5, #12
 800d8f6:	bf38      	it	cc
 800d8f8:	250c      	movcc	r5, #12
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7ff ffa5 	bl	800d84c <sbrk_aligned>
 800d902:	3001      	adds	r0, #1
 800d904:	d02b      	beq.n	800d95e <_malloc_r+0xd2>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	442b      	add	r3, r5
 800d90a:	6023      	str	r3, [r4, #0]
 800d90c:	e00e      	b.n	800d92c <_malloc_r+0xa0>
 800d90e:	6822      	ldr	r2, [r4, #0]
 800d910:	1b52      	subs	r2, r2, r5
 800d912:	d41e      	bmi.n	800d952 <_malloc_r+0xc6>
 800d914:	2a0b      	cmp	r2, #11
 800d916:	d916      	bls.n	800d946 <_malloc_r+0xba>
 800d918:	1961      	adds	r1, r4, r5
 800d91a:	42a3      	cmp	r3, r4
 800d91c:	6025      	str	r5, [r4, #0]
 800d91e:	bf18      	it	ne
 800d920:	6059      	strne	r1, [r3, #4]
 800d922:	6863      	ldr	r3, [r4, #4]
 800d924:	bf08      	it	eq
 800d926:	6031      	streq	r1, [r6, #0]
 800d928:	5162      	str	r2, [r4, r5]
 800d92a:	604b      	str	r3, [r1, #4]
 800d92c:	4638      	mov	r0, r7
 800d92e:	f104 060b 	add.w	r6, r4, #11
 800d932:	f000 f911 	bl	800db58 <__malloc_unlock>
 800d936:	f026 0607 	bic.w	r6, r6, #7
 800d93a:	1d23      	adds	r3, r4, #4
 800d93c:	1af2      	subs	r2, r6, r3
 800d93e:	d0b6      	beq.n	800d8ae <_malloc_r+0x22>
 800d940:	1b9b      	subs	r3, r3, r6
 800d942:	50a3      	str	r3, [r4, r2]
 800d944:	e7b3      	b.n	800d8ae <_malloc_r+0x22>
 800d946:	6862      	ldr	r2, [r4, #4]
 800d948:	42a3      	cmp	r3, r4
 800d94a:	bf0c      	ite	eq
 800d94c:	6032      	streq	r2, [r6, #0]
 800d94e:	605a      	strne	r2, [r3, #4]
 800d950:	e7ec      	b.n	800d92c <_malloc_r+0xa0>
 800d952:	4623      	mov	r3, r4
 800d954:	6864      	ldr	r4, [r4, #4]
 800d956:	e7b2      	b.n	800d8be <_malloc_r+0x32>
 800d958:	4634      	mov	r4, r6
 800d95a:	6876      	ldr	r6, [r6, #4]
 800d95c:	e7b9      	b.n	800d8d2 <_malloc_r+0x46>
 800d95e:	230c      	movs	r3, #12
 800d960:	4638      	mov	r0, r7
 800d962:	603b      	str	r3, [r7, #0]
 800d964:	f000 f8f8 	bl	800db58 <__malloc_unlock>
 800d968:	e7a1      	b.n	800d8ae <_malloc_r+0x22>
 800d96a:	6025      	str	r5, [r4, #0]
 800d96c:	e7de      	b.n	800d92c <_malloc_r+0xa0>
 800d96e:	bf00      	nop
 800d970:	20001fbc 	.word	0x20001fbc

0800d974 <_sbrk_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	2300      	movs	r3, #0
 800d978:	4d05      	ldr	r5, [pc, #20]	; (800d990 <_sbrk_r+0x1c>)
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	602b      	str	r3, [r5, #0]
 800d980:	f7f3 fb7e 	bl	8001080 <_sbrk>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_sbrk_r+0x1a>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_sbrk_r+0x1a>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20001fc4 	.word	0x20001fc4

0800d994 <__sread>:
 800d994:	b510      	push	{r4, lr}
 800d996:	460c      	mov	r4, r1
 800d998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d99c:	f000 fa3a 	bl	800de14 <_read_r>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	bfab      	itete	ge
 800d9a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d9a8:	181b      	addge	r3, r3, r0
 800d9aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9ae:	bfac      	ite	ge
 800d9b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9b2:	81a3      	strhlt	r3, [r4, #12]
 800d9b4:	bd10      	pop	{r4, pc}

0800d9b6 <__swrite>:
 800d9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ba:	461f      	mov	r7, r3
 800d9bc:	898b      	ldrh	r3, [r1, #12]
 800d9be:	4605      	mov	r5, r0
 800d9c0:	05db      	lsls	r3, r3, #23
 800d9c2:	460c      	mov	r4, r1
 800d9c4:	4616      	mov	r6, r2
 800d9c6:	d505      	bpl.n	800d9d4 <__swrite+0x1e>
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d0:	f000 f898 	bl	800db04 <_lseek_r>
 800d9d4:	89a3      	ldrh	r3, [r4, #12]
 800d9d6:	4632      	mov	r2, r6
 800d9d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	4628      	mov	r0, r5
 800d9e0:	463b      	mov	r3, r7
 800d9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ea:	f000 b817 	b.w	800da1c <_write_r>

0800d9ee <__sseek>:
 800d9ee:	b510      	push	{r4, lr}
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f6:	f000 f885 	bl	800db04 <_lseek_r>
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	bf15      	itete	ne
 800da00:	6560      	strne	r0, [r4, #84]	; 0x54
 800da02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da0a:	81a3      	strheq	r3, [r4, #12]
 800da0c:	bf18      	it	ne
 800da0e:	81a3      	strhne	r3, [r4, #12]
 800da10:	bd10      	pop	{r4, pc}

0800da12 <__sclose>:
 800da12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da16:	f000 b831 	b.w	800da7c <_close_r>
	...

0800da1c <_write_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	4604      	mov	r4, r0
 800da20:	4608      	mov	r0, r1
 800da22:	4611      	mov	r1, r2
 800da24:	2200      	movs	r2, #0
 800da26:	4d05      	ldr	r5, [pc, #20]	; (800da3c <_write_r+0x20>)
 800da28:	602a      	str	r2, [r5, #0]
 800da2a:	461a      	mov	r2, r3
 800da2c:	f7fa fe14 	bl	8008658 <_write>
 800da30:	1c43      	adds	r3, r0, #1
 800da32:	d102      	bne.n	800da3a <_write_r+0x1e>
 800da34:	682b      	ldr	r3, [r5, #0]
 800da36:	b103      	cbz	r3, 800da3a <_write_r+0x1e>
 800da38:	6023      	str	r3, [r4, #0]
 800da3a:	bd38      	pop	{r3, r4, r5, pc}
 800da3c:	20001fc4 	.word	0x20001fc4

0800da40 <__assert_func>:
 800da40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da42:	4614      	mov	r4, r2
 800da44:	461a      	mov	r2, r3
 800da46:	4b09      	ldr	r3, [pc, #36]	; (800da6c <__assert_func+0x2c>)
 800da48:	4605      	mov	r5, r0
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68d8      	ldr	r0, [r3, #12]
 800da4e:	b14c      	cbz	r4, 800da64 <__assert_func+0x24>
 800da50:	4b07      	ldr	r3, [pc, #28]	; (800da70 <__assert_func+0x30>)
 800da52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da56:	9100      	str	r1, [sp, #0]
 800da58:	462b      	mov	r3, r5
 800da5a:	4906      	ldr	r1, [pc, #24]	; (800da74 <__assert_func+0x34>)
 800da5c:	f000 f81e 	bl	800da9c <fiprintf>
 800da60:	f000 fab8 	bl	800dfd4 <abort>
 800da64:	4b04      	ldr	r3, [pc, #16]	; (800da78 <__assert_func+0x38>)
 800da66:	461c      	mov	r4, r3
 800da68:	e7f3      	b.n	800da52 <__assert_func+0x12>
 800da6a:	bf00      	nop
 800da6c:	20000170 	.word	0x20000170
 800da70:	0800e38c 	.word	0x0800e38c
 800da74:	0800e399 	.word	0x0800e399
 800da78:	0800e3c7 	.word	0x0800e3c7

0800da7c <_close_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	2300      	movs	r3, #0
 800da80:	4d05      	ldr	r5, [pc, #20]	; (800da98 <_close_r+0x1c>)
 800da82:	4604      	mov	r4, r0
 800da84:	4608      	mov	r0, r1
 800da86:	602b      	str	r3, [r5, #0]
 800da88:	f7fa fe04 	bl	8008694 <_close>
 800da8c:	1c43      	adds	r3, r0, #1
 800da8e:	d102      	bne.n	800da96 <_close_r+0x1a>
 800da90:	682b      	ldr	r3, [r5, #0]
 800da92:	b103      	cbz	r3, 800da96 <_close_r+0x1a>
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	bd38      	pop	{r3, r4, r5, pc}
 800da98:	20001fc4 	.word	0x20001fc4

0800da9c <fiprintf>:
 800da9c:	b40e      	push	{r1, r2, r3}
 800da9e:	b503      	push	{r0, r1, lr}
 800daa0:	4601      	mov	r1, r0
 800daa2:	ab03      	add	r3, sp, #12
 800daa4:	4805      	ldr	r0, [pc, #20]	; (800dabc <fiprintf+0x20>)
 800daa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800daaa:	6800      	ldr	r0, [r0, #0]
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	f000 f881 	bl	800dbb4 <_vfiprintf_r>
 800dab2:	b002      	add	sp, #8
 800dab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dab8:	b003      	add	sp, #12
 800daba:	4770      	bx	lr
 800dabc:	20000170 	.word	0x20000170

0800dac0 <_fstat_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	2300      	movs	r3, #0
 800dac4:	4d06      	ldr	r5, [pc, #24]	; (800dae0 <_fstat_r+0x20>)
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	4611      	mov	r1, r2
 800dacc:	602b      	str	r3, [r5, #0]
 800dace:	f7fa fe31 	bl	8008734 <_fstat>
 800dad2:	1c43      	adds	r3, r0, #1
 800dad4:	d102      	bne.n	800dadc <_fstat_r+0x1c>
 800dad6:	682b      	ldr	r3, [r5, #0]
 800dad8:	b103      	cbz	r3, 800dadc <_fstat_r+0x1c>
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	bd38      	pop	{r3, r4, r5, pc}
 800dade:	bf00      	nop
 800dae0:	20001fc4 	.word	0x20001fc4

0800dae4 <_isatty_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	2300      	movs	r3, #0
 800dae8:	4d05      	ldr	r5, [pc, #20]	; (800db00 <_isatty_r+0x1c>)
 800daea:	4604      	mov	r4, r0
 800daec:	4608      	mov	r0, r1
 800daee:	602b      	str	r3, [r5, #0]
 800daf0:	f7fa fd9c 	bl	800862c <_isatty>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d102      	bne.n	800dafe <_isatty_r+0x1a>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	b103      	cbz	r3, 800dafe <_isatty_r+0x1a>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	20001fc4 	.word	0x20001fc4

0800db04 <_lseek_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	4611      	mov	r1, r2
 800db0c:	2200      	movs	r2, #0
 800db0e:	4d05      	ldr	r5, [pc, #20]	; (800db24 <_lseek_r+0x20>)
 800db10:	602a      	str	r2, [r5, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	f7fa fdd5 	bl	80086c2 <_lseek>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_lseek_r+0x1e>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_lseek_r+0x1e>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	20001fc4 	.word	0x20001fc4

0800db28 <__ascii_mbtowc>:
 800db28:	b082      	sub	sp, #8
 800db2a:	b901      	cbnz	r1, 800db2e <__ascii_mbtowc+0x6>
 800db2c:	a901      	add	r1, sp, #4
 800db2e:	b142      	cbz	r2, 800db42 <__ascii_mbtowc+0x1a>
 800db30:	b14b      	cbz	r3, 800db46 <__ascii_mbtowc+0x1e>
 800db32:	7813      	ldrb	r3, [r2, #0]
 800db34:	600b      	str	r3, [r1, #0]
 800db36:	7812      	ldrb	r2, [r2, #0]
 800db38:	1e10      	subs	r0, r2, #0
 800db3a:	bf18      	it	ne
 800db3c:	2001      	movne	r0, #1
 800db3e:	b002      	add	sp, #8
 800db40:	4770      	bx	lr
 800db42:	4610      	mov	r0, r2
 800db44:	e7fb      	b.n	800db3e <__ascii_mbtowc+0x16>
 800db46:	f06f 0001 	mvn.w	r0, #1
 800db4a:	e7f8      	b.n	800db3e <__ascii_mbtowc+0x16>

0800db4c <__malloc_lock>:
 800db4c:	4801      	ldr	r0, [pc, #4]	; (800db54 <__malloc_lock+0x8>)
 800db4e:	f7ff ba22 	b.w	800cf96 <__retarget_lock_acquire_recursive>
 800db52:	bf00      	nop
 800db54:	20001fb8 	.word	0x20001fb8

0800db58 <__malloc_unlock>:
 800db58:	4801      	ldr	r0, [pc, #4]	; (800db60 <__malloc_unlock+0x8>)
 800db5a:	f7ff ba1d 	b.w	800cf98 <__retarget_lock_release_recursive>
 800db5e:	bf00      	nop
 800db60:	20001fb8 	.word	0x20001fb8

0800db64 <__sfputc_r>:
 800db64:	6893      	ldr	r3, [r2, #8]
 800db66:	b410      	push	{r4}
 800db68:	3b01      	subs	r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	6093      	str	r3, [r2, #8]
 800db6e:	da07      	bge.n	800db80 <__sfputc_r+0x1c>
 800db70:	6994      	ldr	r4, [r2, #24]
 800db72:	42a3      	cmp	r3, r4
 800db74:	db01      	blt.n	800db7a <__sfputc_r+0x16>
 800db76:	290a      	cmp	r1, #10
 800db78:	d102      	bne.n	800db80 <__sfputc_r+0x1c>
 800db7a:	bc10      	pop	{r4}
 800db7c:	f000 b95c 	b.w	800de38 <__swbuf_r>
 800db80:	6813      	ldr	r3, [r2, #0]
 800db82:	1c58      	adds	r0, r3, #1
 800db84:	6010      	str	r0, [r2, #0]
 800db86:	7019      	strb	r1, [r3, #0]
 800db88:	4608      	mov	r0, r1
 800db8a:	bc10      	pop	{r4}
 800db8c:	4770      	bx	lr

0800db8e <__sfputs_r>:
 800db8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db90:	4606      	mov	r6, r0
 800db92:	460f      	mov	r7, r1
 800db94:	4614      	mov	r4, r2
 800db96:	18d5      	adds	r5, r2, r3
 800db98:	42ac      	cmp	r4, r5
 800db9a:	d101      	bne.n	800dba0 <__sfputs_r+0x12>
 800db9c:	2000      	movs	r0, #0
 800db9e:	e007      	b.n	800dbb0 <__sfputs_r+0x22>
 800dba0:	463a      	mov	r2, r7
 800dba2:	4630      	mov	r0, r6
 800dba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba8:	f7ff ffdc 	bl	800db64 <__sfputc_r>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d1f3      	bne.n	800db98 <__sfputs_r+0xa>
 800dbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbb4 <_vfiprintf_r>:
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	460d      	mov	r5, r1
 800dbba:	4614      	mov	r4, r2
 800dbbc:	4698      	mov	r8, r3
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	b09d      	sub	sp, #116	; 0x74
 800dbc2:	b118      	cbz	r0, 800dbcc <_vfiprintf_r+0x18>
 800dbc4:	6983      	ldr	r3, [r0, #24]
 800dbc6:	b90b      	cbnz	r3, 800dbcc <_vfiprintf_r+0x18>
 800dbc8:	f7ff f942 	bl	800ce50 <__sinit>
 800dbcc:	4b89      	ldr	r3, [pc, #548]	; (800ddf4 <_vfiprintf_r+0x240>)
 800dbce:	429d      	cmp	r5, r3
 800dbd0:	d11b      	bne.n	800dc0a <_vfiprintf_r+0x56>
 800dbd2:	6875      	ldr	r5, [r6, #4]
 800dbd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbd6:	07d9      	lsls	r1, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_vfiprintf_r+0x32>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_vfiprintf_r+0x32>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbe2:	f7ff f9d8 	bl	800cf96 <__retarget_lock_acquire_recursive>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	071b      	lsls	r3, r3, #28
 800dbea:	d501      	bpl.n	800dbf0 <_vfiprintf_r+0x3c>
 800dbec:	692b      	ldr	r3, [r5, #16]
 800dbee:	b9eb      	cbnz	r3, 800dc2c <_vfiprintf_r+0x78>
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f000 f980 	bl	800def8 <__swsetup_r>
 800dbf8:	b1c0      	cbz	r0, 800dc2c <_vfiprintf_r+0x78>
 800dbfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbfc:	07dc      	lsls	r4, r3, #31
 800dbfe:	d50e      	bpl.n	800dc1e <_vfiprintf_r+0x6a>
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc04:	b01d      	add	sp, #116	; 0x74
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	4b7b      	ldr	r3, [pc, #492]	; (800ddf8 <_vfiprintf_r+0x244>)
 800dc0c:	429d      	cmp	r5, r3
 800dc0e:	d101      	bne.n	800dc14 <_vfiprintf_r+0x60>
 800dc10:	68b5      	ldr	r5, [r6, #8]
 800dc12:	e7df      	b.n	800dbd4 <_vfiprintf_r+0x20>
 800dc14:	4b79      	ldr	r3, [pc, #484]	; (800ddfc <_vfiprintf_r+0x248>)
 800dc16:	429d      	cmp	r5, r3
 800dc18:	bf08      	it	eq
 800dc1a:	68f5      	ldreq	r5, [r6, #12]
 800dc1c:	e7da      	b.n	800dbd4 <_vfiprintf_r+0x20>
 800dc1e:	89ab      	ldrh	r3, [r5, #12]
 800dc20:	0598      	lsls	r0, r3, #22
 800dc22:	d4ed      	bmi.n	800dc00 <_vfiprintf_r+0x4c>
 800dc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc26:	f7ff f9b7 	bl	800cf98 <__retarget_lock_release_recursive>
 800dc2a:	e7e9      	b.n	800dc00 <_vfiprintf_r+0x4c>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc30:	2320      	movs	r3, #32
 800dc32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc36:	2330      	movs	r3, #48	; 0x30
 800dc38:	f04f 0901 	mov.w	r9, #1
 800dc3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800de00 <_vfiprintf_r+0x24c>
 800dc44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc48:	4623      	mov	r3, r4
 800dc4a:	469a      	mov	sl, r3
 800dc4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc50:	b10a      	cbz	r2, 800dc56 <_vfiprintf_r+0xa2>
 800dc52:	2a25      	cmp	r2, #37	; 0x25
 800dc54:	d1f9      	bne.n	800dc4a <_vfiprintf_r+0x96>
 800dc56:	ebba 0b04 	subs.w	fp, sl, r4
 800dc5a:	d00b      	beq.n	800dc74 <_vfiprintf_r+0xc0>
 800dc5c:	465b      	mov	r3, fp
 800dc5e:	4622      	mov	r2, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	4630      	mov	r0, r6
 800dc64:	f7ff ff93 	bl	800db8e <__sfputs_r>
 800dc68:	3001      	adds	r0, #1
 800dc6a:	f000 80aa 	beq.w	800ddc2 <_vfiprintf_r+0x20e>
 800dc6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc70:	445a      	add	r2, fp
 800dc72:	9209      	str	r2, [sp, #36]	; 0x24
 800dc74:	f89a 3000 	ldrb.w	r3, [sl]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 80a2 	beq.w	800ddc2 <_vfiprintf_r+0x20e>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc88:	f10a 0a01 	add.w	sl, sl, #1
 800dc8c:	9304      	str	r3, [sp, #16]
 800dc8e:	9307      	str	r3, [sp, #28]
 800dc90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc94:	931a      	str	r3, [sp, #104]	; 0x68
 800dc96:	4654      	mov	r4, sl
 800dc98:	2205      	movs	r2, #5
 800dc9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc9e:	4858      	ldr	r0, [pc, #352]	; (800de00 <_vfiprintf_r+0x24c>)
 800dca0:	f7ff f9e8 	bl	800d074 <memchr>
 800dca4:	9a04      	ldr	r2, [sp, #16]
 800dca6:	b9d8      	cbnz	r0, 800dce0 <_vfiprintf_r+0x12c>
 800dca8:	06d1      	lsls	r1, r2, #27
 800dcaa:	bf44      	itt	mi
 800dcac:	2320      	movmi	r3, #32
 800dcae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcb2:	0713      	lsls	r3, r2, #28
 800dcb4:	bf44      	itt	mi
 800dcb6:	232b      	movmi	r3, #43	; 0x2b
 800dcb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcbc:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc0:	2b2a      	cmp	r3, #42	; 0x2a
 800dcc2:	d015      	beq.n	800dcf0 <_vfiprintf_r+0x13c>
 800dcc4:	4654      	mov	r4, sl
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	f04f 0c0a 	mov.w	ip, #10
 800dccc:	9a07      	ldr	r2, [sp, #28]
 800dcce:	4621      	mov	r1, r4
 800dcd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcd4:	3b30      	subs	r3, #48	; 0x30
 800dcd6:	2b09      	cmp	r3, #9
 800dcd8:	d94e      	bls.n	800dd78 <_vfiprintf_r+0x1c4>
 800dcda:	b1b0      	cbz	r0, 800dd0a <_vfiprintf_r+0x156>
 800dcdc:	9207      	str	r2, [sp, #28]
 800dcde:	e014      	b.n	800dd0a <_vfiprintf_r+0x156>
 800dce0:	eba0 0308 	sub.w	r3, r0, r8
 800dce4:	fa09 f303 	lsl.w	r3, r9, r3
 800dce8:	4313      	orrs	r3, r2
 800dcea:	46a2      	mov	sl, r4
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	e7d2      	b.n	800dc96 <_vfiprintf_r+0xe2>
 800dcf0:	9b03      	ldr	r3, [sp, #12]
 800dcf2:	1d19      	adds	r1, r3, #4
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	9103      	str	r1, [sp, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	bfbb      	ittet	lt
 800dcfc:	425b      	neglt	r3, r3
 800dcfe:	f042 0202 	orrlt.w	r2, r2, #2
 800dd02:	9307      	strge	r3, [sp, #28]
 800dd04:	9307      	strlt	r3, [sp, #28]
 800dd06:	bfb8      	it	lt
 800dd08:	9204      	strlt	r2, [sp, #16]
 800dd0a:	7823      	ldrb	r3, [r4, #0]
 800dd0c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd0e:	d10c      	bne.n	800dd2a <_vfiprintf_r+0x176>
 800dd10:	7863      	ldrb	r3, [r4, #1]
 800dd12:	2b2a      	cmp	r3, #42	; 0x2a
 800dd14:	d135      	bne.n	800dd82 <_vfiprintf_r+0x1ce>
 800dd16:	9b03      	ldr	r3, [sp, #12]
 800dd18:	3402      	adds	r4, #2
 800dd1a:	1d1a      	adds	r2, r3, #4
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	9203      	str	r2, [sp, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	bfb8      	it	lt
 800dd24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd28:	9305      	str	r3, [sp, #20]
 800dd2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800de04 <_vfiprintf_r+0x250>
 800dd2e:	2203      	movs	r2, #3
 800dd30:	4650      	mov	r0, sl
 800dd32:	7821      	ldrb	r1, [r4, #0]
 800dd34:	f7ff f99e 	bl	800d074 <memchr>
 800dd38:	b140      	cbz	r0, 800dd4c <_vfiprintf_r+0x198>
 800dd3a:	2340      	movs	r3, #64	; 0x40
 800dd3c:	eba0 000a 	sub.w	r0, r0, sl
 800dd40:	fa03 f000 	lsl.w	r0, r3, r0
 800dd44:	9b04      	ldr	r3, [sp, #16]
 800dd46:	3401      	adds	r4, #1
 800dd48:	4303      	orrs	r3, r0
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd50:	2206      	movs	r2, #6
 800dd52:	482d      	ldr	r0, [pc, #180]	; (800de08 <_vfiprintf_r+0x254>)
 800dd54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd58:	f7ff f98c 	bl	800d074 <memchr>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d03f      	beq.n	800dde0 <_vfiprintf_r+0x22c>
 800dd60:	4b2a      	ldr	r3, [pc, #168]	; (800de0c <_vfiprintf_r+0x258>)
 800dd62:	bb1b      	cbnz	r3, 800ddac <_vfiprintf_r+0x1f8>
 800dd64:	9b03      	ldr	r3, [sp, #12]
 800dd66:	3307      	adds	r3, #7
 800dd68:	f023 0307 	bic.w	r3, r3, #7
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	9303      	str	r3, [sp, #12]
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	443b      	add	r3, r7
 800dd74:	9309      	str	r3, [sp, #36]	; 0x24
 800dd76:	e767      	b.n	800dc48 <_vfiprintf_r+0x94>
 800dd78:	460c      	mov	r4, r1
 800dd7a:	2001      	movs	r0, #1
 800dd7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd80:	e7a5      	b.n	800dcce <_vfiprintf_r+0x11a>
 800dd82:	2300      	movs	r3, #0
 800dd84:	f04f 0c0a 	mov.w	ip, #10
 800dd88:	4619      	mov	r1, r3
 800dd8a:	3401      	adds	r4, #1
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd94:	3a30      	subs	r2, #48	; 0x30
 800dd96:	2a09      	cmp	r2, #9
 800dd98:	d903      	bls.n	800dda2 <_vfiprintf_r+0x1ee>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0c5      	beq.n	800dd2a <_vfiprintf_r+0x176>
 800dd9e:	9105      	str	r1, [sp, #20]
 800dda0:	e7c3      	b.n	800dd2a <_vfiprintf_r+0x176>
 800dda2:	4604      	mov	r4, r0
 800dda4:	2301      	movs	r3, #1
 800dda6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddaa:	e7f0      	b.n	800dd8e <_vfiprintf_r+0x1da>
 800ddac:	ab03      	add	r3, sp, #12
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	4b16      	ldr	r3, [pc, #88]	; (800de10 <_vfiprintf_r+0x25c>)
 800ddb6:	a904      	add	r1, sp, #16
 800ddb8:	f7fd fcf8 	bl	800b7ac <_printf_float>
 800ddbc:	4607      	mov	r7, r0
 800ddbe:	1c78      	adds	r0, r7, #1
 800ddc0:	d1d6      	bne.n	800dd70 <_vfiprintf_r+0x1bc>
 800ddc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddc4:	07d9      	lsls	r1, r3, #31
 800ddc6:	d405      	bmi.n	800ddd4 <_vfiprintf_r+0x220>
 800ddc8:	89ab      	ldrh	r3, [r5, #12]
 800ddca:	059a      	lsls	r2, r3, #22
 800ddcc:	d402      	bmi.n	800ddd4 <_vfiprintf_r+0x220>
 800ddce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddd0:	f7ff f8e2 	bl	800cf98 <__retarget_lock_release_recursive>
 800ddd4:	89ab      	ldrh	r3, [r5, #12]
 800ddd6:	065b      	lsls	r3, r3, #25
 800ddd8:	f53f af12 	bmi.w	800dc00 <_vfiprintf_r+0x4c>
 800dddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddde:	e711      	b.n	800dc04 <_vfiprintf_r+0x50>
 800dde0:	ab03      	add	r3, sp, #12
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	462a      	mov	r2, r5
 800dde6:	4630      	mov	r0, r6
 800dde8:	4b09      	ldr	r3, [pc, #36]	; (800de10 <_vfiprintf_r+0x25c>)
 800ddea:	a904      	add	r1, sp, #16
 800ddec:	f7fd ff7a 	bl	800bce4 <_printf_i>
 800ddf0:	e7e4      	b.n	800ddbc <_vfiprintf_r+0x208>
 800ddf2:	bf00      	nop
 800ddf4:	0800e1f0 	.word	0x0800e1f0
 800ddf8:	0800e210 	.word	0x0800e210
 800ddfc:	0800e1d0 	.word	0x0800e1d0
 800de00:	0800e3d2 	.word	0x0800e3d2
 800de04:	0800e3d8 	.word	0x0800e3d8
 800de08:	0800e3dc 	.word	0x0800e3dc
 800de0c:	0800b7ad 	.word	0x0800b7ad
 800de10:	0800db8f 	.word	0x0800db8f

0800de14 <_read_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4604      	mov	r4, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	4611      	mov	r1, r2
 800de1c:	2200      	movs	r2, #0
 800de1e:	4d05      	ldr	r5, [pc, #20]	; (800de34 <_read_r+0x20>)
 800de20:	602a      	str	r2, [r5, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	f7fa fc5e 	bl	80086e4 <_read>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_read_r+0x1e>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_read_r+0x1e>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	20001fc4 	.word	0x20001fc4

0800de38 <__swbuf_r>:
 800de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3a:	460e      	mov	r6, r1
 800de3c:	4614      	mov	r4, r2
 800de3e:	4605      	mov	r5, r0
 800de40:	b118      	cbz	r0, 800de4a <__swbuf_r+0x12>
 800de42:	6983      	ldr	r3, [r0, #24]
 800de44:	b90b      	cbnz	r3, 800de4a <__swbuf_r+0x12>
 800de46:	f7ff f803 	bl	800ce50 <__sinit>
 800de4a:	4b21      	ldr	r3, [pc, #132]	; (800ded0 <__swbuf_r+0x98>)
 800de4c:	429c      	cmp	r4, r3
 800de4e:	d12b      	bne.n	800dea8 <__swbuf_r+0x70>
 800de50:	686c      	ldr	r4, [r5, #4]
 800de52:	69a3      	ldr	r3, [r4, #24]
 800de54:	60a3      	str	r3, [r4, #8]
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	071a      	lsls	r2, r3, #28
 800de5a:	d52f      	bpl.n	800debc <__swbuf_r+0x84>
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	b36b      	cbz	r3, 800debc <__swbuf_r+0x84>
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	6820      	ldr	r0, [r4, #0]
 800de64:	b2f6      	uxtb	r6, r6
 800de66:	1ac0      	subs	r0, r0, r3
 800de68:	6963      	ldr	r3, [r4, #20]
 800de6a:	4637      	mov	r7, r6
 800de6c:	4283      	cmp	r3, r0
 800de6e:	dc04      	bgt.n	800de7a <__swbuf_r+0x42>
 800de70:	4621      	mov	r1, r4
 800de72:	4628      	mov	r0, r5
 800de74:	f7fe ff58 	bl	800cd28 <_fflush_r>
 800de78:	bb30      	cbnz	r0, 800dec8 <__swbuf_r+0x90>
 800de7a:	68a3      	ldr	r3, [r4, #8]
 800de7c:	3001      	adds	r0, #1
 800de7e:	3b01      	subs	r3, #1
 800de80:	60a3      	str	r3, [r4, #8]
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	1c5a      	adds	r2, r3, #1
 800de86:	6022      	str	r2, [r4, #0]
 800de88:	701e      	strb	r6, [r3, #0]
 800de8a:	6963      	ldr	r3, [r4, #20]
 800de8c:	4283      	cmp	r3, r0
 800de8e:	d004      	beq.n	800de9a <__swbuf_r+0x62>
 800de90:	89a3      	ldrh	r3, [r4, #12]
 800de92:	07db      	lsls	r3, r3, #31
 800de94:	d506      	bpl.n	800dea4 <__swbuf_r+0x6c>
 800de96:	2e0a      	cmp	r6, #10
 800de98:	d104      	bne.n	800dea4 <__swbuf_r+0x6c>
 800de9a:	4621      	mov	r1, r4
 800de9c:	4628      	mov	r0, r5
 800de9e:	f7fe ff43 	bl	800cd28 <_fflush_r>
 800dea2:	b988      	cbnz	r0, 800dec8 <__swbuf_r+0x90>
 800dea4:	4638      	mov	r0, r7
 800dea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <__swbuf_r+0x9c>)
 800deaa:	429c      	cmp	r4, r3
 800deac:	d101      	bne.n	800deb2 <__swbuf_r+0x7a>
 800deae:	68ac      	ldr	r4, [r5, #8]
 800deb0:	e7cf      	b.n	800de52 <__swbuf_r+0x1a>
 800deb2:	4b09      	ldr	r3, [pc, #36]	; (800ded8 <__swbuf_r+0xa0>)
 800deb4:	429c      	cmp	r4, r3
 800deb6:	bf08      	it	eq
 800deb8:	68ec      	ldreq	r4, [r5, #12]
 800deba:	e7ca      	b.n	800de52 <__swbuf_r+0x1a>
 800debc:	4621      	mov	r1, r4
 800debe:	4628      	mov	r0, r5
 800dec0:	f000 f81a 	bl	800def8 <__swsetup_r>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d0cb      	beq.n	800de60 <__swbuf_r+0x28>
 800dec8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800decc:	e7ea      	b.n	800dea4 <__swbuf_r+0x6c>
 800dece:	bf00      	nop
 800ded0:	0800e1f0 	.word	0x0800e1f0
 800ded4:	0800e210 	.word	0x0800e210
 800ded8:	0800e1d0 	.word	0x0800e1d0

0800dedc <__ascii_wctomb>:
 800dedc:	4603      	mov	r3, r0
 800dede:	4608      	mov	r0, r1
 800dee0:	b141      	cbz	r1, 800def4 <__ascii_wctomb+0x18>
 800dee2:	2aff      	cmp	r2, #255	; 0xff
 800dee4:	d904      	bls.n	800def0 <__ascii_wctomb+0x14>
 800dee6:	228a      	movs	r2, #138	; 0x8a
 800dee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	4770      	bx	lr
 800def0:	2001      	movs	r0, #1
 800def2:	700a      	strb	r2, [r1, #0]
 800def4:	4770      	bx	lr
	...

0800def8 <__swsetup_r>:
 800def8:	4b32      	ldr	r3, [pc, #200]	; (800dfc4 <__swsetup_r+0xcc>)
 800defa:	b570      	push	{r4, r5, r6, lr}
 800defc:	681d      	ldr	r5, [r3, #0]
 800defe:	4606      	mov	r6, r0
 800df00:	460c      	mov	r4, r1
 800df02:	b125      	cbz	r5, 800df0e <__swsetup_r+0x16>
 800df04:	69ab      	ldr	r3, [r5, #24]
 800df06:	b913      	cbnz	r3, 800df0e <__swsetup_r+0x16>
 800df08:	4628      	mov	r0, r5
 800df0a:	f7fe ffa1 	bl	800ce50 <__sinit>
 800df0e:	4b2e      	ldr	r3, [pc, #184]	; (800dfc8 <__swsetup_r+0xd0>)
 800df10:	429c      	cmp	r4, r3
 800df12:	d10f      	bne.n	800df34 <__swsetup_r+0x3c>
 800df14:	686c      	ldr	r4, [r5, #4]
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df1c:	0719      	lsls	r1, r3, #28
 800df1e:	d42c      	bmi.n	800df7a <__swsetup_r+0x82>
 800df20:	06dd      	lsls	r5, r3, #27
 800df22:	d411      	bmi.n	800df48 <__swsetup_r+0x50>
 800df24:	2309      	movs	r3, #9
 800df26:	6033      	str	r3, [r6, #0]
 800df28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	e03e      	b.n	800dfb2 <__swsetup_r+0xba>
 800df34:	4b25      	ldr	r3, [pc, #148]	; (800dfcc <__swsetup_r+0xd4>)
 800df36:	429c      	cmp	r4, r3
 800df38:	d101      	bne.n	800df3e <__swsetup_r+0x46>
 800df3a:	68ac      	ldr	r4, [r5, #8]
 800df3c:	e7eb      	b.n	800df16 <__swsetup_r+0x1e>
 800df3e:	4b24      	ldr	r3, [pc, #144]	; (800dfd0 <__swsetup_r+0xd8>)
 800df40:	429c      	cmp	r4, r3
 800df42:	bf08      	it	eq
 800df44:	68ec      	ldreq	r4, [r5, #12]
 800df46:	e7e6      	b.n	800df16 <__swsetup_r+0x1e>
 800df48:	0758      	lsls	r0, r3, #29
 800df4a:	d512      	bpl.n	800df72 <__swsetup_r+0x7a>
 800df4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df4e:	b141      	cbz	r1, 800df62 <__swsetup_r+0x6a>
 800df50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df54:	4299      	cmp	r1, r3
 800df56:	d002      	beq.n	800df5e <__swsetup_r+0x66>
 800df58:	4630      	mov	r0, r6
 800df5a:	f7ff fc2f 	bl	800d7bc <_free_r>
 800df5e:	2300      	movs	r3, #0
 800df60:	6363      	str	r3, [r4, #52]	; 0x34
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	2300      	movs	r3, #0
 800df6c:	6063      	str	r3, [r4, #4]
 800df6e:	6923      	ldr	r3, [r4, #16]
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	f043 0308 	orr.w	r3, r3, #8
 800df78:	81a3      	strh	r3, [r4, #12]
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	b94b      	cbnz	r3, 800df92 <__swsetup_r+0x9a>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df88:	d003      	beq.n	800df92 <__swsetup_r+0x9a>
 800df8a:	4621      	mov	r1, r4
 800df8c:	4630      	mov	r0, r6
 800df8e:	f7ff f829 	bl	800cfe4 <__smakebuf_r>
 800df92:	89a0      	ldrh	r0, [r4, #12]
 800df94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df98:	f010 0301 	ands.w	r3, r0, #1
 800df9c:	d00a      	beq.n	800dfb4 <__swsetup_r+0xbc>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60a3      	str	r3, [r4, #8]
 800dfa2:	6963      	ldr	r3, [r4, #20]
 800dfa4:	425b      	negs	r3, r3
 800dfa6:	61a3      	str	r3, [r4, #24]
 800dfa8:	6923      	ldr	r3, [r4, #16]
 800dfaa:	b943      	cbnz	r3, 800dfbe <__swsetup_r+0xc6>
 800dfac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfb0:	d1ba      	bne.n	800df28 <__swsetup_r+0x30>
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
 800dfb4:	0781      	lsls	r1, r0, #30
 800dfb6:	bf58      	it	pl
 800dfb8:	6963      	ldrpl	r3, [r4, #20]
 800dfba:	60a3      	str	r3, [r4, #8]
 800dfbc:	e7f4      	b.n	800dfa8 <__swsetup_r+0xb0>
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	e7f7      	b.n	800dfb2 <__swsetup_r+0xba>
 800dfc2:	bf00      	nop
 800dfc4:	20000170 	.word	0x20000170
 800dfc8:	0800e1f0 	.word	0x0800e1f0
 800dfcc:	0800e210 	.word	0x0800e210
 800dfd0:	0800e1d0 	.word	0x0800e1d0

0800dfd4 <abort>:
 800dfd4:	2006      	movs	r0, #6
 800dfd6:	b508      	push	{r3, lr}
 800dfd8:	f000 f82c 	bl	800e034 <raise>
 800dfdc:	2001      	movs	r0, #1
 800dfde:	f7f3 f844 	bl	800106a <_exit>

0800dfe2 <_raise_r>:
 800dfe2:	291f      	cmp	r1, #31
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	460d      	mov	r5, r1
 800dfea:	d904      	bls.n	800dff6 <_raise_r+0x14>
 800dfec:	2316      	movs	r3, #22
 800dfee:	6003      	str	r3, [r0, #0]
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dff4:	bd38      	pop	{r3, r4, r5, pc}
 800dff6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dff8:	b112      	cbz	r2, 800e000 <_raise_r+0x1e>
 800dffa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dffe:	b94b      	cbnz	r3, 800e014 <_raise_r+0x32>
 800e000:	4620      	mov	r0, r4
 800e002:	f000 f831 	bl	800e068 <_getpid_r>
 800e006:	462a      	mov	r2, r5
 800e008:	4601      	mov	r1, r0
 800e00a:	4620      	mov	r0, r4
 800e00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e010:	f000 b818 	b.w	800e044 <_kill_r>
 800e014:	2b01      	cmp	r3, #1
 800e016:	d00a      	beq.n	800e02e <_raise_r+0x4c>
 800e018:	1c59      	adds	r1, r3, #1
 800e01a:	d103      	bne.n	800e024 <_raise_r+0x42>
 800e01c:	2316      	movs	r3, #22
 800e01e:	6003      	str	r3, [r0, #0]
 800e020:	2001      	movs	r0, #1
 800e022:	e7e7      	b.n	800dff4 <_raise_r+0x12>
 800e024:	2400      	movs	r4, #0
 800e026:	4628      	mov	r0, r5
 800e028:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e02c:	4798      	blx	r3
 800e02e:	2000      	movs	r0, #0
 800e030:	e7e0      	b.n	800dff4 <_raise_r+0x12>
	...

0800e034 <raise>:
 800e034:	4b02      	ldr	r3, [pc, #8]	; (800e040 <raise+0xc>)
 800e036:	4601      	mov	r1, r0
 800e038:	6818      	ldr	r0, [r3, #0]
 800e03a:	f7ff bfd2 	b.w	800dfe2 <_raise_r>
 800e03e:	bf00      	nop
 800e040:	20000170 	.word	0x20000170

0800e044 <_kill_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	2300      	movs	r3, #0
 800e048:	4d06      	ldr	r5, [pc, #24]	; (800e064 <_kill_r+0x20>)
 800e04a:	4604      	mov	r4, r0
 800e04c:	4608      	mov	r0, r1
 800e04e:	4611      	mov	r1, r2
 800e050:	602b      	str	r3, [r5, #0]
 800e052:	f7f2 fffa 	bl	800104a <_kill>
 800e056:	1c43      	adds	r3, r0, #1
 800e058:	d102      	bne.n	800e060 <_kill_r+0x1c>
 800e05a:	682b      	ldr	r3, [r5, #0]
 800e05c:	b103      	cbz	r3, 800e060 <_kill_r+0x1c>
 800e05e:	6023      	str	r3, [r4, #0]
 800e060:	bd38      	pop	{r3, r4, r5, pc}
 800e062:	bf00      	nop
 800e064:	20001fc4 	.word	0x20001fc4

0800e068 <_getpid_r>:
 800e068:	f7f2 bfe8 	b.w	800103c <_getpid>

0800e06c <_init>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	bf00      	nop
 800e070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e072:	bc08      	pop	{r3}
 800e074:	469e      	mov	lr, r3
 800e076:	4770      	bx	lr

0800e078 <_fini>:
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07a:	bf00      	nop
 800e07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07e:	bc08      	pop	{r3}
 800e080:	469e      	mov	lr, r3
 800e082:	4770      	bx	lr
